define(function () {
return ["GUID-000B6F77-4664-4A72-9723-F697040A7436.html@@@1.3.1.4 Library Interface@@@Emulated EEPROM library provides the following interfaces: Functions Name Description EMU_EEPROM_Initialize Initializes the EEPROM Emulator library EMU_EEPROM_StatusGet Gets the current status of the...","GUID-001CDE12-2461-42F4-8F72-783C6EB738D4.html@@@1.2.3.4.23 SYS_CMD_EVENT Enum@@@typedef enum { SYS_CMD_EVENT_WRITE_COMPLETE, SYS_CMD_EVENT_READ_COMPLETE, } SYS_CMD_EVENT; Identifies the Command Event Types This structure identifies the Command Event Types. None...","GUID-003B6A7B-CA79-4634-A1B5-681AE15747B2.html@@@1.1.13.1.2 Using The Library@@@The MX25L driver provides non-blocking API&apos;s to read, write and erase MX25L Flash memory. The MX25L driver can be used in following ways: To perform page write to MX25L Flash. Here, the memory start...","GUID-013A85E2-6948-44FA-907E-7DC945B5CE82.html@@@1.1.6 SDMMC Driver@@@The SDMMC driver is a multi-client multi-instance buffer model based block driver interface which can be used to communicate with SD or eMMC cards. Key Features of Memory Driver: Supports Asynchronous...","GUID-01431AF2-8257-4F6A-8069-1B2CB1BD7B5D.html@@@1.2.5.4.4 SYS_DEBUG_ErrorLevelGet Function@@@SYS_ERROR_LEVEL SYS_DEBUG_ErrorLevelGet ( void ) Returns the global system Error reporting level. This function returns the global System Error reporting level. SYS_DEBUG_Initialize must have returned...","GUID-01BBCD2F-0A31-4AAD-B9FF-C3079B145319.html@@@1.1.2.4.3 DRV_I2C_Open Function@@@DRV_HANDLE DRV_I2C_Open ( const SYS_MODULE_INDEX drvIndex, const DRV_IO_INTENT ioIntent ) Opens the specified I2C driver instance and returns a handle to it. This routine opens the specified I2C...","GUID-01EDD938-2B06-45D4-B301-E5A39BB8BAE7.html@@@1.3.2.4.4 I2C_BB_WriteForced Function@@@bool I2C_BB_WriteForced (uint16_t address, uint8_t *pdata, size_t length) Force writes data to the slave. I2C Master calls this function to transmit the entire buffer to the slave even if the slave...","GUID-0216C2E2-D32B-431B-8469-CEEE41248296.html@@@1.2.11.4.9 SYS_TIME_FrequencyGet Function@@@uint32_t SYS_TIME_FrequencyGet ( void ) Gets the frequency at which the hardwaer timer counts. For tick-less mode this API returns the frequency at which the hardware timer runs. For tick-based mode...","GUID-0227D171-4FC3-4FBD-AB61-ECF771414E78.html@@@1.2.1.12 SYS_MODULE_OBJ Typedef@@@typedef uintptr_t SYS_MODULE_OBJ; Handle to an instance of a system module. This data type is a handle to a specific instance of a system module (such as a device driver). Code outside of a specific...","GUID-023598E8-102F-44AD-B249-A4274EEFEF19.html@@@1.2.1.19 SYS_MODULE_DEINITIALIZE_ROUTINE Typedef@@@typedef void (* SYS_MODULE_DEINITIALIZE_ROUTINE) ( SYS_MODULE_OBJ object ); Pointer to a routine that deinitializes a system module (driver, library, or system-maintained application). System Module...","GUID-025A300A-C4E6-40B2-9673-947AE4B14B2F.html@@@1.1.2.4.16 DRV_I2C_WriteReadTransfer Function@@@bool DRV_I2C_WriteReadTransfer ( const DRV_HANDLE handle, uint16_t address, void * const writeBuffer, const size_t writeSize, void * const readBuffer, const size_t readSize ) This is a blocking...","GUID-02B7E5B7-DE83-434E-B5A3-9428923F2D83.html@@@1.2.3.4.8 SYS_CMD_PRINT Function@@@void SYS_CMD_PRINT ( const char *format, ...) Outputs a printout to the Command Processor System Service console. This function outputs a printout to the Command Processor System Service console...","GUID-030A860C-69CB-4950-B0D8-91A9E1DA2839.html@@@1.1.13.1.4.6 DRV_MX25L_ReadJedecId Function@@@bool DRV_MX25L_ReadJedecId ( const DRV_HANDLE handle, void *jedec_id ); Reads JEDEC-ID of the flash device. This function schedules a blocking operation for reading the JEDEC-ID. This information can...","GUID-03194F57-0DB7-4821-A8AA-CE37A033C333.html@@@1.1.8.2 Using The Library@@@The SPI driver builds on top of the SPI peripheral library (PLIB) and provides write, read and write-read API&apos;s in blocking and non-blocking mode. Provides Write, Read and Write followed by Read...","GUID-0381E2F0-27AD-4688-8C95-60FC00AD42FF.html@@@1.1.13.1.4.1 DRV_MX25L_Initialize Function@@@SYS_MODULE_OBJ DRV_MX25L_Initialize ( const SYS_MODULE_INDEX drvIndex, const SYS_MODULE_INIT * const init ); Initializes the MX25L Driver This routine initializes the MX25L driver making it ready for...","GUID-03A5D157-22DC-462D-B525-18C01DBB424C.html@@@1.2.9.5 SYS_PORT_PinSet Function@@@void SYS_PORT_PinSet (SYS_PORT_PIN pin) Sets the selected pin. This function drives &apos;1&apos; on the selected I/O line/pin. None. Param Description pin One of the IO pins from the enum SYS_PORT_PIN None...","GUID-03E37865-7F03-4BF3-B654-845323CBE7E4.html@@@1.1.13.1.4.15 DRV_MX25L_GEOMETRY Struct@@@typedef struct { uint32_t read_blockSize; uint32_t read_numBlocks; uint32_t numReadRegions; uint32_t write_blockSize; uint32_t write_numBlocks; uint32_t numWriteRegions; uint32_t erase_blockSize...","GUID-04AD35B0-FC85-416B-83D0-7C75D9D54CB8.html@@@1.1.12.1.1 How the Library Works@@@The AT25DF driver library is a single-client, single-instance based driver interface. Abstraction Model The AT25DF driver interface provides read, write and Erase functions that abstract out the...","GUID-05239B51-F3DC-495F-A373-057A692D1CE2.html@@@1.2.3.4.4 SYS_CMD_READY_TO_READ Function@@@bool SYS_CMD_READY_TO_READ ( void ) Allows upper layer application to confirm that the command module is ready to accept command input This function allows upper layer application to confirm that the...","GUID-053B53A0-6358-4572-87A9-D344535EECF0.html@@@1.2.7.4.48 SYS_FS_FILE_SEEK_CONTROL Enum@@@typedef enum { /* Set file offset to input number of bytes from the start of file */ SYS_FS_SEEK_SET, /* Set file offset to its current location plus input number of bytes */ SYS_FS_SEEK_CUR, /* Set...","GUID-05D0B89A-EE4D-46D4-B58F-7402C56061AE.html@@@1.2.11 Time System Service@@@The Timer System Service Library is capable of providing periodic or one-shot alarm and delays to the user. It uses a hardware timer peripheral library for providing it&apos;s timing services. Key...","GUID-05D542C0-88AB-429B-8C82-574332D86DB3.html@@@1.1.6.4.12 DRV_SDMMC_IsWriteProtected Function@@@bool DRV_SDMMC_IsWriteProtected ( const DRV_HANDLE handle ); Returns the write protect status of the SDMMC. This function returns the physical write status of the SDMMC. This function returns true if...","GUID-066D09D2-5550-49D9-ADA2-60A702DB243E.html@@@1.2.7 File System Service@@@The MPLAB Harmony File System Service (SYS_FS) provides an application programming interface (API) through which a utility or user program requests services of a file system. Some file system APIs may...","GUID-066D0FA7-453C-4736-8064-5E4224C50558.html@@@1.1.3.4.17 DRV_MEMORY_TransferHandlerSet Function@@@void DRV_MEMORY_TransferHandlerSet ( const DRV_HANDLE handle, const void * transferHandler, const uintptr_t context ); Sets the pointer to the function (and it&apos;s context) to be called when queued...","GUID-0767C1BA-B8A2-4C3D-85C2-A43620242B0E.html@@@1.3.2.4.6 I2C_BB_ErrorGet Function@@@I2CBB_ERROR I2C_BB_ErrorGet ( void ) Returns the error occurred during transfer. This function returns the error during transfer. I2C_BB_Initialize must have been called for the associated I2C...","GUID-079021A9-BC3F-4BB9-8BF9-04E8459E69C3.html@@@1.1.6.3 Configuring The Library@@@SDMMC Driver Library should be configured via MHC. The following figures show the MHC configuration window for SDMMC driver and brief description. Common User Configuration for all Instances Driver...","GUID-084F0A8A-2149-4A06-8CCB-7AD00C30134B.html@@@1.1.12.1.4.11 DRV_AT25DF_TransferStatusGet Function@@@DRV_AT25DF_TRANSFER_STATUS DRV_AT25DF_TransferStatusGet ( const DRV_HANDLE handle) Gets the current status of the transfer request. This routine gets the current status of the transfer request...","GUID-090F979E-B329-47FA-B6CA-D7BE390EAB02.html@@@1.2.5.4.3 SYS_DEBUG_ErrorLevelSet Function@@@void SYS_DEBUG_ErrorLevelSet (SYS_ERROR_LEVEL level) Sets the global system error reporting level. This function sets the global system error reporting level. SYS_DEBUG_Initialize must have returned a...","GUID-09414A23-7390-4DBF-950D-F0BB8575A7B6.html@@@1.2.7.4.26 SYS_FS_DirClose Function@@@SYS_FS_RESULT SYS_FS_DirClose ( SYS_FS_HANDLE handle ); Closes an opened directory. This function closes a directory that was opened earlier opened with the SYS_FS_DirOpen function. A valid directory...","GUID-097B9FB1-23AD-4116-9FD4-C39462A4DC25.html@@@1.1.2.4.21 DRV_I2C_ERROR Enum@@@typedef enum { /* Busy*/ DRV_I2C_ERROR_NONE, /* Transfer Successful */ DRV_I2C_ERROR_NACK, } DRV_I2C_ERROR; Defines the I2C error values This data type defines the error values for the errors occured...","GUID-09CD262E-94FF-4332-B87D-B39C2EB24755.html@@@1.1.11.1.4.1 DRV_AT25_Initialize Function@@@SYS_MODULE_OBJ DRV_AT25_Initialize ( const SYS_MODULE_INDEX drvIndex, const SYS_MODULE_INIT * const init ) Initializes the AT25 EEPROM device This routine initializes the AT25 EEPROM device driver...","GUID-09E87B48-98E8-49F7-BBBD-6C049105F75C.html@@@1.2.5.4.9 SYS_DEBUG_MESSAGE Macro@@@#define SYS_DEBUG_MESSAGE (level,message) SYS_DEBUG_MESSAGE(SYS_ERROR_LEVEL level, const char* message ) Prints a debug message if the system error level is defined at or lower than the level...","GUID-09ED0A48-5AA8-44E4-BC15-6BCCF5C9D516.html@@@1.4.3 Configuring the Library@@@The OSAL can be configured through the MHC. The following figure shows the MHC configuration window for configuring the OSAL and a brief description of various configuration options. The OSAL can be...","GUID-09F65940-7D05-4F78-81C9-6356B65DEF21.html@@@1.2.3 Command Processor System Service@@@The Command Processor System Service Library is a collection of operations specific to supporting user input commands. It provides the developer with simple APIs to implement a command console. The...","GUID-0A0D0DD6-3DF8-4DBF-A8DE-81EB0726D30A.html@@@1.1.13.2.4.2 DRV_SST26_Open Function@@@DRV_HANDLE DRV_SST26_Open ( const SYS_MODULE_INDEX drvIndex, const DRV_IO_INTENT ioIntent ); Opens the specified SST26 driver instance and returns a handle to it This routine opens the specified SST26...","GUID-0A239E79-52DB-485D-915B-C927B3D714F6.html@@@1.2.9.10 SYS_PORT_PIN Enum@@@The Port Pins vary based on device family. Refer to the generated header file for the actual values. Identifies the available port pins. This enumeration identifies the available port pins. The caller...","GUID-0AAFE706-5859-4761-97D4-223C2EF91279.html@@@1.2.5.4.2 SYS_DEBUG_Status Function@@@SYS_STATUS SYS_DEBUG_Status ( SYS_MODULE_OBJ object ) Returns status of the specific instance of the debug service module. This function returns the status of the specific debug service module...","GUID-0ADED94B-D4BC-4C7D-88CA-841084FF0CFE.html@@@1.1.13.3 W25 Driver@@@This driver provides a blocking interface to read, write and erase W25 Flash memory. The driver uses the QMSPI peripheral library to interface with the W25 Flash. Key Features: Supports Multiple...","GUID-0B4A66DB-3680-46D5-BC13-EEA9E8A84481.html@@@1.1.3.4.9 DRV_MEMORY_SyncEraseWrite Function@@@bool DRV_MEMORY_SyncEraseWrite ( const DRV_HANDLE handle, void *sourceBuffer, uint32_t blockStart, uint32_t nBlock ); Erase and Write data for the specified number of memory blocks in Synchronous...","GUID-0B4B2BDA-18B7-4F86-908E-5B087BBE6DB4.html@@@1.2.11.4.25 SYS_TIME_RESULT Enum@@@typedef enum { // Operation completed with success. SYS_TIME_SUCCESS, // Invalid handle or operation failed. SYS_TIME_ERROR } SYS_TIME_RESULT; Result of a time service client interface operation...","GUID-0BDF001D-9151-4D5E-BC98-4DCD1B5ABD24.html@@@1.4.4.19 OSAL_RESULT Enum@@@typedef enum OSAL_RESULT { OSAL_RESULT_NOT_IMPLEMENTED = - 1 , OSAL_RESULT_FALSE = 0 , OSAL_RESULT_TRUE = 1 } OSAL_RESULT; Enumerated type representing the general return value from OSAL functions...","GUID-0C40AEB7-D68A-4AE4-AC5B-E5580C634399.html@@@1.4.4.17 OSAL_SEM_TYPE Enum@@@typedef enum OSAL_SEM_TYPE { OSAL_SEM_TYPE_BINARY, OSAL_SEM_TYPE_COUNTING } OSAL_SEM_TYPE; Enumerated type representing the possible types of semaphore. This enum represents possible semaphore types...","GUID-0CD901F4-15C6-4FA7-8805-3934D2C6C250.html@@@1.1.10.1.4.1 DRV_AT24_Initialize Function@@@SYS_MODULE_OBJ DRV_AT24_Initialize ( const SYS_MODULE_INDEX drvIndex, const SYS_MODULE_INIT * const init ) Initializes the AT24 EEPROM device This routine initializes the AT24 EEPROM device driver...","GUID-0D62C2C2-2AEB-4AE6-BFEC-E7A32ABAD3BF.html@@@1.2.6.9 SYS_DMA_SOURCE_ADDRESSING_MODE Enum@@@typedef enum { /* Source address is always fixed */ SYS_DMA_SOURCE_ADDRESSING_MODE_FIXED, /* Source address is incremented after every transfer */ SYS_DMA_SOURCE_ADDRESSING_MODE_INCREMENTED, /* Used...","GUID-0DEAE4F8-7490-4EC9-9B9E-91B684AE3B07.html@@@1.1.11.1.4.10 DRV_AT25_EventHandlerSet Function@@@void DRV_AT25_EventHandlerSet ( const DRV_HANDLE handle, const DRV_AT25_EVENT_HANDLER eventHandler, const uintptr_t context ) Allows a client to identify a transfer event handling function for the...","GUID-0DECF377-6DF4-46B4-A309-5C08078198F0.html@@@1.2.7.4.34 SYS_FS_FileDirectoryRenameMove Function@@@SYS_FS_RESULT SYS_FS_FileDirectoryRenameMove ( const char *oldPath, const char *newPath ); Renames or moves a file or directory. This function renames or moves a file or directory. The file or...","GUID-0E0F508F-835A-47CF-B94C-6965642EDAFF.html@@@1.1.9.4.7 DRV_USART_BufferEventHandlerSet Function@@@void DRV_USART_BufferEventHandlerSet ( const DRV_HANDLE handle, const DRV_USART_BUFFER_EVENT_HANDLER eventHandler, const uintptr_t context ) Allows a client to identify a buffer event handling...","GUID-0EE2CCDD-3C1B-4DA6-90EB-50B9B67AC895.html@@@1.4.2 Using The Library@@@Interface Header File: osal.h The interface to the OSAL Library is defined in the osal.h header file. Any C language source (.c) file that uses the OSAL System Service library should include osal.h...","GUID-0EE74238-A733-42E6-A088-EFDF6DAA51BF.html@@@1.4.4.2 OSAL_SEM_Delete Function@@@OSAL_RESULT OSAL_SEM_Delete (OSAL_SEM_HANDLE_TYPE* semID) Deletes an OSAL Semaphore. This function deletes an OSAL semaphore. Semaphore must have been created. Param Description semID Pointer to the...","GUID-0F92AB40-ECB3-45CB-9BFD-D633997B307A.html@@@1.1.12.1.4.1 DRV_AT25DF_Initialize Function@@@SYS_MODULE_OBJ DRV_AT25DF_Initialize ( const SYS_MODULE_INDEX drvIndex, const SYS_MODULE_INIT * const init ) Initializes the AT25DF FLASH device This routine initializes the AT25DF FLASH device driver...","GUID-0F9DEE27-DE19-477C-9AD4-3F4E5C84CF8B.html@@@1.2.7.4.54 SYS_FS_EVENT Enum@@@typedef enum { /* Media has been mounted successfully. */ SYS_FS_EVENT_MOUNT, /* Media has been mounted successfully. * Media has to be formatted as there is no filesystem present. */...","GUID-0FB267B9-32FD-4D45-A895-A284C189AB9F.html@@@1.2.4.4.1 SYS_CONSOLE_Initialize Function@@@SYS_MODULE_OBJ SYS_CONSOLE_Initialize ( const SYS_MODULE_INDEX index, const SYS_MODULE_INIT* const init ) Initializes the console instance module and opens or initializes the specific module instance...","GUID-0FFCD458-7F10-49C8-B068-E4E4B5439C47.html@@@1.1.3 Memory Driver@@@The Memory driver is a multi-client multi-instance buffer model based block driver interface which can be used to communicate with various media devices. Key Features of Memory Driver: It works in...","GUID-1017B1C8-B505-4C3E-88C5-676BDB100A87.html@@@1.2.11.4.22 SYS_TIME_TimerStop Function@@@SYS_TIME_RESULT SYS_TIME_TimerStop ( SYS_TIME_HANDLE handle ) Stops a running software timer. This function stops a previously created and running software timer (i.e. the given timer&apos;s counter will...","GUID-10A54591-77AF-4FC3-9EEE-6F1C1E18DA17.html@@@1.1.6.2 Using The Library@@@The SDMMC driver can be used to communicate with SD/eMMC Cards. Modes supported: Asynchronous mode : Supported in both Bare-metal and RTOS environment Usage Methods Application can directly use the...","GUID-10D16A6B-098F-4F29-BCAA-4657A6ADB972.html@@@1.4.4.18 OSAL_CRIT_TYPE Enum@@@typedef enum OSAL_CRIT_TYPE { OSAL_CRIT_TYPE_LOW, OSAL_CRIT_TYPE_HIGH } OSAL_CRIT_TYPE; Enumerated type representing the possible types of critical section. This enum represents possible critical...","GUID-11624F96-C547-408B-81F9-B4FA1C9487D6.html@@@1.1.13.2 SST26 Driver@@@This driver provides a non-blocking interface to read, write and erase SST26 Flash memory. The driver uses the below peripheral library to interface with the SST26 Flash. QSPI Peripheral Library...","GUID-12F1A1E3-E31A-45D6-9D59-6CEF9F0B1684.html@@@1.1.11.1.4.3 DRV_AT25_Open Function@@@DRV_HANDLE DRV_AT25_Open ( const SYS_MODULE_INDEX drvIndex, const DRV_IO_INTENT ioIntent ) Opens the specified AT25 driver instance and returns a handle to it. This routine opens the specified AT25...","GUID-13559EF2-4A66-45EE-A200-6C2A80BA30B9.html@@@1.1.8.4.14 DRV_SPI_WriteReadTransfer Function@@@void DRV_SPI_WriteReadTransfer ( const DRV_HANDLE handle, void * pTransmitData, size_t txSize, void * pReceiveData, size_t rxSize ); This is a blocking function that transmits and receives data over...","GUID-13815F0C-6C56-4478-979F-D2D1623BDF20.html@@@1.2.7.4.61 SYS_FS_MEDIA_MANAGER_CommandStatusGet Function@@@SYS_FS_MEDIA_COMMAND_STATUS SYS_FS_MEDIA_MANAGER_CommandStatusGet ( uint16_t diskNo, SYS_FS_MEDIA_BLOCK_COMMAND_HANDLE bufferHandle ) Gets the command status. This function gets the command status...","GUID-143402B1-D8C1-4503-B7C3-0D6DF2FAB253.html@@@1.1.12.1.4.5 DRV_AT25DF_Read Function@@@bool DRV_AT25DF_Read ( const DRV_HANDLE handle, void *rxData, uint32_t rxDataLength, uint32_t address ) Reads &apos;n&apos; bytes of data from the specified start address of FLASH. This function schedules a...","GUID-15105BA3-7A7E-45B3-B3ED-61370B648774.html@@@1.2.11.4.3 SYS_TIME_Status Function@@@SYS_STATUS SYS_TIME_Status ( SYS_MODULE_OBJ object ) Returns System Time status. This function returns the current status of the System Time module. None. Param Description object SYS TIME object...","GUID-1522E7A9-D0DA-48E9-A893-7AFF88739328.html@@@1.3.1.4.1 EMU_EEPROM_Initialize Function@@@SYS_MODULE_OBJ EMU_EEPROM_Initialize ( const SYS_MODULE_INDEX drvIndex, const SYS_MODULE_INIT* const init) Initializes the EEPROM Emulator library. Initializes the emulated EEPROM memory space; if the...","GUID-156F2C8E-1429-4D4E-A212-B9248988F48E.html@@@1.1.8.4.1 DRV_SPI_Initialize Function@@@SYS_MODULE_OBJ DRV_SPI_Initialize ( const SYS_MODULE_INDEX index, const SYS_MODULE_INIT * const init ) Initializes the SPI instance for the specified driver index. This routine initializes the SPI...","GUID-16324E3F-ED9E-4290-8C2F-C346F4737630.html@@@1.1.2.4.9 DRV_I2C_ReadTransferAdd Function@@@void DRV_I2C_ReadTransferAdd ( const DRV_HANDLE handle, const uint16_t address, void * const buffer, const size_t size, DRV_I2C_TRANSFER_HANDLE * const transferHandle ) Queues a read operation. This...","GUID-16CA62B0-B63E-4BF8-B2D2-82960FB3B4D4.html@@@1.1.7.4.18 DRV_SDSPI_COMMAND_HANDLE_INVALID Macro@@@#define DRV_SDSPI_COMMAND_HANDLE_INVALID SYS_MEDIA_BLOCK_COMMAND_HANDLE_INVALID SDSPI Driver&apos;s Invalid Command Handle. This value defines the SDSPI Driver Invalid Command Handle. This value is...","GUID-16F6C851-DB9F-4997-8669-1E9C6C128B45.html@@@1.1.13.2.4.12 DRV_SST26_TransferStatusGet Function@@@DRV_SST26_TRANSFER_STATUS DRV_SST26_TransferStatusGet ( const DRV_HANDLE handle ); Gets the current status of the transfer request. This routine gets the current status of the transfer request. The...","GUID-17500CE8-820C-482D-B721-87577B1FA289.html@@@1.2.7.4.20 SYS_FS_FileSync Function@@@SYS_FS_RESULT SYS_FS_FileSync ( SYS_FS_HANDLE handle ); Flushes the cached information when writing to a file. This function flushes the cached information when writing to a file. The SYS_FS_FileSync...","GUID-1766284D-BC74-461B-9977-A46B45EB363A.html@@@1.2.4.4.19 SYS_CONSOLE_STATUS Enum@@@typedef enum { SYS_CONSOLE_STATUS_NOT_CONFIGURED, SYS_CONSOLE_STATUS_CONFIGURED, SYS_CONSOLE_STATUS_BUSY, SYS_CONSOLE_STATUS_ERROR } SYS_CONSOLE_STATUS; System Console Status. This enumeration lists...","GUID-177E8C6B-6F6F-4E94-9096-38134597D79A.html@@@1.2.4.1 How the Library Works@@@Each supported console device has its own implementation of the Console System service APIs. Function pointers to the console device implementations are provided in the console device descriptor...","GUID-17A43A77-34A9-4F51-8985-256BB15EC8AC.html@@@1.1.12.1.2 Using The Library@@@The AT25DF driver provides non-blocking API&apos;s to read, write and erase AT25DF Flash memory. The AT25DF driver can be used in following ways: To perform reads, writes and erase from/to any Flash memory...","GUID-17D19DF8-7FD4-4C76-A204-5CEFB779D8A9.html@@@1.1.13.2.4.8 DRV_SST26_BulkErase Function@@@bool DRV_SST26_BulkErase ( const DRV_HANDLE handle, uint32_t address ); Erase a block from the specified block start address. This function schedules a non-blocking block erase operation of flash...","GUID-184BEB58-3960-409F-9875-790B476A679D.html@@@1.1.6.4.9 DRV_SDMMC_GeometryGet Function@@@SYS_MEDIA_GEOMETRY* DRV_SDMMC_GeometryGet ( const DRV_HANDLE handle ); Returns the geometry of the device. This API gives the following geometrical details of the SD Card. Media Property Number of...","GUID-188D4B15-E781-43B9-8C34-E28EF8C25CCB.html@@@1.1.4.4.16 DRV_NAND_FLASH_SkipBlock_BlockWrite Function@@@bool DRV_NAND_FLASH_SkipBlock_BlockWrite ( const DRV_HANDLE handle, uint16_t blockNum, uint8_t *data, bool disableBlockCheck) Writes the data of a whole block to NAND Flash. This function schedules a...","GUID-19E37632-5F52-4834-93D4-BB61F5ED1FE5.html@@@1.1.10.1.3 Configuring The Library@@@The AT24 driver library should be configured through the MHC. The following figures show the MHC configuration window for the AT24 driver and brief description. AT24 Driver with SPI peripheral...","GUID-1A116E58-BD6D-4114-9B86-CDD6241EAF87.html@@@1.2.6.12 SYS_DMA_CHANNEL_CALLBACK Typedef@@@typedef void (*SYS_DMA_CHANNEL_CALLBACK) (SYS_DMA_TRANSFER_EVENT event, uintptr_t contextHandle); Pointer to a DMA Transfer Event handler function. This data type defines a DMA Transfer Event Handler...","GUID-1A13AEB3-150C-408D-B529-1E3561FEDF5C.html@@@1.1.4.4.8 DRV_NAND_FLASH_FeatureSet Function@@@bool DRV_NAND_FLASH_FeatureSet ( const DRV_HANDLE handle, uint8_t *featureData, uint8_t featureDataSize, uint8_t featureAddress) Enables or disables target specific features. This routine enables or...","GUID-1A162AB8-8001-4AF9-AFB9-B66AED10D4AE.html@@@1.1.6.4.11 DRV_SDMMC_IsAttached Function@@@bool DRV_SDMMC_IsAttached ( const DRV_HANDLE handle ); Returns the physical attach status of the SD Card. This function returns the physical attach status of the SD Card. The DRV_SDMMC_Initialize...","GUID-1A26E4B2-B446-450A-BADF-0B0C5549FBA2.html@@@1.2.7.4.69 SYS_FS_MEDIA_MANAGER_EventHandlerSet Function@@@void SYS_FS_MEDIA_MANAGER_EventHandlerSet ( const void * eventHandler, const uintptr_t context ); Register the event handler for Mount/Un-Mount events. This function is used to register a FS client...","GUID-1A398EB1-C3DC-4A9A-9112-8D4400166704.html@@@1.2.11.4.7 SYS_TIME_DelayMS Function@@@SYS_TIME_RESULT SYS_TIME_DelayMS ( uint32_t ms, SYS_TIME_HANDLE* handle ) This function is used to generate a delay of a given number of milliseconds. The function will internally create a single shot...","GUID-1ACA0CDE-BB29-4A7F-AF3D-5461ECE86944.html@@@1.2.3.4.17 SYS_CMD_PRINT_FNC Typedef@@@typedef void (*SYS_CMD_PRINT_FNC)( const void * cmdIoParam, const char * format, ...); Identifies a print function API. Print function API. This handle identifies the interface structure of the print...","GUID-1B89EE19-DD90-4347-9D86-6B91B89FD073.html@@@1.1.11.1.3 Configuring The Library@@@The AT25 driver library should be configured through the MHC. The following figures show the MHC configuration window for the AT25 driver and brief description. AT25 Driver with SPI peripheral...","GUID-1BC65F2B-64EC-4567-BCCC-AFFF950EC588.html@@@1.1.5.1.4.8 DRV_SST39_Read Function@@@bool DRV_SST39_Read ( const DRV_HANDLE handle, void *rx_data, uint32_t rx_data_length, uint32_t address ) Reads n bytes of data from the specified start address of flash memory. This function...","GUID-1BD4F2ED-A921-4BA7-BD26-6A82515F4CB4.html@@@1.1.13.2.4.15 DRV_SST26_TRANSFER_STATUS Enum@@@typedef enum { /* Transfer is being processed */ DRV_SST26_TRANSFER_BUSY, /* Transfer is successfully completed*/ DRV_SST26_TRANSFER_COMPLETED, /* Transfer had error*/...","GUID-1C2EEC70-0494-4010-805F-29CE86ED81F6.html@@@1.2.4.4.8 SYS_CONSOLE_Flush Function@@@bool SYS_CONSOLE_Flush ( const SYS_CONSOLE_HANDLE handle) Flushes the read and write queues for the given console instance. This function flushes the read and write buffers. Any on-going transfers...","GUID-1CB9B19B-380F-4016-B314-A50414DDACD2.html@@@1.4.4.10 OSAL_MUTEX_Delete Function@@@OSAL_RESULT OSAL_MUTEX_Delete (OSAL_MUTEX_HANDLE_TYPE* mutexID) Deletes a mutex. This function deletes a mutex and frees associated storage if required. None. Param Description mutexID Pointer to the...","GUID-1CD0D245-E950-41C2-A344-8F1AEE6D25E7.html@@@1.1.2.4.10 DRV_I2C_WriteReadTransferAdd Function@@@void DRV_I2C_WriteReadTransferAdd ( const DRV_HANDLE handle, const uint16_t address, void * const writeBuffer, const size_t writeSize, void * const readBuffer, const size_t readSize...","GUID-1D9C329D-7D74-4D33-A711-A6F33A9714C5.html@@@1.2.7.4.82 SYS_FS_MEDIA_TYPE Enum@@@typedef enum { /* Media is of type NVM (internal flash (non volatile) memory)*/ SYS_FS_MEDIA_TYPE_NVM, /* Media is of type mass storage device */ SYS_FS_MEDIA_TYPE_MSD, /* Media is of type SD card */...","GUID-1DC1CF6A-C007-4369-9A97-ED9858CF73FF.html@@@1.2.1.16 SYS_MODULE_INIT Union@@@typedef union { uint8_t value; struct { // Module-definable field, module-specific usage uint8_t reserved : 4 ; }sys; } SYS_MODULE_INIT; Initializes a module (including device drivers) as requested by...","GUID-1E139F9C-7F58-4B46-A04D-6FE5BBA261B7.html@@@1.1.9.4.15 DRV_USART_WriteBuffer Function@@@bool DRV_USART_WriteBuffer ( const DRV_HANDLE handle, void * buffer, const size_t size ); This is a blocking function that writes data over USART. This function does a blocking write operation. The...","GUID-1E7EF838-CFDF-4322-9E2B-B5AF123EBE19.html@@@1.1.6.1 How the Library Works@@@The SDMMC driver library is a multi-client, multi-instance buffer queue model based block driver interface. Abstraction Model The SDMMC driver provides abstraction to communicate with SD/eMMC card...","GUID-1F0928CE-E0E0-45E3-8717-E96769FA7B9F.html@@@1.1.3.4.25 DRV_MEMORY_COMMAND_HANDLE Typedef@@@typedef SYS_MEDIA_BLOCK_COMMAND_HANDLE DRV_MEMORY_COMMAND_HANDLE; Handle to identify commands queued in the driver. A command handle is returned by a call to the Read, Write, Erase or EraseWrite...","GUID-1F826206-4C2A-4708-B811-DF8392691075.html@@@1.2.9.9 SYS_PORT Enum@@@The Port Channels vary based on device family. Refer to the generated header file for the actual values. Identifies the available Port Channels. This enumeration identifies the available Port...","GUID-1F957550-41AD-4F0F-A9D8-8E289DD36931.html@@@1.1.13.1.4.14 DRV_MX25L_TRANSFER_STATUS Enum@@@typedef enum { /* Transfer is being processed */ DRV_MX25L_TRANSFER_BUSY, /* Transfer is successfully completed*/ DRV_MX25L_TRANSFER_COMPLETED, /* Transfer had error*/...","GUID-2028B78C-A652-404B-ACF0-963F1622CB67.html@@@1.1.8.4.15 DRV_SPI_TRANSFER_HANDLE Typedef@@@typedef uintptr_t DRV_SPI_TRANSFER_HANDLE; Handle identifying the transfer request queued. A transfer handle value is returned by a call to the DRV_SPI_ReadTransferAdd or DRV_SPI_WriteTransferAdd or...","GUID-2048879B-0811-4B9F-9087-0A5B733969C8.html@@@1.4.4.6 OSAL_SEM_GetCount Function@@@uint8_t OSAL_SEM_GetCount (OSAL_SEM_HANDLE_TYPE* semID) Returns the current value of a counting semaphore. This function returns the current value of a counting semaphore. The value returned is...","GUID-2057DC7F-AF3F-4DA1-BBA9-E086A5B949E1.html@@@1.2.7.4.65 SYS_FS_MEDIA_MANAGER_SectorRead Function@@@SYS_FS_MEDIA_BLOCK_COMMAND_HANDLE SYS_FS_MEDIA_MANAGER_SectorRead ( uint16_t diskNo, uint8_t * dataBuffer, uint32_t sector, uint32_t noSectors ); Reads a specified media sector. This function reads a...","GUID-223F4EC1-EFAC-46A1-BF77-0DB6B8CB27BB.html@@@1.2.5.4.10 SYS_DEBUG_PRINT Macro@@@#define SYS_DEBUG_PRINT (level, fmt, ...) Formats and prints an error message if the system error level is defined at or lower than the level specified. This macro formats and prints an error message...","GUID-225EDAEC-C9BA-4CA7-8889-E9C3BC89AA6D.html@@@1.3.2.4.8 I2C_BB_TransferSetup Function@@@bool I2C_BB_TransferSetup (I2CBB_TRANSFER_SETUP* setup, uint32_t tmrSrcClkFreq ) Dynamic setup of I2C Bit Bang Library. This API is generally used when there are multiple clients on the same I2C bus...","GUID-23DDD2ED-C0F6-44CB-9826-9592AF32085C.html@@@1.2.4.4.11 SYS_CONSOLE_WriteFreeBufferCountGet Function@@@ssize_t SYS_CONSOLE_WriteFreeBufferCountGet ( const SYS_CONSOLE_HANDLE handle) Returns the amount of free space in bytes in the transmit buffer. This function indicates the number of bytes of free...","GUID-244989FC-1190-4854-8A64-9F0FAEF1B07C.html@@@1.1.3.4.6 DRV_MEMORY_AsyncErase Function@@@void DRV_MEMORY_AsyncErase ( const DRV_HANDLE handle, DRV_MEMORY_COMMAND_HANDLE *commandHandle, uint32_t blockStart, uint32_t nBlock ); Erase the specified number of memory blocks in Asynchronous...","GUID-26A4668F-DD5C-48D2-8FBA-9419B8BB9681.html@@@1.1.10.1.1 How the Library Works@@@The AT24 driver library is a single-client, single-instance based driver interface. Abstraction Model The AT24 driver interface provides read and write functions that abstract out the internal...","GUID-26A5CBB5-5CB3-4298-8E56-AF03087027CF.html@@@1.1.13.2.3 Configuring The Library@@@The SST26 driver library should be configured through the MHC. The following figures show the MHC configuration window for the SST26 driver and brief description. SST26 Driver with SQI peripheral...","GUID-26AE1A76-5DC9-4184-A41E-9608DC5AB589.html@@@1.1.9.4.23 DRV_USART_SERIAL_SETUP Struct@@@This structure is implementation specific. It is fully defined in drv_usart_definitions.h. Defines the data required to dynamically set the serial settings. This data type defines the data required to...","GUID-26B2DB3A-8817-401C-8EA1-BA288827F83C.html@@@1.2.3.4.2 SYS_CMD_ADDGRP Function@@@bool SYS_CMD_ADDGRP ( const SYS_CMD_DESCRIPTOR* pCmdTbl, int nCmds, const char * groupName, const char * menuStr) Allows clients to add command process to the Command Processor System Service. Client...","GUID-26BFCB4C-9CD6-4D18-AD58-CB6437C8600F.html@@@1.1.1.7 DRV_IO_ISEXCLUSIVE Macro@@@#define DRV_IO_ISEXCLUSIVE (intent) (intent & DRV_IO_INTENT_EXCLUSIVE) Returns if the I/O intent provided is non-blocking. This macro returns if the I/O intent provided is non-blocking. None...","GUID-26C6A14A-2B42-456C-9E8A-06DF30F2DE21.html@@@1.1.9.4.6 DRV_USART_SerialSetup Function@@@bool DRV_USART_SerialSetup ( const DRV_HANDLE handle, DRV_USART_SERIAL_SETUP* setup ) Sets the USART serial communication settings dynamically. This function sets the USART serial communication...","GUID-270CFE41-7A8D-4C82-BE72-BDF750BD0962.html@@@1.1.6.4.3 DRV_SDMMC_Tasks Function@@@void DRV_SDMMC_Tasks ( SYS_MODULE_OBJ object ); Maintains the driver&apos;s state machine. This routine is used to maintain the driver&apos;s internal state machine. The DRV_SDMMC_Initialize routine must have...","GUID-2729150D-D502-4BC4-BB41-653718EF531C.html@@@1.4.4 Library Interface@@@OSAL library provides the following interfaces: Functions Name Description OSAL_SEM_Create Creates an OSAL Semaphore OSAL_SEM_Delete Deletes an OSAL Semaphore OSAL_SEM_Pend Waits on a semaphore...","GUID-276B2413-47FF-4F2A-8221-2808537B02CE.html@@@1.1.13.1 MX25L Driver@@@This driver provides a non-blocking interface to read, write and erase MX25L Flash memory. The driver uses the QSPI peripheral library to interface with the MX25L Flash. Key Features: Supports...","GUID-279921BE-6BA3-4C5A-83A3-C14760945710.html@@@1.1.12.1.4.13 DRV_AT25DF_EventHandlerSet Function@@@void DRV_AT25DF_EventHandlerSet ( const DRV_HANDLE handle, const DRV_AT25DF_EVENT_HANDLER eventHandler, const uintptr_t context ) Allows a client to identify a transfer event handling function for the...","GUID-27A799DA-3CEE-457F-AFEE-819817CA5978.html@@@1.2.7.4.33 SYS_FS_FileDirectoryRemove Function@@@SYS_FS_RESULT SYS_FS_FileDirectoryRemove ( const char * path ); Removes a file or directory. This function removes a file or directory as specified by the path. The disk has to be mounted before a...","GUID-28219199-6917-43CE-A9D3-0C84F4017C28.html@@@1.2.3.4.22 SYS_CMD_API Struct@@@typedef struct { // Message function API SYS_CMD_MSG_FNC msg; // Print function API SYS_CMD_PRINT_FNC print; // Put single char function API SYS_CMD_PUTC_FNC putc; // Data available API...","GUID-28F55864-F969-436B-BFD3-93463186F072.html@@@1.1.8.4.7 DRV_SPI_WriteReadTransferAdd Function@@@void DRV_SPI_WriteReadTransferAdd ( const DRV_HANDLE handle, void * pTransmitData, size_t txSize, void * pReceiveData, size_t rxSize, DRV_SPI_TRANSFER_HANDLE * const transferHandle ); Queues a...","GUID-2960D7B8-65FA-447F-AD81-B1E62002A04B.html@@@1.1.8.4 Library Interface@@@SPI driver library provides the following interfaces: Functions Name Description Asynchronous Mode Synchronous Mode DRV_SPI_Initialize Initializes the SPI instance for the specified driver index Yes...","GUID-29718976-3953-4ACB-80D9-E4F98D7267EB.html@@@1.2.7.4.44 SYS_FS_HANDLE Typedef@@@typedef uintptr_t SYS_FS_HANDLE; This type defines the file handle. This type defines the file handle. File handle is returned by the File Open function. None...","GUID-2A607243-AAFB-446B-B743-F33F83344DD0.html@@@1.1.7.4.15 DRV_SDSPI_Read Function@@@void DRV_SDSPI_Read ( const DRV_HANDLE handle, DRV_SDSPI_COMMAND_HANDLE* commandHandle, void * targetBuffer, uint32_t blockStart, uint32_t nBlock ) This routine provides interface to the file system...","GUID-2A669FAD-CD27-46A4-BB9F-DCECC71E891A.html@@@1.1.5.1.4.7 DRV_SST39_ChipErase Function@@@bool DRV_SST39_ChipErase ( const DRV_HANDLE handle ) Erase entire SST39 flash memory. This function schedules a blocking chip erase operation of flash memory. The DRV_SST39_Open() routine must have...","GUID-2AD6AC66-AB70-4E20-B1EF-00555DCC0F66.html@@@1.5.3 Azure RTOS ThreadX@@@This advanced real-time operating system (RTOS) is designed specifically for deeply embedded applications. Among the multiple benefits it provides are advanced scheduling facilities, message passing...","GUID-2BD06221-FD9C-403C-B3E2-CBAAF7A4F445.html@@@1.1.7.4.19 DRV_SDSPI_COMMAND_STATUS Enum@@@typedef enum { /*Done OK and ready */ DRV_SDSPI_COMMAND_COMPLETED = SYS_MEDIA_COMMAND_COMPLETED, /*Scheduled but not started */ DRV_SDSPI_COMMAND_QUEUED = SYS_MEDIA_COMMAND_QUEUED, /*Currently being...","GUID-2C7BBB24-1695-482B-A1AA-F29D74F7916D.html@@@1.3.2.4.10 I2CBB_ERROR Enum@@@typedef enum { /* No error has occurred. */ I2CBB_ERROR_NONE, /* A bus transaction was NAK&apos;ed */ I2CBB_ERROR_NAK, /* A bus error has occurred. */ I2CBB_ERROR_BUS, } I2CBB_ERROR; I2C Bit Bang Transfer...","GUID-2CD3427C-B642-4F8A-9D40-CE532F4128B9.html@@@1.2.1.5 SYS_MEDIA_PROPERTY Enum@@@typedef enum { /* Media supports Byte Write */ SYS_MEDIA_SUPPORTS_BYTE_WRITES = 0x01 , /* Media supports only Read operation */ SYS_MEDIA_SUPPORTS_READ_ONLY = 0x02 , /* Media supports OTP (One Time...","GUID-2CD6DE9A-6F65-4E4E-A370-6F4227534CE1.html@@@1.1.7.4.20 DRV_SDSPI_EVENT Enum@@@typedef enum { /* Operation has been completed successfully. */ DRV_SDSPI_EVENT_COMMAND_COMPLETE = SYS_MEDIA_EVENT_BLOCK_COMMAND_COMPLETE, /* There was an error during the operation */...","GUID-2CF46A98-9137-4819-8C1C-83621B96CA1E.html@@@1.2.2.12 SYS_CACHE_CleanDCache_by_Addr Function@@@void SYS_CACHE_CleanDCache_by_Addr (uint32_t *addr, int32_t size) Data Cache Clean by address. Cleans Data Cache for the given address. None. Param Description addr address (aligned to 32-byte...","GUID-2D66D8A2-D985-4A4B-903C-D713C835DDC3.html@@@1.3.1.4.3 EMU_EEPROM_FormatMemory Function@@@bool EMU_EEPROM_FormatMemory ( void ) Erases the entire emulated EEPROM memory space. Erases the entire emulated EEPROM memory space and formats it. Function EMU_EEPROM_Initialize should have been...","GUID-2DA31F3A-13A0-4B9F-97BC-DEBDA757C12C.html@@@1.1.12.1.4.8 DRV_AT25DF_SectorErase Function@@@bool DRV_AT25DF_SectorErase ( const DRV_HANDLE handle, uint32_t address); Erase the sector from the specified block start address. This function schedules a non-blocking sector erase operation of...","GUID-2F9179BF-AB7D-4BE3-9794-949D010FA17F.html@@@1.2.9.7 SYS_PORT_PinInputEnable Function@@@void SYS_PORT_PinInputEnable (SYS_PORT_PIN pin) Enables selected IO pin as input. This function enables selected IO pin as input. None. Param Description pin One of the IO pins from the enum...","GUID-2FB7347D-8FBD-411F-88D8-58A813EA9498.html@@@1.5 Third party Products@@@MPLAB Harmony enables seamless integration of third-party solutions, such as RTOS, Middleware, Drivers, and so on, into the software framework. MPLAB Harmony is a flexible, abstracted, fully...","GUID-30394233-2FAC-4A34-80F4-9FCF29158508.html@@@1.1.8.4.21 DRV_SPI_DATA_BITS Enum@@@typedef enum { DRV_SPI_DATA_BITS_ 8 , DRV_SPI_DATA_BITS_ 9 , DRV_SPI_DATA_BITS_ 10 , DRV_SPI_DATA_BITS_ 11 , DRV_SPI_DATA_BITS_ 12 , DRV_SPI_DATA_BITS_ 13 , DRV_SPI_DATA_BITS_ 14 , DRV_SPI_DATA_BITS_...","GUID-3045AE88-9A21-4BE2-B1D3-3BD2832A31CF.html@@@1.1.7.4.1 DRV_SDSPI_Initialize Function@@@SYS_MODULE_OBJ DRV_SDSPI_Initialize ( const SYS_MODULE_INDEX drvIndex, const SYS_MODULE_INIT * const init ) Initializes the SD Card driver. This routine initializes the SD Card driver, making it ready...","GUID-304B5F79-B8A0-478C-9C98-3D405FD8C868.html@@@1.1.13.1.4.11 DRV_MX25L_PageWrite Function@@@bool DRV_MX25L_PageWrite ( const DRV_HANDLE handle, void *tx_data, uint32_t tx_data_length, uint32_t address ); Writes one page of data starting at the specified address. This function schedules a...","GUID-3051F828-5F5D-4349-B949-CF78BADC3D9B.html@@@1.1.7.4.9 DRV_SDSPI_AsyncWrite Function@@@void DRV_SDSPI_AsyncWrite ( const DRV_HANDLE handle, DRV_SDSPI_COMMAND_HANDLE* commandHandle, void * sourceBuffer, uint32_t blockStart, uint32_t nBlocks ) Writes blocks of data starting at the...","GUID-30C3EC2E-74C5-4262-9786-362DBA86AFEA.html@@@1.1.13.2.4.7 DRV_SST26_SectorErase Function@@@bool DRV_SST26_SectorErase ( const DRV_HANDLE handle, uint32_t address ); Erase the sector from the specified block start address. This function schedules a non-blocking sector erase operation of...","GUID-310793D7-0A33-4671-A43E-209D3061FADA.html@@@1.1.11.1.4.11 DRV_AT25_TRANSFER_STATUS Enum@@@typedef enum { /* Transfer is being processed */ DRV_AT25_TRANSFER_STATUS_BUSY, /* Transfer is successfully completed*/ DRV_AT25_TRANSFER_STATUS_COMPLETED, /* Transfer had error */...","GUID-330C0837-76DB-4EB8-BEC6-D8AF93FD8585.html@@@1.2.2.2 SYS_CACHE_DisableCaches Function@@@void SYS_CACHE_DisableCaches ( void ) Disables both Instruction and Data Caches. Turns off both Instruction and Data Caches. None. None. None. SYS_CACHE_DisableCaches(); None...","GUID-33272D9A-46EB-4956-877E-4AEEEACE9754.html@@@1.1.4.4.13 DRV_NAND_FLASH_SkipBlock_BlockTag Function@@@bool DRV_NAND_FLASH_SkipBlock_BlockTag ( const DRV_HANDLE handle, uint16_t blockNum, bool badBlock) Tag NAND Flash block to bad or good. This routine tags given block of NAND Flash device to bad or...","GUID-332FFD9B-7D05-463A-95C2-A6D12026790A.html@@@1.1.10.1.4.10 DRV_AT24_EventHandlerSet Function@@@void DRV_AT24_EventHandlerSet ( const DRV_HANDLE handle, const DRV_AT24_EVENT_HANDLER eventHandler, const uintptr_t context ) Allows a client to identify a transfer event handling function for the...","GUID-334EFC50-4493-4BB9-868E-C45946AC5666.html@@@1.1.6.4.8 DRV_SDMMC_CommandStatus Function@@@DRV_SDMMC_COMMAND_STATUS DRV_SDMMC_CommandStatus ( const DRV_HANDLE handle, const DRV_SDMMC_COMMAND_HANDLE commandHandle ); Gets the current status of the command. This routine gets the current status...","GUID-3355F72A-0C28-43AD-877C-3B76EA782BCE.html@@@1.2.7.4.73 SYS_FS_MEDIA_MANAGER_Tasks Function@@@void SYS_FS_MEDIA_MANAGER_Tasks ( void ); Media manager task function. This is the media manager task function. This task must be called repeatedly from the main loop. None None. None...","GUID-3365F9D0-51D1-4CD6-8ABE-36B90E11752E.html@@@1.2.7.4.2 SYS_FS_Tasks Function@@@void SYS_FS_Tasks ( void ); Maintains the File System tasks and functionalities. This function is used to run the various tasks and functionalities of sys_fs layer. The SYS_FS_Initialize routine must...","GUID-342F6C48-844D-418B-BD00-E9185853672D.html@@@1.3.2.3 Configuring The Library@@@I2C Bit Bang Library should be configured via MHC. The following figures show the MHC configuration window for I2C Bit Bang and brief description. I2C Bit Bang Configuration I2C Bit Bang Configuration...","GUID-3488A96B-8C3E-4967-9197-2376AB3B45E6.html@@@1.1.3.4.18 DRV_MEMORY_IsAttached Function@@@bool DRV_MEMORY_IsAttached ( const DRV_HANDLE handle ); Returns the physical attach status of the Media. This function returns the physical attach status of the Media device. The DRV_MEMORY_Open()...","GUID-349C448C-06FF-4386-B995-DB152263E91D.html@@@1.1.4.1 How the Library Works@@@The NAND flash driver library is a single-client, single-instance based driver interface. Abstraction Model The NAND Flash driver interface provides read, write and erase functions that abstract out...","GUID-35403BF1-6564-4D1F-BEFB-D176CB53F364.html@@@1.2.9.1 SYS_PORT_PinWrite Function@@@void SYS_PORT_PinWrite (SYS_PORT_PIN pin, bool value) Writes to the selected pin. This function writes/drives the &quot;value&quot; on the selected I/O line/pin. Port Initialization must have been done using...","GUID-354A36E3-7E0B-4DD0-8485-DDFD792B525C.html@@@1.1.10.1.4 Library Interface@@@AT24 driver library provides the following interfaces: Functions Name Description DRV_AT24_Initialize Initializes the AT24 EEPROM device DRV_AT24_Status Gets the current status of the AT24 driver...","GUID-356655BC-8897-4D93-B120-F758874C9AE8.html@@@1.2.2.11 SYS_CACHE_InvalidateDCache_by_Addr Function@@@void SYS_CACHE_InvalidateDCache_by_Addr (uint32_t *addr, int32_t size) Invalidate Data Cache by address. Invalidates Data Cache for the given address. None. Param Description addr address (aligned to...","GUID-35C5FE76-A326-410C-8189-A9F87D976CC8.html@@@1.1.8.4.9 DRV_SPI_ReadTransferAdd Function@@@void DRV_SPI_ReadTransferAdd ( const DRV_HANDLE handle, void * pReceiveData, size_t rxSize, DRV_SPI_TRANSFER_HANDLE * const transferHandle ); Queues a read operation. This function schedules a...","GUID-3607AD2F-9343-496E-A447-CEA81CDA32DD.html@@@1.1.9.4.13 DRV_USART_ReadQueuePurge Function@@@bool DRV_USART_ReadQueuePurge ( const DRV_HANDLE handle ) Removes all buffer requests from the queue for the given client and also aborts the on-going read request. This function removes all the...","GUID-366CB061-A2E0-4D4A-B02F-901280740EB5.html@@@1.3.2.4.2 I2C_BB_Read Function@@@bool I2C_BB_Read (uint16_t address, uint8_t *pdata, size_t length) Reads data from the slave. This function reads the data from a slave on the bus. The function will attempt to read length number of...","GUID-36B53A8B-33C3-482A-8746-A5027BEA411C.html@@@1.2.9.4 SYS_PORT_PinToggle Function@@@void SYS_PORT_PinToggle (SYS_PORT_PIN pin) Toggles the selected pin. This function toggles/inverts the value on the selected I/O line/pin. Port Initialization must have been done using appropriate...","GUID-36B5D226-2635-43AA-8DC9-5A3E5C0454D3.html@@@1.2.1.2 SYS_MEDIA_BLOCK_COMMAND_HANDLE_INVALID Macro@@@#define SYS_MEDIA_BLOCK_COMMAND_HANDLE_INVALID Defines the invalid media block command handle. This value defines invalid handle for the media block command. It is returned by read/write/erase...","GUID-377058D8-9B13-47BE-A92A-47523CB84B3B.html@@@1.1.3.4.29 DRV_MEMORY_TRANSFER_HANDLER Typedef@@@typedef SYS_MEDIA_EVENT_HANDLER DRV_MEMORY_TRANSFER_HANDLER; Pointer to a Memory Driver Event handler function This data type defines the required function signature for the Memory event handling...","GUID-3801A70C-6DBD-42D0-9B59-A612CCBDE59E.html@@@1.1.9.1 How the Library Works@@@The USART driver library is a multi-client, multi-instance buffer queue model based driver interface. Abstraction Model The following diagram illustrates the model used by the USART Driver. Note...","GUID-381FBF75-747C-4701-9D8E-CD3E21EE06B5.html@@@1.2.9.6 SYS_PORT_PinClear Function@@@void SYS_PORT_PinClear (SYS_PORT_PIN pin) Clears the selected pin. This function drives &apos;0&apos; on the selected I/O line/pin. None. Param Description pin One of the IO pins from the enum SYS_PORT_PIN...","GUID-3893EFC2-A6FE-4963-9744-99AF06FA28E9.html@@@1.3.1.4.4 EMU_EEPROM_ParametersGet Function@@@EMU_EEPROM_STATUS EMU_EEPROM_ParametersGet ( EMU_EEPROM_PARAMETERS * const parameters) Returns EEPROM Emulation configuration parameters Retrieves the configuration parameters of the EEPROM Emulator...","GUID-3966A3D3-92CB-4B70-A673-51EA0BF318F1.html@@@1.2.11.4.20 SYS_TIME_TimerCounterGet Function@@@SYS_TIME_RESULT SYS_TIME_TimerCounterGet ( SYS_TIME_HANDLE handle, uint32_t *count ); Gets the elapsed counter value of a software timer. This function gets the elapsed counter value of the software...","GUID-3ABD051F-AA97-4C40-942D-EFC6A16486B8.html@@@1.2.3.4.24 SYS_CMD_CONSOLE_IO_PARAM Enum@@@typedef enum { SYS_CMD_SINGLE_CHARACTER_READ_CONSOLE_IO_PARAM = 0 , } SYS_CMD_CONSOLE_IO_PARAM; Defines whether the command module is single character or full command read This enumeration defines...","GUID-3B71F472-0CB2-433D-BD5E-39C5E2F065F6.html@@@1.1.8.4.10 DRV_SPI_TransferEventHandlerSet Function@@@void DRV_SPI_TransferEventHandlerSet ( const DRV_HANDLE handle, const DRV_SPI_TRANSFER_EVENT_HANDLER eventHandler, const uintptr_t context ) Allows a client to set a transfer event handling function...","GUID-3B80B7B5-A8B5-436E-9135-38CDEA3A638B.html@@@1.1.12 SPI Flash Drivers@@@This section provides the SPI flash based driver libraries help...","GUID-3BAF137E-6031-4F79-9871-CAF48B3CAFCF.html@@@1.1.2.4.1 DRV_I2C_Initialize Function@@@SYS_MODULE_OBJ DRV_I2C_Initialize ( const SYS_MODULE_INDEX drvIndex, const SYS_MODULE_INIT * const init ) Initializes the I2C instance for the specified driver index. This routine initializes the I2C...","GUID-3C10B2F9-8190-47F4-864D-813923E49E2F.html@@@1.1.3.4.28 DRV_MEMORY_COMMAND_STATUS Enum@@@typedef enum { /* Done OK and ready */ DRV_MEMORY_COMMAND_COMPLETED = SYS_MEDIA_COMMAND_COMPLETED, /* Scheduled but not started */ DRV_MEMORY_COMMAND_QUEUED = SYS_MEDIA_COMMAND_QUEUED, /* Currently...","GUID-3C116E9A-BAEC-46DB-A89C-49945E963B96.html@@@1.1.13.3.4.1 DRV_W25_Initialize Function@@@SYS_MODULE_OBJ DRV_W25_Initialize ( const SYS_MODULE_INDEX drvIndex, const SYS_MODULE_INIT * const init ); Initializes the W25 Driver This routine initializes the W25 driver making it ready for client...","GUID-3C237595-59AC-42AF-8B3C-D0DA8D4B3B7C.html@@@1.2.1.21 SYS_MODULE_TASKS_ROUTINE Typedef@@@typedef void (* SYS_MODULE_TASKS_ROUTINE) ( SYS_MODULE_OBJ object ); Pointer to a routine that performs the tasks necessary to maintain a state machine in a module system module (driver, library, or...","GUID-3C6053B3-EFE9-4B28-844C-92FF7C41D48C.html@@@1.1.8.4.17 DRV_SPI_TRANSFER_EVENT Enum@@@typedef enum { /* Transfer request is pending */ DRV_SPI_TRANSFER_EVENT_PENDING , /* All data were transfered successfully. */ DRV_SPI_TRANSFER_EVENT_COMPLETE , /* Transfer Handle given is expired. It...","GUID-3CA2C276-2D1F-4D9F-9809-8714A2432982.html@@@1.2.1.10 SYS_MEDIA_GEOMETRY Struct@@@typedef struct { /* Properties of a Media. For a device, if multiple properties are applicable, they can be ORed */ SYS_MEDIA_PROPERTY mediaProperty; /* Number of Read Regions */ uint32_t...","GUID-3CBAD06F-CC26-46CB-AF78-AE7790F210D6.html@@@1.2.5.4 Library Interface@@@Debug System Service library provides the following interfaces: Functions Name Description SYS_DEBUG_Initialize Initializes the global error level and specific module instance SYS_DEBUG_Status Returns...","GUID-3D691B46-43E2-44A8-8FDF-855290108FAC.html@@@1.1.11.1.4.5 DRV_AT25_Read Function@@@bool DRV_AT25_Read ( const DRV_HANDLE handle, void *rxData, uint32_t rxDataLength, uint32_t address ) Reads &apos;n&apos; bytes of data from the specified start address of EEPROM. This function schedules a...","GUID-3D84F884-122D-4A4A-95DA-DFD8C2E84650.html@@@1.2.11.4 Library Interface@@@Time System Service library provides the following interfaces: Functions Name Description SYS_TIME_Initialize Initializes the System Time module SYS_TIME_Deinitialize Deinitializes the specific module...","GUID-3D91A8FB-8652-4510-B84B-28C44F4BE7B9.html@@@1.1.7.4.13 DRV_SDSPI_EventHandlerSet Function@@@void DRV_SDSPI_EventHandlerSet ( const DRV_HANDLE handle, const void * eventHandler, const uintptr_t context ) Allows a client to identify an event handling function for the driver to call back when...","GUID-3DC42773-D3EB-409B-8F4B-F1E4025E9E90.html@@@1.1.12.1.4.16 DRV_AT25DF_EVENT_HANDLER Typedef@@@typedef void (*DRV_AT25DF_EVENT_HANDLER )( DRV_AT25DF_TRANSFER_STATUS event, uintptr_t context ); Pointer to a AT25DF Driver Event handler function This data type defines the required function...","GUID-3DC66955-0F7E-4747-9790-893CA81987A6.html@@@1.1.9 USART Driver@@@The USART driver provides application ready routines to read and write data from/to the USART peripheral. Key Features of USART Driver: Supports multi-instance and multi-client mode Provides data...","GUID-3E372BF3-7317-4702-8110-7947FF78FE3D.html@@@1.2.8.6 SYS_INT_SourceDisable Function@@@bool SYS_INT_SourceDisable ( INT_SOURCE source ) Disables the specified interrupt source. This function returns the current interrupt enable/disable status and disables the specified interrupt...","GUID-3E6B809F-7256-4348-9596-7F338CC62EC5.html@@@1.2.3.4.9 SYS_CMDIO_GET_HANDLE Function@@@SYS_CMD_DEVICE_NODE* SYS_CMDIO_GET_HANDLE( short num) Gets the CMDIO Handle base via index. This function returns the handle for the CMDIO when supplied with an index. SYS_CMD_Initialize was...","GUID-3FA52A35-7013-4C4F-B9A2-F42CEB0E6AED.html@@@1.1.12.1.4.14 DRV_AT25DF_TRANSFER_STATUS Enum@@@typedef enum { /* Transfer is being processed */ DRV_AT25DF_TRANSFER_STATUS_BUSY, /* Transfer is successfully completed*/ DRV_AT25DF_TRANSFER_STATUS_COMPLETED, /* Transfer had error */...","GUID-3FAA6B0C-C235-4068-8AC9-082528572159.html@@@1.1.10.1.4.5 DRV_AT24_Read Function@@@bool DRV_AT24_Read ( const DRV_HANDLE handle, void *rxData, uint32_t rxDataLength, uint32_t address ) Reads &apos;n&apos; bytes of data from the specified start address of EEPROM. This function schedules a...","GUID-3FAC72DB-7A84-4EBF-82E8-F3756D795DB1.html@@@1.3.2.1 How the Library Works@@@The I2C Bit Bang library is a single-client, single-instance interface. Working Flow It uses a timer peripheral to generate the I2C waveforms at the configured I2C clock speed. The block of data is...","GUID-3FD036E5-3791-45BA-8881-2123D9BF8A6B.html@@@1.2.4.4.22 SYS_CONSOLE_HANDLE_INVALID Macro@@@#define SYS_CONSOLE_HANDLE_INVALID ((SYS_CONSOLE_HANDLE) - 1 ) Invalid console handle This is handle value is returned in case of an unsuccessful console operation. Do not rely on the actual value of...","GUID-3FF0F5C9-1505-4639-A838-A412BD8D6E00.html@@@1.3.2.2 Using The Library@@@The I2C bit bang library supports the following I2C transfers: Master Write: The master writes a block of data to the slave Master Read: The master reads a block of data from the slave Master...","GUID-40903D55-759F-49AF-BDF7-CD4E0693C394.html@@@1.2.7.4.19 SYS_FS_FileWrite Function@@@size_t SYS_FS_FileWrite ( SYS_FS_HANDLE handle, const void *buf, size_t nbyte ); Writes data to the file. This function attempts to write nbyte bytes from the buffer pointed to by buf to the file...","GUID-40D584E2-0A2B-45E9-B3D7-92BA4A138871.html@@@1.1.8.4.8 DRV_SPI_WriteTransferAdd Function@@@void DRV_SPI_WriteTransferAdd ( const DRV_HANDLE handle, void * pTransmitData, size_t txSize, DRV_SPI_TRANSFER_HANDLE * const transferHandle ); Queues a write operation. This function schedules a...","GUID-40F0EA45-9E7D-4BE2-8DBF-31942FA1BD7D.html@@@1.1.3.4.14 DRV_MEMORY_GeometryGet Function@@@SYS_MEDIA_GEOMETRY* DRV_MEMORY_GeometryGet ( const DRV_HANDLE handle ); Returns the geometry of the memory device. This API gives the following geometrical details of the attached memory device: Media...","GUID-40FC6C8F-A9BE-4F4C-8018-023DDA62F25C.html@@@1.1.4.4.2 DRV_NAND_FLASH_Open Function@@@DRV_HANDLE DRV_NAND_FLASH_Open ( const SYS_MODULE_INDEX drvIndex, const DRV_IO_INTENT ioIntent ) Opens the specified NAND FLASH driver instance and returns a handle to it This routine opens the...","GUID-410DBBCC-D224-45B2-B881-7BFB0DFF0EFC.html@@@1.1.13.1.4 Library Interface@@@MX25L driver library provides the following interfaces: Functions Name Description DRV_MX25L_Initialize Initializes the MX25L Driver DRV_MX25L_Open Opens the specified MX25L driver instance and...","GUID-413DE7BF-9304-4F7F-BBA8-CCC29E41A668.html@@@1.1.11.1.4.12 DRV_AT25_GEOMETRY Struct@@@typedef struct { uint32_t readBlockSize; uint32_t readNumBlocks; uint32_t readNumRegions; uint32_t writeBlockSize; uint32_t writeNumBlocks; uint32_t writeNumRegions; uint32_t eraseBlockSize; uint32_t...","GUID-4196C380-7832-482B-95AB-EE6132ADBA1A.html@@@1.1.2.4.14 DRV_I2C_ForcedWriteTransfer Function@@@bool DRV_I2C_ForcedWriteTransfer ( const DRV_HANDLE handle, uint16_t address, void * const buffer, const size_t size ) This is a blocking function that performs a I2C write operation. I2C Master calls...","GUID-41B61931-E124-4512-A689-5B0643F249E8.html@@@1.1.13 SQI Flash Drivers@@@This section provides the SQI flash based driver libraries help...","GUID-422BF1E5-FCA5-4BDA-86FF-1D69B0F9EE60.html@@@1.1.3.4.12 DRV_MEMORY_AsyncRead Function@@@void DRV_MEMORY_AsyncRead ( const DRV_HANDLE handle, DRV_MEMORY_COMMAND_HANDLE *commandHandle, void *targetBuffer, uint32_t blockStart, uint32_t nBlock ); Reads data for the specified number of memory...","GUID-42556FDF-A632-49FE-8A5E-9303A926578C.html@@@1.2.7.4 Library Interface@@@File System Service library provides the following interfaces: SYS FS Functions These API&apos;s should be used from application layer to perform any file operation Name Description SYS_FS_Initialize...","GUID-42849F24-7399-4889-A3D2-18673DDDD78D.html@@@1.1.13.1.4.3 DRV_MX25L_Close Function@@@void DRV_MX25L_Close ( const DRV_HANDLE handle ); Closes an opened-instance of the MX25L driver This routine closes an opened-instance of the MX25L driver, invalidating the handle. DRV_MX25L_Open must...","GUID-42A3F8E6-56E0-4EE3-944A-CDC3E542F72B.html@@@1.1.5.1 SST39 PROM Driver@@@This driver provides the blocking functions to read, write and erase SST39VF040 PROM memory. The driver uses the peripheral library below to interface with the SST39VF040 memory. HEMC Peripheral...","GUID-42AEC39F-A1C0-453E-A45A-43725FDC6205.html@@@1.3.2.4.9 I2C_BB_CallbackRegister Function@@@void I2C_BB_CallbackRegister (I2CBB_CALLBACK callback, uintptr_t contextHandle) Sets the pointer to the function (and it&apos;s context) to be called when the given I2C&apos;s transfer events occur. This...","GUID-42C01AE8-60C8-4A86-91A7-56D9222CBFC7.html@@@1.2.7.4.23 SYS_FS_FilePrintf Function@@@SYS_FS_RESULT SYS_FS_FilePrintf ( SYS_FS_HANDLE handle, const char *string, ... ); Writes a formatted string into a file. This function writes a formatted string into a file. The file into which a...","GUID-4307AF8B-71ED-471F-B1D1-804772B8F545.html@@@1.3.1.4.7 EMU_EEPROM_PageRead Function@@@EMU_EEPROM_STATUS EMU_EEPROM_PageRead ( const uint8_t logical_page, uint8_t * const dat ); Reads a page of data from an emulated EEPROM memory page Reads an emulated EEPROM page of data from the...","GUID-430ED88C-3DBA-4821-ABD7-E4C30EAB006C.html@@@1.4.2.2 Mutex Operations@@@A mutex or mutual exclusion is used to protect a shared resource from access by multiple threads at the same time. A shared resource may be a common data structure in RAM or it may be a hardware...","GUID-4321CAFA-57B5-4633-9D43-0AE24B87C101.html@@@1.1.2 I2C Driver@@@The I2C driver provides application ready routines to read and write data using the I2C protocol, thus minimizing developer\uFFFDs awareness of the working of the I2C protocol. Key Features of I2C Driver...","GUID-436E9B1F-FE7C-4BBB-99D3-161DBFE1CF93.html@@@1.1.11.1.4.13 DRV_AT25_EVENT_HANDLER Typedef@@@typedef void (*DRV_AT25_EVENT_HANDLER )( DRV_AT25_TRANSFER_STATUS event, uintptr_t context ); Pointer to a AT25 Driver Event handler function This data type defines the required function signature for...","GUID-43DF0480-B8AC-4060-B932-0BF78B41CE23.html@@@1.2.3.4.21 SYS_CMD_READC_FNC Typedef@@@typedef size_t (*SYS_CMD_READC_FNC)( const void * cmdIoParam); Identifies a read single character function API. Read Single Character function API This handle identifies the interface structure of...","GUID-4483443F-5DCE-47F2-A7A8-EEA1BA48B089.html@@@1.2.11.4.1 SYS_TIME_Initialize Function@@@SYS_MODULE_OBJ SYS_TIME_Initialize ( const SYS_MODULE_INDEX index, const SYS_MODULE_INIT * const init ); Initializes the System Time module. This function initializes the instance of the System Time...","GUID-4522BF0A-636F-448D-B87F-2342F8CBEB00.html@@@1.2.2 Cache System Service@@@The Cache system service uses either CMSIS Cache interfaces or the device specific Cache Peripheral interfaces based on the device selection to perform the Data and Instruction Cache operations. It...","GUID-45D2280C-63E4-48FA-ABAD-450459998A8F.html@@@1.2.3.4.5 SYS_CMD_READY_TO_WRITE Function@@@bool SYS_CMD_READY_TO_WRITE ( void ) Allows upper layer application to confirm that the command module is ready to write output to the Console System Service. This function allows upper layer...","GUID-4605973A-5C41-42CE-9E62-DD8AFA902969.html@@@1.1.9.2 Using The Library@@@The USART driver builds on top of the USART or UART peripheral library (PLIB) and provides write, read APIs in blocking and non-blocking modes. In asynchronous (non-blocking) mode, application can...","GUID-46FD911A-9659-4B46-86E4-67B7CABE6FC5.html@@@1.1.10.1.4.8 DRV_AT24_TransferStatusGet Function@@@DRV_AT24_TRANSFER_STATUS DRV_AT24_TransferStatusGet ( const DRV_HANDLE handle) Gets the current status of the transfer request. This routine gets the current status of the transfer request...","GUID-47211219-744B-487E-975A-C6D963B11DE7.html@@@1.1.3.4.19 DRV_MEMORY_IsWriteProtected Function@@@bool DRV_MEMORY_IsWriteProtected ( const DRV_HANDLE handle ); Returns the write protect status of the Memory. This function returns the write protect status of the Memory. The DRV_MEMORY_Open()...","GUID-474B546B-7629-40E2-AF5A-F6A6146CE8DE.html@@@1.1.12.1 AT25DF Driver@@@This driver provides a non-blocking interface to read, write and erase AT25DF Flash memory. The library uses the SPI peripheral library (PLIB) to interface with the AT25DF Key Features: Supports...","GUID-48077C08-77AF-471F-8D5A-2A8446076075.html@@@1.2.2.3 SYS_CACHE_EnableICache Function@@@void SYS_CACHE_EnableICache ( void ) Enable Instruction Cache. Turns on Instruction Cache. None. None. None. SYS_CACHE_EnableICache(); None...","GUID-4923B60C-900F-4BB5-91B7-CE4CA6ED4059.html@@@1.2.4.4 Library Interface@@@Console System Service library provides the following interfaces: Functions Name Description SYS_CONSOLE_Initialize Initializes the console instance module and opens or initializes the specific module...","GUID-49A215E2-6C03-4638-8DDF-D5E08D353B8C.html@@@1.2.7.4.37 SYS_FS_CurrentDriveGet Function@@@SYS_FS_RESULT SYS_FS_CurrentDriveGet ( char * buffer ); Gets the current drive This function gets the present drive being used. The drive information is populated in the buffer. The disk has to be...","GUID-49B9B4AE-75C1-466E-A2AA-592725DCA8A8.html@@@1.2.7.4.79 SYS_FS_MEDIA_PROPERTY Enum@@@typedef enum { /* Media supports Byte Write */ SYS_FS_MEDIA_SUPPORTS_BYTE_WRITES = SYS_MEDIA_SUPPORTS_BYTE_WRITES, /* Media supports only Read operation */ SYS_FS_MEDIA_SUPPORTS_READ_ONLY =...","GUID-4A2E496A-C280-44A4-AEA9-F4BE35F47721.html@@@1.4.4.20 OSAL_SEM_DECLARE Macro@@@#define OSAL_SEM_DECLARE (semID) OSAL_SEM_HANDLE_TYPE semID Declares an OSAL semaphore. This function declares a data item of type OSAL_SEM_HANDLE_TYPE. None...","GUID-4B36A81C-1035-4808-8990-AE3FC1A9E066.html@@@1.1.2.4.6 DRV_I2C_ErrorGet Function@@@DRV_I2C_ERROR DRV_I2C_ErrorGet ( const DRV_I2C_TRANSFER_HANDLE transferHandle ) Gets the I2C hardware errors associated with the the transfer request. This function returns the errors associated with...","GUID-4CD57E60-CFCA-4413-A344-0BB9E1A05660.html@@@1.2.7.4.4 SYS_FS_Unmount Function@@@SYS_FS_RESULT SYS_FS_Unmount ( const char *mountName ); Unmounts the disk/volume for the file system. This function removes (unmounts) the attachment of the volume from the file system. The volume...","GUID-4D048D67-43E2-4313-A87A-0C887B2C569A.html@@@1.2.6.4 SYS_DMA_ChannelDisable Function@@@void SYS_DMA_ChannelDisable (SYS_DMA_CHANNEL channel) Disables the specified channel. This function disables the specified channel and resets it. Ongoing transfer will be aborted. DMA Controller...","GUID-4D20130A-177C-4FBC-844D-B327AA396FBB.html@@@1.1.4.4.10 DRV_NAND_FLASH_GeometryGet Function@@@bool DRV_NAND_FLASH_GeometryGet ( const DRV_HANDLE handle, DRV_NAND_FLASH_GEOMETRY *geometry ); Returns the geometry of the NAND Flash device. This API gives the following geometrical details of the...","GUID-4D75630E-7B1C-4A75-B6CF-BAA0923F0460.html@@@1.1.9.4.9 DRV_USART_ReadBufferAdd Function@@@void DRV_USART_ReadBufferAdd ( const DRV_HANDLE handle, void * buffer, const size_t size, DRV_USART_BUFFER_HANDLE* bufferHandle ) Queues a read operation. This function schedules a non-blocking read...","GUID-4DF8B0C7-1447-4A6E-BF63-7A01ECCE498E.html@@@1.1.8.4.12 DRV_SPI_WriteTransfer Function@@@void DRV_SPI_WriteTransfer ( const DRV_HANDLE handle, void * pTransmitData, size_t txSize ); This is a blocking function that transmits data over SPI. This function does a blocking write operation...","GUID-4EA4F1C3-1007-4B14-8C52-82D2AEE2C02C.html@@@1.1.6.4.6 DRV_SDMMC_AsyncRead Function@@@void DRV_SDMMC_AsyncRead ( const DRV_HANDLE handle, DRV_SDMMC_COMMAND_HANDLE* commandHandle, void * targetBuffer, uint32_t blockStart, uint32_t nBlock ); Reads blocks of data from the specified block...","GUID-4EA548CC-CB9A-4A43-84C2-8B6959E1D2C2.html@@@1.2.4.4.6 SYS_CONSOLE_Read Function@@@ssize_t SYS_CONSOLE_Read ( const SYS_CONSOLE_HANDLE handle, void * buf, size_t count ) Reads data from the console device. This function reads the data from the console device. If the data is not read...","GUID-4EBEC168-246F-401E-8D76-A04EACD7EFB9.html@@@1.3.1.4.5 EMU_EEPROM_PageBufferCommit Function@@@EMU_EEPROM_STATUS EMU_EEPROM_PageBufferCommit ( void ) Commits any cached data to physical non-volatile memory Commits the internal SRAM caches to physical non-volatile memory, to ensure that any...","GUID-4F45A6E9-23AF-473C-9001-8C1E9EBF58DB.html@@@1.1.13.2.4.3 DRV_SST26_Close Function@@@void DRV_SST26_Close ( const DRV_HANDLE handle ); Closes an opened-instance of the SST26 driver This routine closes an opened-instance of the SST26 driver, invalidating the handle. DRV_SST26_Open must...","GUID-4F58DE9B-B3EE-4108-9290-15F90CC32FB0.html@@@1.2.3.4.25 SYS_CMD_INIT Struct@@@typedef struct { /* System module initialization */ SYS_MODULE_INIT moduleInit; uint8_t consoleCmdIOParam; /* Console index to receive debug messages */ SYS_MODULE_INDEX consoleIndex; } SYS_CMD_INIT...","GUID-4F625306-2206-49B1-8846-60C97E40A440.html@@@1.2.5 Debug System Service@@@The Debug System Service provides a set of functions that allow the developer to output debug and/or error messages based on a global error level. The messages are sent to the System Console Service...","GUID-4F6AE2E4-12C3-4F44-A97C-7AC7BA7AB25E.html@@@1.1.5.1.4.1 DRV_SST39_Initialize Function@@@SYS_MODULE_OBJ DRV_SST39_Initialize ( const SYS_MODULE_INDEX drvIndex, const SYS_MODULE_INIT * const init ) Initializes the SST39 Driver This routine initializes the SST39 driver making it ready for...","GUID-4FA4B38A-8C7F-46A3-9D08-4B8C5CE26712.html@@@1.1 Driver Libraries@@@MPLAB Harmony device drivers (usually referred to as &quot;drivers&quot;) provide simple, highly abstracted C-language interfaces to peripherals and other resources. A driver&apos;s interface allows applications and...","GUID-4FCE84EC-65CF-4089-9171-A21D03DD1096.html@@@1.1.13.3.4.6 DRV_W25_ReadJedecId Function@@@bool DRV_W25_ReadJedecId ( const DRV_HANDLE handle, void *jedec_id ); Reads JEDEC-ID of the flash device. This function schedules a blocking operation for reading the JEDEC-ID. This information can be...","GUID-5055B627-5871-44D5-8828-540B31A4449B.html@@@1.1.13.2.2 Using The Library@@@The SST26 driver provides non-blocking API&apos;s to read, write and erase SST26 Flash memory. The SST26 driver can be used in following ways: To perform page write to SST26 Flash. Here, the memory start...","GUID-509B01EA-57F1-449C-A03F-EE3761F22F4E.html@@@1.1.3.4.22 DRV_MEMORY_EraseWrite Function@@@void DRV_MEMORY_EraseWrite ( const DRV_HANDLE handle, SYS_MEDIA_BLOCK_COMMAND_HANDLE* commandHandle, void * sourceBuffer, uint32_t blockStart, uint32_t nBlock ) Interface to the file system to perform...","GUID-509CACEA-CB11-45C5-89F1-A1744632EECA.html@@@1.2.7.4.64 SYS_FS_MEDIA_MANAGER_Read Function@@@SYS_FS_MEDIA_BLOCK_COMMAND_HANDLE SYS_FS_MEDIA_MANAGER_Read ( uint16_t diskNo, uint8_t* destination, uint8_t * source, const unsigned int nBytes ); Gets data from a specific media address. This...","GUID-50C9DFD3-F88C-465B-B427-B5F2FDDE3683.html@@@1.1.4.4.7 DRV_NAND_FLASH_IdRead Function@@@bool DRV_NAND_FLASH_IdRead ( const DRV_HANDLE handle, uint32_t *readId, uint8_t address) Gets identifier codes from NAND Flash. This routine read identifier codes from NAND Flash. The...","GUID-50DB3018-16B7-42E8-AC34-7EA47E1DBDD1.html@@@1.3.2.4.5 I2C_BB_WriteRead Function@@@bool I2C_BB_WriteRead (uint16_t address, uint8_t* wdata, size_t wlength, uint8_t* rdata, size_t rlength) Write and Read data from Slave. This function writes data from the wdata to the bus and then...","GUID-511CB2EB-3A00-4A56-8D63-49E5181E6890.html@@@1.2.8.12 INT_SOURCE Typedef@@@typedef IRQn_Type INT_SOURCE; Defines the data type for all the interrupt sources associated with the interrupt controller of the device. This data type can be used with interface functions to enable...","GUID-51492B75-94E3-4BCE-960D-013CB51A2E19.html@@@1.2.3.4.19 SYS_CMD_DATA_RDY_FNC Typedef@@@typedef int (*SYS_CMD_DATA_RDY_FNC)( const void * cmdIoParam); Identifies a data available function API. Ready Status Check function API. This handle identifies the interface structure of the data...","GUID-51740620-007C-449D-A985-84207C03F2DF.html@@@1.2.7.2 Using The Library@@@The File System Service (SYS_FS) provides an application programming interface (API) through which a utility or user program requests services of a file system. Refer to the Library Interface section...","GUID-517AC4B5-5AC6-4197-81B3-837E7F98A6BB.html@@@1.2.1.20 SYS_MODULE_STATUS_ROUTINE Typedef@@@typedef SYS_STATUS (* SYS_MODULE_STATUS_ROUTINE) ( SYS_MODULE_OBJ object ); Pointer to a routine that gets the current status of a system module (driver, library, or system-maintained application)...","GUID-51F8BB44-5FBD-4178-A815-F38AC412C76F.html@@@1.2.1.9 SYS_MEDIA_REGION_GEOMETRY Struct@@@typedef struct { /* Size of a each block in Bytes */ uint32_t blockSize; /* Number of Blocks of identical size within the Region */ uint32_t numBlocks; } SYS_MEDIA_REGION_GEOMETRY; Contains...","GUID-51FAD95A-A178-457E-829A-4F5E0EF5B8D7.html@@@1.2.11.4.16 SYS_TIME_MSToCount Function@@@uint32_t SYS_TIME_MSToCount ( uint32_t ms ) Convert the given time interval in milliseconds to an equivalent counter value. This function converts a given time interval (measured in milliseconds) to...","GUID-520F6190-7A36-4541-B826-AD1097DD8628.html@@@1.2.6.10 SYS_DMA_DESTINATION_ADDRESSING_MODE Enum@@@typedef enum { /* Destination address is always fixed */ SYS_DMA_DESTINATION_ADDRESSING_MODE_FIXED, /* Destination address is incremented after every transfer */...","GUID-5230216C-08DD-4C01-BDF6-F914852BF1C7.html@@@1.1.8.4.18 DRV_SPI_TRANSFER_EVENT_HANDLER Typedef@@@typedef void (*DRV_SPI_TRANSFER_EVENT_HANDLER )( DRV_SPI_TRANSFER_EVENT event, DRV_SPI_TRANSFER_HANDLE transferHandle, uintptr_t context ); Pointer to a SPI Driver Transfer Event handler function This...","GUID-524A96DC-3A65-435E-97E1-C8D40A5C927B.html@@@1.1.3.3 Configuring The Library@@@Memory Driver Library should be configured via MHC. The following figures show the MHC configuration window for Memory Driver and brief description. Common User Configuration for all Instances Driver...","GUID-5260AC5A-5DD0-4B08-9F03-7BB8E150DBE9.html@@@1.1.2.3 Configuring The Library@@@I2C Driver Library should be configured via MHC. The following figures show the MHC configuration window for I2C driver and brief description. Common User Configuration for all Instances Driver Mode...","GUID-52A7B0F6-92F2-44FB-B4CF-363FB76CFCA7.html@@@1.2.7.4.59 SYS_FS_EVENT_HANDLER Typedef@@@typedef void (* SYS_FS_EVENT_HANDLER) ( SYS_FS_EVENT event, void * eventData, uintptr_t context ); Pointer to the File system Handler function. This data type defines the required function signature...","GUID-5450365C-5439-468F-BC38-F1DFB6A9CD19.html@@@1.1.8.4.3 DRV_SPI_Open Function@@@DRV_HANDLE DRV_SPI_Open ( const SYS_MODULE_INDEX index, const DRV_IO_INTENT ioIntent ) Opens the specified SPI driver instance and returns a handle to it. This routine opens the specified SPI driver...","GUID-5587D300-1C17-4DCA-B342-9B2E74824EFB.html@@@1.1.3.4.21 DRV_MEMORY_Erase Function@@@void DRV_MEMORY_Erase ( const DRV_HANDLE handle, SYS_MEDIA_BLOCK_COMMAND_HANDLE* commandHandle, void * sourceBuffer, uint32_t blockStart, uint32_t nBlock ) Interface to the file system to perform a...","GUID-55F16D8C-B670-4D4F-A2C3-41AEC77231E6.html@@@1.2.11.4.11 SYS_TIME_Counter64Get Function@@@uint64_t SYS_TIME_Counter64Get ( void ) Get the common 64-bit system counter value. Returns the current &quot;live&quot; value of the common 64-bit system counter. The SYS_TIME_Initialize function should have...","GUID-560E0AF3-D3EA-43B8-92D8-A7E3CBB2FDDA.html@@@1.2.7.4.85 SYS_FS_MEDIA_GEOMETRY Typedef@@@typedef SYS_MEDIA_GEOMETRY SYS_FS_MEDIA_GEOMETRY; Contains all the geometrical information of a media device. This structure contains all the geometrical information of a media device. the structure...","GUID-56EFD842-90D6-4F89-A21C-7085F873C4D7.html@@@1.1.7.4.17 DRV_SDSPI_COMMAND_HANDLE Typedef@@@typedef SYS_MEDIA_BLOCK_COMMAND_HANDLE DRV_SDSPI_COMMAND_HANDLE; Handle identifying commands queued in the driver. A command handle is returned by a call to the Read or Write functions. This handle...","GUID-579BC909-4BCE-4587-A825-4F7B97A4C022.html@@@1.4.4.9 OSAL_MUTEX_Create Function@@@OSAL_RESULT OSAL_MUTEX_Create (OSAL_MUTEX_HANDLE_TYPE* mutexID) Creates a mutex. This function creates a mutex, allocating storage if required and placing the mutex handle into the passed parameter...","GUID-58E3FBF2-C74A-4F4E-8541-139C6F019AB1.html@@@1.2.6.11 SYS_DMA_WIDTH Enum@@@typedef enum { /* DMA data width 8 bit */ SYS_DMA_WIDTH_ 8 _BIT, /* DMA data width 16 bit */ SYS_DMA_WIDTH_ 16 _BIT, /* DMA data width 32 bit */ SYS_DMA_WIDTH_ 32 _BIT, /* USed when DMA Width is not...","GUID-593ADB30-88DF-480D-A357-40AFF127A20F.html@@@1.1.4.2 Using The Library@@@The NAND Flash driver provides the blocking API&apos;s to read, write and erase NAND Flash memory. The NAND Flash driver can be used in following ways: To perform page and block write to NAND Flash. To...","GUID-599D11ED-E619-435F-9863-AD6D603CAD5B.html@@@1.1.4.4.15 DRV_NAND_FLASH_SkipBlock_BlockRead Function@@@bool DRV_NAND_FLASH_SkipBlock_BlockRead ( const DRV_HANDLE handle, uint16_t blockNum, uint8_t *data, bool disableBlockCheck) Reads the data of a whole block from NAND Flash. This function schedules a...","GUID-59CA5EF3-6E11-4C8E-8433-7B6ABF9C5258.html@@@1.1.5.1.4.6 DRV_SST39_SectorErase Function@@@bool DRV_SST39_SectorErase ( const DRV_HANDLE handle, uint32_t address ) Erase the sector from the specified block start address. This function schedules a blocking sector erase operation of flash...","GUID-5A5146D2-73C2-43B1-8ADE-95E0184AF1A5.html@@@1.1.2.4 Library Interface@@@I2C driver library provides the following interfaces: Functions Name Description Asynchronous Mode Synchronous Mode DRV_I2C_Initialize Initializes the I2C instance for the specified driver index Yes...","GUID-5A8FD263-9070-43FB-9578-AE6D97182339.html@@@1.4.2.3 Critical Section Operations@@@This section describes how critical sections are used. Critical sections are used to form sequences of code that must operate in an atomic manner. The interface allows for the possibility of two types...","GUID-5A9D0D4F-5BBF-4CA3-89A9-1E47BDD90F01.html@@@1.1.12.1.4.12 DRV_AT25DF_GeometryGet Function@@@bool DRV_AT25DF_GeometryGet ( const DRV_HANDLE handle, DRV_AT25DF_GEOMETRY *geometry) Returns the geometry of the device. This API gives the following geometrical details of the DRV_AT25DF Flash...","GUID-5AB08537-241F-4458-9E50-2B43C8B16BB9.html@@@1.2.11.4.4 SYS_TIME_CallbackRegisterUS Function@@@SYS_TIME_HANDLE SYS_TIME_CallbackRegisterUS ( SYS_TIME_CALLBACK callback, uintptr_t context, uint32_t us, SYS_TIME_CALLBACK_TYPE type ); Registers a function with the time system service to be called...","GUID-5AE89E9A-282F-42F6-845E-A513176335DA.html@@@1.1.5 Parallel PROM Drivers@@@This section provides the parallel prom based driver libraries help...","GUID-5AF7D1CF-A561-4B79-96A1-2E37C455D70C.html@@@1.1.7.4.21 DRV_SDSPI_EVENT_HANDLER Typedef@@@typedef SYS_MEDIA_EVENT_HANDLER DRV_SDSPI_EVENT_HANDLER; Pointer to a SDSPI Driver Event handler function This data type defines the required function signature for the SDSPI event handling callback...","GUID-5B30F7C8-8E1C-47DD-834E-5DCEB9726A84.html@@@1.3.1.4.8 EMU_EEPROM_BufferWrite Function@@@EMU_EEPROM_STATUS EMU_EEPROM_BufferWrite ( const uint16_t offset, const uint8_t * const data, const uint16_t length ); Writes a buffer of data to the emulated EEPROM memory space Writes a buffer of...","GUID-5B486700-48D3-4B8B-AEEC-F8CE0222E988.html@@@1.4.4.14 OSAL_Free Function@@@void OSAL_Free ( void * pData) Deallocates a block of memory and return to the default pool. This function deallocates memory and returns it to the default pool. In an RTOS-based application, the...","GUID-5BFF0AFD-E1B5-43FE-AB0F-1786AE731A44.html@@@1.1.8.1 How the Library Works@@@The SPI driver library is a multi-client, multi-instance buffer queue model based driver interface. Abstraction Model The SPI driver provides interface to use multiple SPI Peripherals (via SPI PLIB...","GUID-5C0AEA33-6394-4333-83D2-32BB5910D53C.html@@@1.4.4.5 OSAL_SEM_PostISR Function@@@OSAL_RESULT OSAL_SEM_PostISR (OSAL_SEM_HANDLE_TYPE* semID) Posts a semaphore or increments a counting semaphore from within an Interrupt Service Routine (ISR). This function posts a binary semaphore...","GUID-5CAC0494-62DF-4529-9231-843B4D6065F9.html@@@1.2.4.4.9 SYS_CONSOLE_ReadFreeBufferCountGet Function@@@ssize_t SYS_CONSOLE_ReadFreeBufferCountGet ( const SYS_CONSOLE_HANDLE handle) Returns the amount of free space in bytes available in the receive buffer. This function indicates the number of free...","GUID-5D54B76D-93EA-4179-8B1C-0CB174452F8D.html@@@1.1.2.4.7 DRV_I2C_WriteTransferAdd Function@@@void DRV_I2C_WriteTransferAdd ( const DRV_HANDLE handle, const uint16_t address, void * const buffer, const size_t size, DRV_I2C_TRANSFER_HANDLE * const transferHandle ) Queues a write operation. This...","GUID-5DC16D9D-8D76-476D-8F4E-D5C261E8CEE0.html@@@1.2.11.4.10 SYS_TIME_CounterGet Function@@@uint32_t SYS_TIME_CounterGet ( void ) Get the common 32-bit system counter value. Returns the current &quot;live&quot; value of the common 32-bit system counter. The SYS_TIME_Initialize function should have...","GUID-5E1BD4E4-2CE2-43D1-B83A-CA20B9F7F3DD.html@@@1.1.3.4.31 MEMORY_DEVICE_GEOMETRY Struct@@@typedef struct { uint32_t read_blockSize; uint32_t read_numBlocks; uint32_t numReadRegions; uint32_t write_blockSize; uint32_t write_numBlocks; uint32_t numWriteRegions; uint32_t erase_blockSize...","GUID-5EFE7E35-46E2-4C26-9C50-DE5060B4EAE9.html@@@1.2.4.4.7 SYS_CONSOLE_Write Function@@@ssize_t SYS_CONSOLE_Write ( const SYS_CONSOLE_HANDLE handle, const void * buf, size_t count ) Writes data to the console device. This function writes data to the console device. The function performs...","GUID-5F20B2E6-93C6-4994-BACC-0D05E6EE447C.html@@@1.2.2.5 SYS_CACHE_InvalidateICache Function@@@void SYS_CACHE_InvalidateICache ( void ) Invalidate Instruction Cache. Invalidates Instruction Cache. None. None. None. SYS_CACHE_InvalidateICache(); None...","GUID-5FE0390A-B22A-411C-8F18-4D3CE8BCBDF9.html@@@1.1.13.2.4.5 DRV_SST26_UnlockFlash Function@@@bool DRV_SST26_UnlockFlash ( const DRV_HANDLE handle ); Unlocks the flash device for Erase and Program operations. This function schedules a blocking operation for unlocking the flash blocks globally...","GUID-60293D0A-331A-49A7-ACDF-2982AD6CE6B0.html@@@1.1.12.1.4.15 DRV_AT25DF_GEOMETRY Struct@@@typedef struct { uint32_t readBlockSize; uint32_t readNumBlocks; uint32_t readNumRegions; uint32_t writeBlockSize; uint32_t writeNumBlocks; uint32_t writeNumRegions; uint32_t eraseBlockSize; uint32_t...","GUID-60A80FBD-F98D-41E9-B327-6D11B3F893D7.html@@@1.1.4.4.14 DRV_NAND_FLASH_SkipBlock_BlockErase Function@@@bool DRV_NAND_FLASH_SkipBlock_BlockErase ( const DRV_HANDLE handle, uint16_t blockNum, bool disableBlockCheck) Erase a block. This function schedules a blocking block erase operation of flash memory...","GUID-60D60732-08A7-4E99-97BB-FEF4A339F8F6.html@@@1.5.1 FreeRTOS@@@FreeRTOS is a small footprint, portable, preemptive, open source, real time kernel that has been designed specifically for use on micro-controllers that makes small, low-power edge devices easy to...","GUID-60EB59D7-F592-4497-B5C0-7939FE2B4C38.html@@@1.4.4.3 OSAL_SEM_Pend Function@@@OSAL_RESULT OSAL_SEM_Pend (OSAL_SEM_HANDLE_TYPE* semID, uint16_t waitMS) Waits on a semaphore. Returns true if the semaphore was obtained within the time limit. This function is a blocking function...","GUID-61A204D5-4020-4A31-BC5F-833D079A2436.html@@@1.2.3.3 Configuring The Library@@@Command System Service Library should be configured via MHC. The following figures show the MHC configuration window for Command System Service and brief description. The Command Processor is...","GUID-61E30825-2446-4436-A7F5-806E1A1CEB7B.html@@@1.4.4.1 OSAL_SEM_Create Function@@@OSAL_RESULT OSAL_SEM_Create (OSAL_SEM_HANDLE_TYPE* semID, OSAL_SEM_TYPE type, uint8_t maxCount, uint8_t initialCount) Creates an OSAL Semaphore. This function creates an OSAL binary or counting...","GUID-63132734-659F-4A9E-86D2-FEE409B990CA.html@@@1.1.13.3.4.3 DRV_W25_Close Function@@@void DRV_W25_Close ( const DRV_HANDLE handle ); Closes an opened-instance of the W25 driver This routine closes an opened-instance of the W25 driver, invalidating the handle. DRV_W25_Open must have...","GUID-63D12AA9-FCFA-4183-9E63-F01D58DDF1B9.html@@@1.2.7.4.31 SYS_FS_DirectoryChange Function@@@SYS_FS_RESULT SYS_FS_DirectoryChange ( const char * path ); Changes to a the directory specified. This function changes the present directory to a new directory. The disk has to be mounted and the...","GUID-64C748F5-8A8A-4F85-ACA1-91BACBD20A53.html@@@1.2.11.4.19 SYS_TIME_TimerDestroy Function@@@SYS_TIME_RESULT SYS_TIME_TimerDestroy ( SYS_TIME_HANDLE handle) Destroys/deallocates a software timer instance. This function deletes and deallocates a software timer instance, stopping its counter...","GUID-64D5F998-D72C-42CD-902F-D3FED8339A94.html@@@1.3.2 I2C Bit Bang@@@The I2C bit bang library is a software library that implements the I2C master mode serial communication standard. The I2C bit bang library uses a timer peripheral to generate the I2C waveforms at the...","GUID-65ACFCA1-A979-4EE6-B224-6CC63491ACED.html@@@1.1.3.4.32 DRV_MEMORY_DEVICE_INTERFACE Struct@@@/* Function pointer typedef to open the attached media */ typedef DRV_HANDLE (*DRV_MEMORY_DEVICE_OPEN)( const SYS_MODULE_INDEX drvIndex, const DRV_IO_INTENT ioIntent ); /* Function pointer typedef to...","GUID-65CDE798-3D26-42EF-A56C-C6759587D8CA.html@@@1.1.8.4.2 DRV_SPI_Status Function@@@SYS_STATUS DRV_SPI_Status ( SYS_MODULE_OBJ object ) Gets the current status of the SPI driver module. This routine provides the current status of the SPI driver module. Function DRV_SPI_Initialize...","GUID-6655C843-3384-4DCB-8625-657E0EAD198B.html@@@1.1.3.4.10 DRV_MEMORY_AsyncWrite Function@@@void DRV_MEMORY_AsyncWrite ( const DRV_HANDLE handle, DRV_MEMORY_COMMAND_HANDLE *commandHandle, void *sourceBuffer, uint32_t blockStart, uint32_t nBlock ); Writes data for the specified number of...","GUID-6666B157-1614-4C2E-8B25-F23A183D36E0.html@@@1.1.11.1.4.6 DRV_AT25_Write Function@@@bool DRV_AT25_Write ( const DRV_HANDLE handle, void *txData, uint32_t txDataLength, uint32_t address) Writes &apos;n&apos; bytes of data starting at the specified address. This function schedules a non-blocking...","GUID-6667FC20-3017-4F29-82D8-D2873B38AC8E.html@@@1.1.13.1.4.5 DRV_MX25L_ResetFlash Function@@@bool DRV_MX25L_ResetFlash ( void ); Reset the flash device to standby mode. This function schedules a blocking operation for resetting the flash device to standby mode. All the volatile bits and...","GUID-666E1113-A289-4A55-870F-52AE30888F5C.html@@@1.1.13.3.4.5 DRV_W25_UnlockFlash Function@@@bool DRV_W25_UnlockFlash ( const DRV_HANDLE handle ); Unlocks the flash device for Erase and Program operations. This function schedules a blocking operation for unlocking the flash blocks globally...","GUID-66DF679B-4CBC-4AFF-ADC0-81A3C04112CB.html@@@1.1.5.1.3 Configuring The Library@@@The SST39 driver library should be configured through MCC. The following figures show the MHC configuration window for the SST39 driver and brief description. SST39 Driver with HEMC peripheral...","GUID-670AE57E-73F2-4D46-A66C-8A60E8B4D5DC.html@@@1.1.4.3 Configuring The Library@@@The NAND Flash driver library should be configured through the MHC. The following figures show the MHC configuration window for the NAND Flash driver and brief description. NAND Flash Driver with SMC...","GUID-67EEB8E1-663A-40CA-8654-AEA0B7F228F3.html@@@1.2.8.10 SYS_INT_SourceStatusSet Function@@@void SYS_INT_SourceStatusSet ( INT_SOURCE source ) Sets the pending status of the specified interrupt source manually. This function manually sets the pending status of the specified interrupt source...","GUID-68AF6796-DF3C-4742-81B5-555C359975D1.html@@@1.2.7.4.18 SYS_FS_FileStringPut Function@@@SYS_FS_RESULT SYS_FS_FileStringPut ( SYS_FS_HANDLE handle, const char *string ); Writes a string to a file. This function writes a string into a file. The string to be written should be NULL...","GUID-68C15981-33D0-4B83-9016-A7F1A10940AB.html@@@1.1.11.1.4.4 DRV_AT25_Close Function@@@void DRV_AT25_Close ( const DRV_Handle handle ) Closes the opened-instance of the AT25 driver. This routine closes opened-instance of the AT25 driver, invalidating the handle. A new handle must be...","GUID-6942E929-C41E-47A6-BDC6-72B98D966379.html@@@1.2.7.4.46 SYS_FS_FILE_SYSTEM_TYPE Enum@@@typedef enum { /* Unsupported File System */ UNSUPPORTED_FS = 0 , /* FAT FS native File system */ FAT, /* MPFS2 native File system */ MPFS2, /* LittleFS native File system */ LITTLEFS }...","GUID-6979BCB1-F38B-455E-AFBB-FD2A09A823B4.html@@@1.2.3.4.10 SYS_CMDIO_ADD Function@@@SYS_CMD_DEVICE_NODE* SYS_CMDIO_ADD( const SYS_CMD_API* opApi, const void * cmdIoParam, int unused) Adds CMDIO parameters to the Command Processor System Service console. This function adds CMDIO...","GUID-6A1C053B-AC44-4CB2-9C84-AC5A697F538E.html@@@1.1.4.4.20 DRV_NAND_FLASH_GEOMETRY Struct@@@typedef struct { /* Identifier for the device */ uint8_t deviceId; /* Data Bus Width (8/16) */ uint8_t dataBusWidth; /* Size of the device in bytes */ uint32_t deviceSize; /* Size of the data area of...","GUID-6A52623F-1A03-4973-AC97-E9F5FE7572A1.html@@@1.1.5.1.4.9 DRV_SST39_PageWrite Function@@@bool DRV_SST39_PageWrite ( const DRV_HANDLE handle, void *tx_data, uint32_t address ) Writes one page of data starting at the specified address. This function schedules a blocking write operation for...","GUID-6B0132A8-8996-4B69-A2E7-28EA0712B624.html@@@1.1.8.4.13 DRV_SPI_ReadTransfer Function@@@void DRV_SPI_ReadTransfer ( const DRV_HANDLE handle, void * pReceiveData, size_t rxSize ); This is a blocking function that receives data over SPI. This function does a blocking read operation. The...","GUID-6C64A9ED-7259-4105-A1EC-2B2402B5642B.html@@@1.2.4.4.17 SYS_CONSOLE_MESSAGE Macro@@@#define SYS_CONSOLE_MESSAGE (message) SYS_CONSOLE_Message(SYS_CONSOLE_DEFAULT_INSTANCE, message) Prints message on the default console instance This macro calls SYS_Console_Message() to print message...","GUID-6CBA8AA0-7EF7-44B1-8D12-CD6A3067E53A.html@@@1.3.2.4 Library Interface@@@I2C Bit Bang library provides the following interfaces: Functions Name Description I2C_BB_Initialize Initializes the instance of the I2C bit bang library I2C_BB_Read Reads data from the slave...","GUID-6CDF8842-E92B-4F0E-8E5D-95DAFE16410D.html@@@1.1.13.1.4.4 DRV_MX25L_Status Function@@@SYS_STATUS DRV_MX25L_Status ( const SYS_MODULE_INDEX drvIndex ); Gets the current status of the MX25L driver module. This routine provides the current status of the MX25L driver module. Function...","GUID-6CE613A7-B427-4DC2-A744-EF8C8D72D1C8.html@@@1.1.6.4.10 DRV_SDMMC_EventHandlerSet Function@@@void DRV_SDMMC_EventHandlerSet ( const DRV_HANDLE handle, const void * eventHandler, const uintptr_t context ); Allows a client to identify an event handling function for the driver to call back when...","GUID-6D392610-20DC-4F38-9798-E5FF2BAA3E0A.html@@@1.2.7.4.40 SYS_FS_DriveLabelSet Function@@@SYS_FS_RESULT SYS_FS_DriveLabelSet ( const char * drive, const char *label ); Sets the drive label This function sets the label for the drive specified. If no drive is specified, the label for the...","GUID-6D8C930C-02AE-4657-B161-09CD0578C2E5.html@@@1.2.7.4.68 SYS_FS_MEDIA_MANAGER_MediaStatusGet Function@@@bool SYS_FS_MEDIA_MANAGER_MediaStatusGet ( const char *devName ); Gets the media status. This function gets the media status. This function is used by higher layers (sys_fs layer) to know the status...","GUID-6D9FA3F1-00EF-4C4D-AC06-CF95F5137ACB.html@@@1.1.12.1.4 Library Interface@@@AT25DF driver library provides the following interfaces: Functions Name Description DRV_AT25DF_Initialize Initializes the AT25DF FLASH device DRV_AT25DF_Status Gets the current status of the AT25DF...","GUID-6E52E4F9-B77E-4177-9469-6233035E7C76.html@@@1.1.13.3.4.12 DRV_W25_TransferStatusGet Function@@@DRV_W25_TRANSFER_STATUS DRV_W25_TransferStatusGet ( const DRV_HANDLE handle ); Gets the current status of the transfer request. This routine gets the current status of the transfer request. The...","GUID-6E6BFBF9-12EB-436D-9D2F-4611B260D7EF.html@@@1.1.3.4.16 DRV_MEMORY_CommandStatusGet Function@@@DRV_MEMORY_COMMAND_STATUS DRV_MEMORY_CommandStatusGet ( const DRV_HANDLE handle, const DRV_MEMORY_COMMAND_HANDLE commandHandle ); Gets the current status of the command. This routine gets the current...","GUID-70BE98A1-DDB1-4404-A652-92F1D18E08FB.html@@@1.2.8.5 SYS_INT_SourceEnable Function@@@void SYS_INT_SourceEnable ( INT_SOURCE source ) Enables the specified interrupt source. This function enables the specified interrupt source/line at the interrupt controller level. None. Param...","GUID-70F2B75F-672C-4723-84A5-9C5065059760.html@@@1.2.7.4.84 SYS_FS_MEDIA_REGION_GEOMETRY Typedef@@@typedef SYS_MEDIA_REGION_GEOMETRY SYS_FS_MEDIA_REGION_GEOMETRY; Contains information of a sys media region. This structure contains the information of a sys media region. A media can have multiple...","GUID-7146CF6C-8560-4757-A481-2BFE6F65F08C.html@@@1.1.12.1.4.10 DRV_AT25DF_ChipErase Function@@@bool DRV_AT25DF_ChipErase ( const DRV_HANDLE handle); Erase entire flash memory. This function schedules a non-blocking chip erase operation of flash memory. The requesting client should call...","GUID-716CB5D5-1AD3-4AFA-8985-E48322D8E932.html@@@1.2.4.4.21 SYS_CONSOLE_HANDLE Typedef@@@typedef uintptr_t SYS_CONSOLE_HANDLE; Handle to an instance of the console system service. This data type is a handle to a specific instance of the console system service Code outside of a specific...","GUID-7171ACD5-F746-4998-B5AA-7796CFD19E14.html@@@1.2.8.11 SYS_INT_SourceStatusClear Function@@@void SYS_INT_SourceStatusClear ( INT_SOURCE source ) Clears the pending status of the specified interrupt source. This function clears the pending status of the specified interrupt source at the...","GUID-72155962-6FFE-4598-AE78-3C138ECA6E6C.html@@@1.2.7.4.80 SYS_FS_MEDIA_STATUS Enum@@@typedef enum { /* Media is detached */ SYS_FS_MEDIA_DETACHED = SYS_MEDIA_DETACHED, /* Media is attached */ SYS_FS_MEDIA_ATTACHED = SYS_MEDIA_ATTACHED } SYS_FS_MEDIA_STATUS; The status of media. This...","GUID-7249D18B-E049-45D9-96DD-B6329375E344.html@@@1.3 Software Libraries@@@MPLAB Harmony software libraries provide simple, highly abstracted C-language software interfaces. These software library interfaces can be used directly by the application or by other Harmony modules...","GUID-725B8066-3554-40FF-8707-CCF041AE750D.html@@@1.1.10.1.4.4 DRV_AT24_Close Function@@@void DRV_AT24_Close ( const DRV_HANDLE handle ) Closes the opened-instance of the AT24 driver. This routine closes opened-instance of the AT24 driver, invalidating the handle. A new handle must be...","GUID-728877D4-5B54-4990-9C94-A4A80BBBEBD6.html@@@1.2.11.4.13 SYS_TIME_CountToUS Function@@@uint32_t SYS_TIME_CountToUS ( uint32_t count ) Converts a counter value to time interval in microseconds. This function converts a counter value to time interval in microseconds, based on the hardware...","GUID-733684FD-532D-46C1-A6DD-C7BA03ACA9F1.html@@@1.2.8.9 SYS_INT_SourceStatusGet Function@@@bool SYS_INT_SourceStatusGet ( INT_SOURCE source ) Gets the pending status of the specified interrupt source. This function returns the pending status of the specified interrupt source at the...","GUID-73B432A5-32F5-40C6-8725-B37D613DFB1B.html@@@1.1.1.5 DRV_IO_ISBLOCKING Macro@@@#define DRV_IO_ISBLOCKING (intent) (intent & DRV_IO_INTENT_BLOCKING) Returns if the I/O intent provided is blocking This macro returns if the I/O intent provided is blocking. None...","GUID-73CFC4AE-26EC-41F4-9A2A-A541704C1312.html@@@1.1.7.4.12 DRV_SDSPI_GeometryGet Function@@@SYS_MEDIA_GEOMETRY* DRV_SDSPI_GeometryGet ( const DRV_HANDLE handle ) Returns the geometry of the device. This API gives the following geometrical details of the SD Card. Media Property Number of...","GUID-740C7410-8069-4335-BB33-218D8F8B59F5.html@@@1.2.3.4.15 SYS_CMD_HANDLE Typedef@@@typedef const void * SYS_CMD_HANDLE; Identifies a particular Command I/O instance. Command I/O Handle. This event handle identifies a registered instance of a Command IO object. Every time the...","GUID-74B6D228-7F2F-494B-9E28-60CD4E961697.html@@@1.2.2.8 SYS_CACHE_InvalidateDCache Function@@@void SYS_CACHE_InvalidateDCache ( void ) Invalidate Data Cache. Invalidates Data Cache. None. None. None. SYS_CACHE_InvalidateDCache(); None...","GUID-759D324C-11DA-4BCF-85B3-657B6545A478.html@@@1.1.13.3.3 Configuring The Library@@@The W25 driver library should be configured through the MCC. The following figures show the MCC configuration window for the W25 driver and brief description. W25 Driver with QMSPI peripheral in SQI...","GUID-75A1499B-E938-4BC5-AD7A-496D28448F40.html@@@1.1.5.1.4.2 DRV_SST39_Open Function@@@DRV_HANDLE DRV_SST39_Open ( const SYS_MODULE_INDEX drvIndex, const DRV_IO_INTENT ioIntent ) Opens the specified SST39 driver instance and returns a handle to it. This routine opens the specified SST39...","GUID-75EA4FAD-10D6-4276-A80E-4F19FC9E6F9D.html@@@1.1.13.1.4.8 DRV_MX25L_BlockErase Function@@@bool DRV_MX25L_BlockErase ( const DRV_HANDLE handle, uint32_t address ); Erase a block from the specified block start address. This function schedules a non-blocking block erase operation of flash...","GUID-760611CB-BB7F-4083-A98D-102D8A28E346.html@@@1.2.7.4.5 SYS_FS_EventHandlerSet Function@@@void SYS_FS_EventHandlerSet ( const void * eventHandler, const uintptr_t context ); Sets the pointer to the function (and it&apos;s context) to be called when mount/unmount event has occurred This function...","GUID-76235F7D-E608-44C6-AFA4-73A09FF0EA9C.html@@@1.1.3.4.13 DRV_MEMORY_SyncRead Function@@@bool DRV_MEMORY_SyncRead ( const DRV_HANDLE handle, void *targetBuffer, uint32_t blockStart, uint32_t nBlock ); Reads data for the specified number of memory blocks in Synchronous mode. This function...","GUID-76AC2CF8-EF78-49D0-8123-4FBCCD8EFE2E.html@@@1.2.5.4.1 SYS_DEBUG_Initialize Function@@@SYS_MODULE_OBJ SYS_DEBUG_Initialize ( const SYS_MODULE_INDEX index, const SYS_MODULE_INIT* const init ) Initializes the global error level and specific module instance. This function initializes the...","GUID-7733BE76-6885-410D-8F50-8E771FEC8BF2.html@@@1.1.9.4.2 DRV_USART_Status Function@@@SYS_STATUS DRV_USART_Status ( SYS_MODULE_OBJ object ) Gets the current status of the USART driver module. This routine provides the current status of the USART driver module. Function...","GUID-773AD55E-F0E3-4ACF-9EF1-E5BDADF3F717.html@@@1.1.10.1.4.6 DRV_AT24_Write Function@@@bool DRV_AT24_Write ( const DRV_HANDLE handle, void *txData, uint32_t txDataLength, uint32_t address) Writes &apos;n&apos; bytes of data starting at the specified address. This function schedules a non-blocking...","GUID-77D7DF1E-E1CB-47CD-B5C1-6DFC3700CF3D.html@@@1.1.13.1.4.9 DRV_MX25L_ChipErase Function@@@bool DRV_MX25L_ChipErase ( const DRV_HANDLE handle ); Erase entire flash memory. This function schedules a non-blocking chip erase operation of flash memory. The requesting client should call...","GUID-780154C9-7B3A-4937-A4B9-EE697C66BA7D.html@@@1.1.9.4.20 DRV_USART_BUFFER_EVENT_HANDLER Typedef@@@typedef void (*DRV_USART_BUFFER_EVENT_HANDLER )( DRV_USART_BUFFER_EVENT event, DRV_USART_BUFFER_HANDLE bufferHandle, uintptr_t context ); Pointer to a USART Driver Buffer Event handler function This...","GUID-783A145F-F4AF-4AA7-B066-80BD9E439E00.html@@@1.2.7.4.39 SYS_FS_DriveLabelGet Function@@@SYS_FS_RESULT SYS_FS_DriveLabelGet ( const char * drive, char *buff, uint32_t *sn ); Gets the drive label. This function gets the label for the drive specified. If no drive is specified, the label for...","GUID-788A2F8C-2432-42F2-9E49-35E431487E63.html@@@1.2.7.4.45 SYS_FS_HANDLE_INVALID Macro@@@#define SYS_FS_HANDLE_INVALID ((SYS_FS_HANDLE)(- 1 )) Invalid file handle This value defines the invalid file handle. Invalid file handle is returned on an unsuccessful File Open operation. None...","GUID-78A40801-3070-4F90-8BBC-C21C8AD1B362.html@@@1.1.3.4.2 DRV_MEMORY_Status Function@@@SYS_STATUS DRV_MEMORY_Status ( SYS_MODULE_OBJ object ); Gets the current status of the Memory driver module. This routine provides the current status of the Memory driver module. Function...","GUID-78A85F1D-D719-4E26-A023-EDB229B985C1.html@@@1.3.2.4.7 I2C_BB_IsBusy Function@@@bool I2C_BB_IsBusy ( void ) Returns the state of the library This function returns if the library is busy performing a read/write operation. This API can be used to poll for the state of library if no...","GUID-78C407C0-91E3-468C-9D3A-F01AF5A9CCB9.html@@@1.1.11.1 AT25 Driver@@@This driver provides a non-blocking interface to read and write to the external AT25 EEPROM. The library uses the SPI peripheral library (PLIB) to interface with the AT25 Key Features: Supports a...","GUID-78DA8A5A-9D66-4746-9FB9-E5625A0C5F14.html@@@1.5.4 Mbed OS RTOS@@@Arm Mbed OS is an open source embedded operating system designed specifically for the &quot;things&quot; in the Internet of Things. It includes all the features you need to develop a connected product based on...","GUID-78FE973E-69BA-4A7F-ACE0-669D8F7B9241.html@@@1.1.13.2.4.4 DRV_SST26_Status Function@@@SYS_STATUS DRV_SST26_Status ( const SYS_MODULE_INDEX drvIndex ); Gets the current status of the SST26 driver module. This routine provides the current status of the SST26 driver module. Function...","GUID-79165D33-BC36-4AA0-AF89-E59BA4F86A95.html@@@1.4.4.13 OSAL_Malloc Function@@@void * OSAL_Malloc(size_t size) Allocates memory using the OSAL default allocator. This function allocates a block of memory from the default allocator from the underlying RTOS. If no RTOS is present...","GUID-79C0F4A4-9F81-4865-B6A6-2642F39E919F.html@@@1.2.7.4.13 SYS_FS_FileEOF Function@@@bool SYS_FS_FileEOF ( SYS_FS_HANDLE handle ); Checks for end of file. Checks whether or not the file position indicator is at the end of the file. A valid file handle must be obtained before knowing a...","GUID-7A1B4F41-7CC6-49CF-941E-25265059D247.html@@@1.1.7.4 Library Interface@@@SDSPI driver library provides the following interfaces: Functions Name Description DRV_SDSPI_Initialize Initializes the SD Card driver DRV_SDSPI_Status Provides the current status of the SDSPI driver...","GUID-7A650304-68A4-4AF2-A839-E0C386199636.html@@@1.1.7.4.14 DRV_SDSPI_CommandStatusGet Function@@@DRV_SDSPI_COMMAND_STATUS DRV_SDSPI_CommandStatusGet ( const DRV_HANDLE handle, const DRV_SDSPI_COMMAND_HANDLE commandHandle ) Gets the current status of the command. For synchronous mode, the command...","GUID-7A97D0B1-ED36-47E8-B474-A223196C311E.html@@@1.1.4.4.21 DRV_NAND_FLASH_DATA Struct@@@typedef struct { /* NAND Flash Geometry */ DRV_NAND_FLASH_GEOMETRY nandFlashGeometry; /* NAND Flash data address */ uint32_t dataAddress; /* NAND Flash spare/ecc buffer */ CACHE_ALIGN uint8_t...","GUID-7B27717C-849D-4E48-B9A2-96EE42486C40.html@@@1.1.2.4.13 DRV_I2C_WriteTransfer Function@@@bool DRV_I2C_WriteTransfer ( const DRV_HANDLE handle, uint16_t address, void * const buffer, const size_t size ) This is a blocking function that performs a I2C write operation. This function does a...","GUID-7B2C9BC7-A554-4DC3-9A9F-834D5B86C96E.html@@@1.1.13.3.4.2 DRV_W25_Open Function@@@DRV_HANDLE DRV_W25_Open ( const SYS_MODULE_INDEX drvIndex, const DRV_IO_INTENT ioIntent ); Opens the specified W25 driver instance and returns a handle to it This routine opens the specified W25...","GUID-7BF4B98B-08BD-4EF8-804E-E98FBBB58962.html@@@1.1.7.4.4 DRV_SDSPI_Close Function@@@void DRV_SDSPI_Close ( const DRV_HANDLE handle ) Closes an opened-instance of the SD Card driver. This routine closes an opened-instance of the SD Card driver, invalidating the handle. The...","GUID-7C69A2E0-DCC4-4C21-A0B8-E9D7B1C9FB68.html@@@1.1.2.4.5 DRV_I2C_TransferSetup Function@@@bool DRV_I2C_TransferSetup ( DRV_HANDLE handle, DRV_I2C_TRANSFER_SETUP* setup ) Sets the dynamic transfer setup of the driver. This function should be used to update any of the DRV_I2C_TRANSFER_SETUP...","GUID-7D1381D7-9A05-495B-B0A8-D195FA444618.html@@@1.3.1 Emulated EEPROM@@@The use of FLASH memory technology over EEPROM presents several difficulties over true EEPROM memory; data must be written as a number of physical memory pages (of several bytes each) rather than...","GUID-7D1994BE-DCEF-4D7F-8009-20EAEBC66D92.html@@@1.2.1.14 SYS_MODULE_OBJ_STATIC Macro@@@#define SYS_MODULE_OBJ_STATIC ((SYS_MODULE_OBJ) 0 ) Object handle value returned by static modules. This is the object handle value returned by static system modules. Do not rely on the actual value...","GUID-7D215256-2053-48D0-AB96-FD429F5D67ED.html@@@1.4.1 How The Library Works@@@Abstraction Model The common interface can easily be ported to many host Real-Time Operating Systems (RTOS) by third parties and the set of functions provides a basic level of RTOS compatibility...","GUID-7E038757-E53C-4A63-82DC-DF79418D9FDB.html@@@1.2.7.4.71 SYS_FS_MEDIA_MANAGER_GetMediaGeometry Function@@@SYS_FS_MEDIA_GEOMETRY* SYS_FS_MEDIA_MANAGER_GetMediaGeometry ( uint16_t diskNum ); Gets the media geometry information. This function gets the media geometry information. None. Param Description...","GUID-7E8361E8-8372-4766-89EA-12D19F9DE0CD.html@@@1.2.7.4.56 SYS_FS_REGISTRATION_TABLE Struct@@@typedef struct { /* Native file system of type SYS_FS_FILE_SYSTEM_TYPE */ SYS_FS_FILE_SYSTEM_TYPE nativeFileSystemType; /* Pointer to the structure of type SYS_FS_FUNCTIONS which has the list of *...","GUID-7F7AA1C9-FF6A-4C0F-A381-68CD1DE5049E.html@@@1.1.13.1.4.12 DRV_MX25L_TransferStatusGet Function@@@DRV_MX25L_TRANSFER_STATUS DRV_MX25L_TransferStatusGet ( const DRV_HANDLE handle ); Gets the current status of the transfer request. This routine gets the current status of the transfer request. The...","GUID-800334F1-1A78-4C3E-BB99-649A323AB083.html@@@1.1.12.1.4.3 DRV_AT25DF_Open Function@@@DRV_HANDLE DRV_AT25DF_Open ( const SYS_MODULE_INDEX drvIndex, const DRV_IO_INTENT ioIntent ) Opens the specified AT25DF driver instance and returns a handle to it. This routine opens the specified...","GUID-8095D76B-9C45-4295-94E8-D01CCCACAC91.html@@@1.1.3.4.26 DRV_MEMORY_COMMAND_HANDLE_INVALID Macro@@@#define DRV_MEMORY_COMMAND_HANDLE_INVALID SYS_MEDIA_BLOCK_COMMAND_HANDLE_INVALID This value defines the Memory Driver&apos;s Invalid Command Handle. This value defines the Memory Driver&apos;s Invalid Command...","GUID-80FC4C27-64D2-411F-BE4A-4C4A8BD80604.html@@@1.1.9.4 Library Interface@@@USART driver library provides the following interfaces: Functions Name Description Asynchronous Mode Synchronous Mode DRV_USART_Initialize Initializes the USART instance for the specified driver index...","GUID-81197D3F-1C5D-42BE-9E46-4D06F2B80213.html@@@1.2.1.1 SYS_MEDIA_BLOCK_COMMAND_HANDLE Typedef@@@typedef uintptr_t SYS_MEDIA_BLOCK_COMMAND_HANDLE; Handle identifying block commands of the media. A block command handle is returned by a call to the Read, Write, or Erase functions. This handle...","GUID-8137CC20-0230-4197-A5B0-C6400C2617BC.html@@@1.1.3.4.5 DRV_MEMORY_Close Function@@@void DRV_MEMORY_Close ( const DRV_HANDLE handle ); Closes an opened-instance of the Memory driver This routine closes an opened-instance of the Memory driver, invalidating the handle. After calling...","GUID-8179778A-592C-4660-87E7-4AFDC27FA7B7.html@@@1.2.7.4.47 SYS_FS_FILE_DIR_ATTR Enum@@@typedef enum { /* Normal File. Should not be combined with other attributes */ SYS_FS_ATTR_FILE = 0x00 , /* Read only */ SYS_FS_ATTR_RDO = 0x01 , /* Hidden */ SYS_FS_ATTR_HID = 0x02 , /* System */...","GUID-81B8750A-FEF9-44BB-9CB0-27329B377E77.html@@@1.1.12.1.4.9 DRV_AT25DF_BlockErase Function@@@bool DRV_AT25DF_BlockErase ( const DRV_HANDLE handle, uint32_t address); Erase a block from the specified block start address. This function schedules a non-blocking block erase operation of flash...","GUID-81E6C307-8460-46B5-A1C4-3CAB36053798.html@@@1.2.6.1 SYS_DMA_ChannelCallbackRegister Function@@@void SYS_DMA_ChannelCallbackRegister ( SYS_DMA_CHANNEL channel, const SYS_DMA_CHANNEL_CALLBACK eventHandler, const uintptr_t contextHandle ) This function allows a DMA client to set an event handler...","GUID-824D74D6-8B88-479A-8E92-981DECBE8204.html@@@1.1.7.1 How the Library Works@@@The SDSPI driver library is a multi-client, multi-instance buffer queue model based block driver interface. Abstraction Model The SDSPI driver provides abstraction to communicate with SD card through...","GUID-827592EF-BDE9-4229-9A95-E2F6E8E55AF2.html@@@1.2.3.4.28 SYS_CMD_DESCRIPTOR Struct@@@typedef struct { const char * cmdStr; // string identifying the command SYS_CMD_FNC cmdFnc; // function to execute for this command const char * cmdDescr; // simple command description }...","GUID-842A2C65-5193-4611-8719-CA8F918135D6.html@@@1.1.13.3.4.14 DRV_W25_TRANSFER_STATUS Enum@@@typedef enum { /* Transfer is being processed */ DRV_W25_TRANSFER_BUSY, /* Transfer is successfully completed*/ DRV_W25_TRANSFER_COMPLETED, /* Transfer had error*/ DRV_W25_TRANSFER_ERROR_UNKNOWN, }...","GUID-845C87B6-AE82-45D3-9BB1-5DF91145603C.html@@@1.2.4.4.2 SYS_CONSOLE_Tasks Function@@@void SYS_CONSOLE_Tasks ( SYS_MODULE_OBJ object ) Maintains the console&apos;s state machine. This function runs the console system service&apos;s internal state machine. The SYS_CONSOLE_Initialize function must...","GUID-84AD8BE3-4D9F-4F36-AB5F-160B9B90F177.html@@@1.1.10 I2C EEPROM Drivers@@@This section provides the I2C EEPROM based driver libraries help...","GUID-84BB608D-F6D3-4470-B973-E6994D51F15D.html@@@1.1.10.1.4.12 DRV_AT24_GEOMETRY Struct@@@typedef struct { uint32_t readBlockSize; uint32_t readNumBlocks; uint32_t readNumRegions; uint32_t writeBlockSize; uint32_t writeNumBlocks; uint32_t writeNumRegions; uint32_t eraseBlockSize; uint32_t...","GUID-854CFE11-D8CD-4630-ABB5-6EF7342AE6F0.html@@@1.2.11.4.5 SYS_TIME_CallbackRegisterMS Function@@@SYS_TIME_HANDLE SYS_TIME_CallbackRegisterMS ( SYS_TIME_CALLBACK callback, uintptr_t context, uint32_t ms, SYS_TIME_CALLBACK_TYPE type ); Registers a function with the time system service to be called...","GUID-85503CF7-E808-426B-B680-8CC5F981CAD1.html@@@1.3.2.4.12 I2CBB_CALLBACK Typedef@@@typedef void (* I2CBB_CALLBACK)( uintptr_t context ); I2C bit bang library callback function pointer. This data type defines the I2C callback function pointer. void MyI2CCallback (uintptr_t context) {...","GUID-85741DCE-B74D-4437-83CA-57B624B5FF0C.html@@@1.1.10.1.4.7 DRV_AT24_PageWrite Function@@@bool DRV_AT24_PageWrite ( const DRV_HANDLE handle, void *txData, uint32_t address) Writes one page of data starting at the specified address. This function schedules a non-blocking write operation for...","GUID-85B8324A-FF53-4CBB-B687-C6BCE047FEDC.html@@@1.2.3.4.27 SYS_CMD_FNC Typedef@@@typedef void (*SYS_CMD_FNC)(SYS_CMD_DEVICE_NODE* pCmdIO, int argc, char **argv); SYS CMD Command Function Identifies the command process function API. Command Process Function API. This handle...","GUID-85FC64CE-DADA-4F11-BBAC-9EF299544C00.html@@@1.2.7.4.28 SYS_FS_DirRewind Function@@@SYS_FS_RESULT SYS_FS_DirRewind ( SYS_FS_HANDLE handle ); Rewinds to the beginning of the directory. This function rewinds the directory to the start. Once a search of directory or directory read is...","GUID-866A6CB9-874F-4392-B16F-1DEC65C72720.html@@@1.1.6.4.5 DRV_SDMMC_Close Function@@@void DRV_SDMMC_Close ( DRV_HANDLE handle ); Closes an opened-instance of the SD Card driver. This routine closes an opened-instance of the SD Card driver, invalidating the handle. The...","GUID-880E2678-2F2C-49D7-A20E-9D0F43DA8F94.html@@@1.2.7.4.88 SYS_FS_MEDIA_FUNCTIONS Struct@@@typedef struct { /* To obtains status of media */ bool (*mediaStatusGet)(DRV_HANDLE handle); /* Function to get media geometry */ SYS_FS_MEDIA_GEOMETRY * (*mediaGeometryGet)( const DRV_HANDLE handle)...","GUID-889F54F6-7A1A-45D7-95FF-3E7AFAE137BA.html@@@1.1.9.4.16 DRV_USART_ReadBuffer Function@@@bool DRV_USART_ReadBuffer ( const DRV_HANDLE handle, void * buffer, const size_t size ); This is a blocking function that reads data over USART. This function does a blocking read operation. The...","GUID-8916AA7D-64C7-4477-8D26-664F6B3C242A.html@@@1.1.2.2 Using The Library@@@The I2C driver builds on top of the I2C peripheral library (PLIB) and provides write, read and write-read API&apos;s in blocking and non-blocking mode for I2C master functionality. Provides Write, Read and...","GUID-89291D9B-92F4-4472-BAE0-9F007571CD35.html@@@1.2.9 Ports System Service@@@Ports System service abstract different general purpose input output (GPIO) modules present on Microchip family of devices. it provides a common interface to use GPIO across all the 32 bit Microchip...","GUID-89A8332D-B4D0-4989-8602-EACDE3EE74AC.html@@@1.1.7 SDSPI Driver@@@The SDSPI driver is a multi-client multi-instance buffer model based block driver interface which can be used to communicate with SD cards. Key Features of Memory Driver: Supports asynchronous...","GUID-8A597E0D-6D93-4722-84B7-6DBC83406F78.html@@@1.2.7.4.9 SYS_FS_FileStat Function@@@SYS_FS_RESULT SYS_FS_FileStat ( const char *fname, SYS_FS_FSTAT *buf ) Gets file status. This function obtains information about a file associated with the file name, and populates the information in...","GUID-8A5BD4DE-CB7C-4469-8159-D2A013406C01.html@@@1.1.3.2 Using The Library@@@The Memory driver can be used to communicate with various media devices using common interface functions. The library interface functions can be used in two different modes. Modes supported...","GUID-8ABC2A31-6978-4216-AA28-6A2D7AA6A672.html@@@1.4.4.15 OSAL_Initialize Function@@@OSAL_RESULT OSAL_Initialize ( void ) Performs OSAL initialization. This function performs OSAL initialization .This function should be called near the start of main in an application that will use an...","GUID-8ABDCCF3-A786-4FB6-A424-52803779706D.html@@@1.2.11.4.26 SYS_TIME_HANDLE Typedef@@@typedef uintptr_t SYS_TIME_HANDLE; Handle to a software timer instance. This data type is a handle to a software timer instance. It can be used to access and control a software timer. Do not rely on...","GUID-8AC15DAA-ECDD-4386-9F24-C84E3D544C53.html@@@1.2.7.4.87 SYS_FS_VOLUME_PROPERTY Struct@@@typedef struct _SYS_FS_VOLUME_PROPERTY { /* Volume # */ unsigned int volNumber; /* File system type */ SYS_FS_FILE_SYSTEM_TYPE fsType; } SYS_FS_VOLUME_PROPERTY; Structure to obtain the property of...","GUID-8AEFE0B0-CE35-4F99-ACF4-7C8E10D3BBB6.html@@@1.4 OSAL Library@@@The Operating System Abstraction Layer (OSAL) provides a consistent interface to allow MPLAB Harmony-compliant libraries to take advantage of Operating System constructs when running in an OS...","GUID-8B53AE96-69BA-4526-93C2-5630091ADA4E.html@@@1.1.13.3.4.7 DRV_W25_SectorErase Function@@@bool DRV_W25_SectorErase ( const DRV_HANDLE handle, uint32_t address ); Erase the sector from the specified block start address. This function schedules a non-blocking sector erase operation of flash...","GUID-8B644CA2-82B6-4CFE-8F73-6079A6CC5256.html@@@1.1.13.2.4.6 DRV_SST26_ReadJedecId Function@@@bool DRV_SST26_ReadJedecId ( const DRV_HANDLE handle, void *jedec_id ); Reads JEDEC-ID of the flash device. This function schedules a blocking operation for reading the JEDEC-ID. This information can...","GUID-8BCDA47F-4CBC-4405-9F30-4A44B7DE67F3.html@@@1.2.3.4.20 SYS_CMD_GETC_FNC Typedef@@@typedef char (*SYS_CMD_GETC_FNC)( const void * cmdIoParam); Identifies a get single character function API. Get Single Character function API. This handle identifies the interface structure of the get...","GUID-8CBE201E-43FE-4A88-8AB5-8379140F5A40.html@@@1.1.9.4.12 DRV_USART_WriteQueuePurge Function@@@bool DRV_USART_WriteQueuePurge ( const DRV_HANDLE handle ) Removes all write requests from the queue for the given client. This API does not abort the on-going write transfer. This function removes...","GUID-8D0CD4FB-C2B2-4AF4-8DB0-D6424CB9EAE1.html@@@1.1.3.4.8 DRV_MEMORY_AsyncEraseWrite Function@@@void DRV_MEMORY_AsyncEraseWrite ( const DRV_HANDLE handle, DRV_MEMORY_COMMAND_HANDLE * commandHandle, void * sourceBuffer, uint32_t blockStart, uint32_t nBlock ); Erase and Write data for the...","GUID-8D636C6F-ECAD-4501-9CD1-E145B18D7256.html@@@1.2.7.4.32 SYS_FS_CurrentWorkingDirectoryGet Function@@@SYS_FS_RESULT SYS_FS_CurrentWorkingDirectoryGet ( char *buff, uint32_t len ); Gets the current working directory This function gets the current working directory path along with the working drive. At...","GUID-8E283F11-3204-43A3-86D5-10CF8066E03F.html@@@1.2.5.4.8 SYS_DEBUG_INDEX_0 Macro@@@#define SYS_DEBUG_INDEX_0 0 Debug System Service index. This constant defines a symbolic name for the debug system service index. There can only be a single debug system service instance in the...","GUID-8E3A7168-6CEA-4CDF-9DE9-345AA82E1499.html@@@1.1.9.4.22 DRV_USART_INIT Struct@@@This structure is implementation specific. It is fully defined in drv_usart_definitions.h. Defines the data required to initialize the USART driver This data type defines the data required to...","GUID-8E82118C-F2B8-4394-A0C1-4E838387C179.html@@@1.2.3.2 Using The Library@@@In conjunction with the Console System Service, the Command Processor System Service provides the user with an ASCII command prompt. It will interpret the commands entered at the prompt and process...","GUID-8E9FFDEF-B064-46E0-A2B8-DFA88E8F1C00.html@@@1.1.9.4.14 DRV_USART_ReadAbort Function@@@bool DRV_USART_ReadAbort ( const DRV_HANDLE handle) Aborts an on-going read request This function aborts an on-going read transfer. No callback is given for the on-going request being aborted. When...","GUID-8F48061B-62C0-48D8-9FC6-35BCF04E2CF4.html@@@1.1.9.4.4 DRV_USART_Close Function@@@void DRV_USART_Close ( DRV_Handle handle ) Closes an opened-instance of the USART driver. This routine closes an opened-instance of the USART driver, invalidating the handle. Any buffers in the driver...","GUID-8F64B44C-AAE7-48E6-A1DF-EA5D649F655D.html@@@1.2.7.4.66 SYS_FS_MEDIA_MANAGER_SectorWrite Function@@@SYS_FS_MEDIA_BLOCK_COMMAND_HANDLE SYS_FS_MEDIA_MANAGER_SectorWrite ( uint16_t diskNo, uint32_t sector, uint8_t * dataBuffer, uint32_t noSectors ); Writes a sector to the specified media. This function...","GUID-9001DC8C-6506-490D-B889-B8925C1192C3.html@@@1.2.7.4.35 SYS_FS_FileDirectoryModeSet Function@@@SYS_FS_RESULT SYS_FS_FileDirectoryModeSet ( const char * path, SYS_FS_FILE_DIR_ATTR attr, SYS_FS_FILE_DIR_ATTR mask ); Sets the mode for the file or directory. This function sets the mode for a file...","GUID-90AA8C6C-F6A4-4135-9FFA-7BF0A708F5C4.html@@@1.1.1.2 DRV_HANDLE Typedef@@@typedef uintptr_t DRV_HANDLE; Handle to an opened device driver. This handle identifies the open instance of a device driver. It must be passed to all other driver routines (except the initialization...","GUID-918010E3-6FC5-4A07-9626-4E16FC61ECCE.html@@@1.1.13.1.4.7 DRV_MX25L_SectorErase Function@@@bool DRV_MX25L_SectorErase ( const DRV_HANDLE handle, uint32_t address ); Erase the sector from the specified block start address. This function schedules a non-blocking sector erase operation of...","GUID-918C3149-0EB2-4501-A80D-24BB98E67B5D.html@@@1.2.3.4.13 SYS_CMD_READ_BUFFER_SIZE Macro@@@#define SYS_CMD_READ_BUFFER_SIZE 128 Command Processor System Service Read Buffer Size definition. This macro defines the maximum size of the command buffer. None...","GUID-91E325DB-2320-47FF-B5A6-5ABD322CB8BC.html@@@1.1.9.4.1 DRV_USART_Initialize Function@@@SYS_MODULE_OBJ DRV_USART_Initialize ( const SYS_MODULE_INDEX index, const SYS_MODULE_INIT * const init ) Initializes the USART instance for the specified driver index. This routine initializes the...","GUID-92EA2E5D-4704-4D93-96DB-29FA4359A2AB.html@@@1.2.7.4.11 SYS_FS_FileTell Function@@@int32_t SYS_FS_FileTell ( SYS_FS_HANDLE handle ); Obtains the file pointer position. Obtains the current value of the file position indicator for the file pointed to by handle. A valid file handle...","GUID-9303AF61-5D37-4A3D-9032-D9B898B2FDA7.html@@@1.4.4.4 OSAL_SEM_Post Function@@@OSAL_RESULT OSAL_SEM_Post (OSAL_SEM_HANDLE_TYPE* semID) Posts a semaphore or increments a counting semaphore. This function posts a binary semaphore or increments a counting semaphore. The highest...","GUID-93CC4026-5646-46CB-B6E3-46FB102A7564.html@@@1.2.4.4.3 SYS_CONSOLE_Status Function@@@SYS_STATUS SYS_CONSOLE_Status ( SYS_MODULE_OBJ object ) Returns status of the specific instance of the Console module. This function returns the status of the specific module instance. The...","GUID-9431E4B8-75C5-4EDD-92AB-E408501BE694.html@@@1.1.7.4.6 DRV_SDSPI_SyncRead Function@@@bool DRV_SDSPI_SyncRead ( const DRV_HANDLE handle, void * targetBuffer, uint32_t blockStart, uint32_t nBlock ) Reads blocks of data from the specified block address of the SD Card. This function...","GUID-94CD1F4B-606F-483B-985B-58EE4E5C6A27.html@@@1.1.11.1.4.9 DRV_AT25_GeometryGet Function@@@bool DRV_AT25_GeometryGet ( const DRV_HANDLE handle, DRV_AT25_GEOMETRY *geometry) Returns the geometry of the device. This API gives the following geometrical details of the DRV_AT25 Flash: Number of...","GUID-9556A393-F301-40C0-8CCB-B49E9A0FC031.html@@@1.2.7.4.15 SYS_FS_Error Function@@@SYS_FS_ERROR SYS_FS_Error ( void ); Returns the last error. When a file system operation fails, the application can know the reason of failure by calling the SYS_FS_Error. This function only reports...","GUID-959D7A17-0006-48BC-B5B5-00FB6D26B38D.html@@@1.4.2.1 Semaphore Operations@@@The semaphore implements a method for thread synchronization. This synchronization can be either between one thread and another or between an ISR and a thread. A semaphore once signalled will unblock...","GUID-95A8C5DF-C0ED-42F7-9C69-062984DBBEAB.html@@@1.2.7.4.42 SYS_FS_DrivePartition Function@@@SYS_FS_RESULT SYS_FS_DrivePartition ( const char *path, const uint32_t partition[], void * work ); Partitions a physical drive (media). This function partitions a physical drive (media) into requested...","GUID-95BCA67A-3CF8-4901-A09E-D2003C14EB2E.html@@@1.1.4.4.19 DRV_NAND_FLASH_TRANSFER_STATUS Enum@@@typedef enum { /* Transfer is being processed */ DRV_NAND_FLASH_TRANSFER_BUSY, /* Transfer is successfully completed */ DRV_NAND_FLASH_TRANSFER_COMPLETED, /* Transfer is failed from NAND Flash */...","GUID-95F7ABE3-6864-4FC9-B11B-97B31ACF683C.html@@@1.1.2.4.19 DRV_I2C_TRANSFER_EVENT Enum@@@typedef enum { /* Transfer request is pending */ DRV_I2C_TRANSFER_EVENT_PENDING = 0 , /* All data from or to the buffer was transferred successfully. */ DRV_I2C_TRANSFER_EVENT_COMPLETE = 1 , /*...","GUID-964912DE-8855-4B0E-A42E-EE2F8CFC3FE1.html@@@1.2.5.3 Configuring The Library@@@Debug System Service Library should be configured via MHC. The following figures show the MHC configuration window for Debug System Service and brief description. The Debug System uses the services...","GUID-9728BCD2-2DB9-456F-8B5F-E88D61261ABC.html@@@1.3.1.4.11 EMU_EEPROM_PARAMETERS Struct@@@typedef struct { /** Number of bytes per emulated EEPROM page */ uint16_t page_size; /** Number of emulated pages of EEPROM */ uint16_t eeprom_num_logical_pages; /** Logical size of emulated EEPROM */...","GUID-982C8155-5325-4FD0-8561-DC58CEC444AA.html@@@1.2.2.6 SYS_CACHE_EnableDCache Function@@@void SYS_CACHE_EnableDCache ( void ) Enable Data Cache. Turns on Data Cache. None. None. None. SYS_CACHE_EnableDCache(); None...","GUID-987AC199-226F-49A3-AED1-CA0EE34D5328.html@@@1.1.9.4.11 DRV_USART_BufferStatusGet Function@@@DRV_USART_BUFFER_EVENT DRV_USART_BufferStatusGet ( const DRV_USART_BUFFER_HANDLE bufferHandle ) Returns the transmit/receive request status. This function can be used to poll the status of the queued...","GUID-99A3B7AF-E05E-4946-BBAD-4A4056FC1B7B.html@@@1.2.4.3 Configuring The Library@@@Console System Service Library should be configured via MHC. The following figures show the MHC configuration window for Console System Service and brief description. Common User Configuration for all...","GUID-9A395A5B-24E8-474F-9FD0-FDA0DD7DF22A.html@@@1.2.7.4.38 SYS_FS_CurrentDriveSet Function@@@SYS_FS_RESULT SYS_FS_CurrentDriveSet ( const char * path ); Sets the drive. This function sets the present drive to the one as specified by the path. By default, the drive mounted last becomes the...","GUID-9A7A8F80-564A-4CEC-AAB4-460526A7CBDC.html@@@1.2.7.4.75 SYS_FS_MEDIA_BLOCK_COMMAND_HANDLE_INVALID Macro@@@#define SYS_FS_MEDIA_BLOCK_COMMAND_HANDLE_INVALID SYS_MEDIA_BLOCK_COMMAND_HANDLE_INVALID Defines the invalid media block command handle. This value defines invalid handle for the media block command...","GUID-9A80603D-1A4B-4313-8D69-3C7F8E0CDDF0.html@@@1.2.3.4.11 COMMAND_HISTORY_DEPTH Macro@@@#define COMMAND_HISTORY_DEPTH 4 Command Processor System Service Maximum Depth of Command History. This macro defines the maximum depth of the command history. None...","GUID-9B151BD6-CAB6-497E-867F-9D9543CB51A6.html@@@1.2.10 Reset System Service@@@This library provides an interface to manage and control Reset related features on Microchip families of micro-controllers. Library Interface Reset System Service provides the following interfaces...","GUID-9B2ED9D8-3DFB-4FA7-BAA7-228E011BA99B.html@@@1.1.8.3 Configuring The Library@@@SPI Driver Library should be configured via MHC. The following figures show the MHC configuration window for SPI driver and brief description. Common User Configuration for all Instances Driver Mode...","GUID-9B9CC3A1-8B69-41C7-AA41-838DFFF0EE1E.html@@@1.1.6.4.16 DRV_SDMMC_EVENT Enum@@@typedef enum { /* Operation has been completed successfully. */ DRV_SDMMC_EVENT_COMMAND_COMPLETE = SYS_MEDIA_EVENT_BLOCK_COMMAND_COMPLETE, /* There was an error during the operation */...","GUID-9BDB404E-10C0-46C6-A3B0-9629D7D40676.html@@@1.2.4.4.18 SYS_CONSOLE_PRINT Macro@@@#define SYS_CONSOLE_PRINT (fmt, ...) SYS_CONSOLE_Print(SYS_CONSOLE_DEFAULT_INSTANCE, fmt, ##__VA_ARGS__) Prints formatted message on the default console instance This macro calls SYS_Console_Print()...","GUID-9BE0BEAA-AEED-4E5D-801F-2337B8788572.html@@@1.2.4.4.13 SYS_CONSOLE_Print Function@@@void SYS_CONSOLE_Print ( const SYS_CONSOLE_HANDLE handle, const char *format, ...) Formats and prints a message with a variable number of arguments to the console This function formats and prints a...","GUID-9C3DFDAE-818D-415D-8331-0F56F2817EBA.html@@@1.1.3.4.3 DRV_MEMORY_Tasks Function@@@void DRV_MEMORY_Tasks ( SYS_MODULE_OBJ object ); Maintains the Memory driver&apos;s internal state machine. This routine maintains the driver&apos;s internal state machine. Initial state is put to process Queue...","GUID-9D474B7C-D749-4DD6-A012-FE94C039324E.html@@@1.2.11.1 How the Library Works@@@The tick-less implementation reduces the overheads of servicing the unneeded hardware timer interrupt on every tick. The tick-less implementation can also provide higher resolution compared to a tick...","GUID-9D56B23B-286F-46C8-AF68-FE5C2B1A3770.html@@@1.1.6.4.1 DRV_SDMMC_Initialize Function@@@SYS_MODULE_OBJ DRV_SDMMC_Initialize ( const SYS_MODULE_INDEX index, const SYS_MODULE_INIT* const init ); Initializes the SD Card driver. This routine initializes the SD Card driver, making it ready...","GUID-9D71A235-3591-4967-B36E-784C76F51D77.html@@@1.1.4.4.6 DRV_NAND_FLASH_TransferStatusGet Function@@@DRV_NAND_FLASH_TRANSFER_STATUS DRV_NAND_FLASH_TransferStatusGet ( const DRV_HANDLE handle) Gets the current status of the transfer request. This routine gets the current status of the transfer...","GUID-9E51941B-E942-4237-8525-CC6C18828E22.html@@@1.1.13.3.4.4 DRV_W25_Status Function@@@SYS_STATUS DRV_W25_Status ( const SYS_MODULE_INDEX drvIndex ); Gets the current status of the W25 driver module. This routine provides the current status of the W25 driver module. Function...","GUID-9E69B512-F170-41AC-B9DF-FAC16E96E328.html@@@1.2.2.1 SYS_CACHE_EnableCaches Function@@@void SYS_CACHE_EnableCaches ( void ) Enables both Instruction and Data Caches. Turns on both Instruction and Data Caches. None. None. None. SYS_CACHE_EnableCaches(); None...","GUID-9ED5FA0F-F914-42D0-BF74-13E0D582A9F8.html@@@1.2.5.1 How the Library Works@@@The Debug System Service provides APIs for the application developer to send formatted or unformatted messages to a system console. Abstraction Model The console core layer_provides a POSIX-like...","GUID-9FCC5D93-AC38-4FA0-88B8-A6C5A9BAF6EF.html@@@1.1.13.2.4 Library Interface@@@SST26 driver library provides the following interfaces: Functions Name Description DRV_SST26_Initialize Initializes the SST26 Driver DRV_SST26_Open Opens the specified SST26 driver instance and...","GUID-9FCF9580-48B3-4A80-B3E5-C104CF090A62.html@@@1.1.13.1.3 Configuring The Library@@@The MX25L driver library should be configured through the MHC. The following figures show the MHC configuration window for the MX25L driver and brief description. MX25L Driver with QSPI peripheral in...","GUID-A118DA5A-D2B3-4D22-8A52-4C23FE1DB218.html@@@1.1.9.4.5 DRV_USART_ErrorGet Function@@@DRV_USART_ERROR DRV_USART_ErrorGet ( const DRV_USART_BUFFER_HANDLE bufferHandle ) Gets the USART hardware errors associated with the transfer request. This function returns the errors associated with...","GUID-A15D210F-CC6F-4C73-BD2E-276AF059D510.html@@@1.1.5.1.4 Library Interface@@@SST39 driver library provides the following interfaces: Functions Name Description DRV_SST39_Initialize Initializes the SST39 Driver DRV_SST39_Open Opens the specified SST39 driver instance and...","GUID-A19D31BD-CA9E-4C95-8C34-48C4F568CB46.html@@@1.1.3.4.1 DRV_MEMORY_Initialize Function@@@SYS_MODULE_OBJ DRV_MEMORY_Initialize ( const SYS_MODULE_INDEX drvIndex, const SYS_MODULE_INIT * const init ); Initializes the Memory instance for the specified driver index This routine initializes...","GUID-A19F88F6-C9FA-4AAC-B38D-F144457573A8.html@@@1.2.6.2 SYS_DMA_ChannelTransfer Function@@@bool SYS_DMA_ChannelTransfer ( SYS_DMA_CHANNEL channel, const void *srcAddr, const void *destAddr, size_t blockSize ) Adds a data transfer to a DMA channel and enables the channel to start data...","GUID-A235E91D-B728-4F9C-9B77-54B79265196A.html@@@1.2.11.4.24 SYS_TIME_INIT Struct@@@typedef struct _SYS_TIME_INIT SYS_TIME_INIT; Defines the data required to initialize the TIME system service This data type defines the data required to initialize the TIME system service. This...","GUID-A420B807-5F28-4CED-9759-6E0F87209108.html@@@1.1.2.1 How the Library Works@@@The I2C driver library is a multi-client, multi-instance buffer queue model based driver interface. Abstraction Model The following diagram illustrates the model used by the I2C Driver. Note: Queue is...","GUID-A49573DD-1DA6-4F69-AEF5-FFCB008FC6B4.html@@@1.1.1.8 DRV_IO_BUFFER_TYPES Enum@@@typedef enum { // Operation does not apply to any buffer DRV_IO_BUFFER_TYPE_NONE = 0x00 , // Operation applies to read buffer DRV_IO_BUFFER_TYPE_READ = 0x01 , // Operation applies to write buffer...","GUID-A4CE28DC-40B2-43C2-949E-69ABD5EFB2DC.html@@@1.2.3.4.7 SYS_CMD_MESSAGE Function@@@void SYS_CMD_MESSAGE ( const char * message) Outputs a message to the Command Processor System Service console. This function outputs a message to the Command Processor System Service console...","GUID-A59EF3BD-F9F2-408B-9816-E96D313A2838.html@@@1.1.4.4.11 DRV_NAND_FLASH_ParameterPageRead Function@@@bool DRV_NAND_FLASH_ParameterPageRead ( const DRV_HANDLE handle, uint8_t *parameterPage, uint32_t size); Returns the Parameter page of the NAND Flash device. This routine reads the parameter page of...","GUID-A5F00E8D-8192-4978-8E5D-D7843B7046C0.html@@@1.2.7.4.52 SYS_FS_FILE_OPEN_ATTRIBUTES Enum@@@typedef enum { /* reading the file = possible, if file exists. reading the file = file open returns error, if file does not exist. writing to the file = not possible. Write operation returns error */...","GUID-A6505482-D078-4796-9E2E-A224BB412F0A.html@@@1.2.7.4.60 SYS_FS_MEDIA_MANAGER_AddressGet Function@@@uintptr_t SYS_FS_MEDIA_MANAGER_AddressGet ( uint16_t diskNo ); Gets the starting media address based on a disk number. This function gets the starting address of a media. This function is intended to...","GUID-A670ED1C-14B6-4AC7-9C14-8A16D69DF1A3.html@@@1.2.7.4.72 SYS_FS_MEDIA_MANAGER_TransferTask Function@@@void SYS_FS_MEDIA_MANAGER_TransferTask ( uint8_t mediaIndex ); Media manager transfer task function. This is the media manager transfer task function. This task is repeatedly called by the disk io...","GUID-A6CEDD40-C9C6-4F17-AF36-3CA35E2F09F3.html@@@1.1.6.4.17 DRV_SDMMC_EVENT_HANDLER Typedef@@@typedef SYS_MEDIA_EVENT_HANDLER DRV_SDMMC_EVENT_HANDLER; Pointer to a SDMMCDriver Event handler function This data type defines the required function signature for the SDMMC event handling callback...","GUID-A702EBE1-F1A3-4196-A8E1-6FDBF06C2661.html@@@1.1.1.1 DRV_CLIENT_STATUS Enum@@@typedef enum { /* Indicates that a driver-specific error has occurred. */ DRV_CLIENT_STATUS_ERROR_EXTENDED = - 10 , /* An unspecified error has occurred.*/ DRV_CLIENT_STATUS_ERROR = - 1 , /* The...","GUID-A7294804-5A6B-42F0-A7EC-9B78EEBC0C19.html@@@1.2.7.4.50 SYS_FS_FORMAT Macros@@@// The Values mentioned below should be aligned with values in ff.h #define SYS_FS_FORMAT_FAT 0x01 #define SYS_FS_FORMAT_FAT32 0x02 #define SYS_FS_FORMAT_EXFAT 0x04 #define SYS_FS_FORMAT_ANY 0x07...","GUID-A91D370A-60F4-439F-BDBA-FF4FF0851094.html@@@1.2.4.4.15 STDXXX_FILENO Numbers@@@#define STDIN_FILENO 0 #define STDOUT_FILENO 1 #define STDERR_FILENO 2 Standard Input/Output/Error File Number Macros These macros provide the Standard Input, Output and Error File numbers aligned to...","GUID-A95E6C8D-4FD6-4826-9FB5-E19136C3BA6D.html@@@1.1.4.4.9 DRV_NAND_FLASH_FeatureGet Function@@@bool DRV_NAND_FLASH_FeatureGet ( const DRV_HANDLE handle, uint8_t *featureData, uint8_t featureDataSize, uint8_t featureAddress) Read target specific features. This routine reads target specific...","GUID-AA145CB2-4D8E-4544-AFF0-BFE413A0541B.html@@@1.2.4.4.12 SYS_CONSOLE_WriteCountGet Function@@@ssize_t SYS_CONSOLE_WriteCountGet ( const SYS_CONSOLE_HANDLE handle) Returns the number of bytes pending for transmission in the transmit buffer. This function indicates the number of bytes pending...","GUID-AA699B4B-601C-47E7-9424-2394151CDADC.html@@@1.1.6.4.7 DRV_SDMMC_AsyncWrite Function@@@void DRV_SDMMC_AsyncWrite ( const DRV_HANDLE handle, DRV_SDMMC_COMMAND_HANDLE* commandHandle, void * sourceBuffer, uint32_t blockStart, uint32_t nBlock ); Writes blocks of data starting at the...","GUID-AADCF888-80C7-4848-AE21-5D37C9738F12.html@@@1.5.2 Micrium OS III@@@Micri\u00B5m \u00B5C/OS-III are highly portable, ROMable, scalable, preemptive, real-time, deterministic, multitasking kernels for microprocessors, microcontrollers and DSPs. More Information For more...","GUID-AAF04ADC-3D87-41C9-B3F1-E24105F2CB81.html@@@1.1.13.2.4.17 DRV_SST26_EVENT_HANDLER Typedef@@@typedef void (*DRV_SST26_EVENT_HANDLER) ( DRV_SST26_TRANSFER_STATUS event, uintptr_t context ); Pointer to a SST26 Driver Event handler function This data type defines the required function signature...","GUID-AAF0F727-6A9B-4935-AF27-0921A436A210.html@@@1.1.11.1.4.8 DRV_AT25_TransferStatusGet Function@@@DRV_AT25_TRANSFER_STATUS DRV_AT25_TransferStatusGet ( const DRV_HANDLE handle) Gets the current status of the transfer request. This routine gets the current status of the transfer request...","GUID-AB133EBE-D69A-48C3-BF6E-111E569747E0.html@@@1.2.3.1 How the Library Works@@@Abstraction Model The Command Processor System Service is a module that works closely with the Console System Service to present a user interface command prompt. Working Flow Initialization and...","GUID-AB36B81D-DB1C-43F0-950E-1E302FC77832.html@@@1.2.8 Interrupt System Service@@@This library provides a low-level abstraction of the Interrupt System Service Library that is available on the Microchip family micro-controllers with a convenient C language interface. It can be used...","GUID-AB740D73-7660-41E2-8592-0BB6AE6264A1.html@@@1.1.13.3.4.8 DRV_W25_BlockErase Function@@@bool DRV_W25_BlockErase ( const DRV_HANDLE handle, uint32_t address ); Erase a block from the specified block start address. This function schedules a non-blocking block erase operation of flash...","GUID-ABCA7342-A189-40BE-81B4-8F7AFB54DBB7.html@@@1.1.7.4.3 DRV_SDSPI_Open Function@@@DRV_HANDLE DRV_SDSPI_Open ( const SYS_MODULE_INDEX drvIndex, const DRV_IO_INTENT ioIntent ) Opens the specified SD Card driver instance and returns a handle to it. This routine opens the specified SD...","GUID-ABD91B38-9ECB-4213-A666-941516E038EE.html@@@1.2.8.1 SYS_INT_Enable Function@@@void SYS_INT_Enable ( void ) Enable Global Interrupt This function enables global interrupt. None None. None. SYS_INT_Enable(); None...","GUID-ABF27578-8112-4353-A8F0-53C418DD1D29.html@@@1.2.2.9 SYS_CACHE_CleanDCache Function@@@void SYS_CACHE_CleanDCache ( void ) Clean Data Cache. Cleans Data Cache. None. None. None. SYS_CACHE_CleanDCache(); None...","GUID-AC1F7CAE-E209-40B5-81E4-13328E56ED43.html@@@1.1.13.3.4 Library Interface@@@W25 driver library provides the following interfaces: Functions Name Description DRV_W25_Initialize Initializes the W25 Driver DRV_W25_Open Opens the specified W25 driver instance and returns a handle...","GUID-ACA74B78-E632-4CE1-BF4B-C0073C64D35F.html@@@1.1.13.2.4.13 DRV_SST26_GeometryGet Function@@@bool DRV_SST26_GeometryGet ( const DRV_HANDLE handle, SST26_GEOMETRY *geometry ); Returns the geometry of the device. This API gives the following geometrical details of the SST26 Flash: Number of...","GUID-AD2A8D50-5953-4F48-AA6E-2C472D92EEB3.html@@@1.3.1.4.9 EMU_EEPROM_BufferRead Function@@@EMU_EEPROM_STATUS EMU_EEPROM_BufferRead ( const uint16_t offset, uint8_t * const data, const uint16_t length ); Reads a buffer of data from the emulated EEPROM memory space Reads a buffer of data from...","GUID-B0268879-D0F1-41E8-A644-2254FF79F38B.html@@@1.2.4.4.10 SYS_CONSOLE_ReadCountGet Function@@@ssize_t SYS_CONSOLE_ReadCountGet ( const SYS_CONSOLE_HANDLE handle) Returns number of unread bytes available in the receive buffer. This function indicates the number of unread bytes in the receive...","GUID-B11944D6-E746-4D44-B1D6-9C1E12944351.html@@@1.2.7.4.6 SYS_FS_FileOpen Function@@@SYS_FS_HANDLE SYS_FS_FileOpen ( const char * fname, SYS_FS_FILE_OPEN_ATTRIBUTES attributes ); Opens a file. This function opens a file with the requested attributes. Prior to opening a file, the name...","GUID-B1338A2F-44F5-4552-BDC3-CFEE94C95352.html@@@1.1.4.4.4 DRV_NAND_FLASH_Status Function@@@SYS_STATUS DRV_NAND_FLASH_Status ( const SYS_MODULE_INDEX drvIndex ) Gets the current status of the NAND FLASH driver module. This routine provides the current status of the NAND FLASH driver module...","GUID-B187B7A8-F0F8-4939-A1D5-12476CFA7691.html@@@1.1.5.1.4.10 DRV_SST39_TRANSFER_STATUS Enum@@@typedef enum { /* Transfer is being processed */ DRV_SST39_TRANSFER_BUSY, /* Transfer is successfully completed*/ DRV_SST39_TRANSFER_COMPLETED, /* Transfer had error*/...","GUID-B19AE59E-6323-4584-8369-DF3831E9F1F4.html@@@1.2.7.4.49 SYS_FS_RESULT Enum@@@typedef enum { /* Operation succeeded */ SYS_FS_RES_SUCCESS = 0 , /* Operation failed */ SYS_FS_RES_FAILURE = - 1 } SYS_FS_RESULT; Lists the various results of a file operation. This enumeration lists...","GUID-B262ADC3-3F94-4525-B01A-4761CE8F6309.html@@@1.1.13.3.1 How the Library Works@@@The W25 driver library is a single-client, single-instance based driver interface. Abstraction Model The W25 driver interface provides read, write and Erase functions that abstract out the internal...","GUID-B286925F-9A1D-4048-BC76-8CAB686D63AB.html@@@1.2.4.2 Using The Library@@@The Console System Service allows the application/middleware to route messages/debug information to a console running on a host computer. Depending on the application need, the size of the transmit...","GUID-B2925496-394D-47ED-BD1E-1AB2149934FA.html@@@1.1.8 SPI Driver@@@The SPI Driver is a multi-client, multi-instance buffer model based driver interface which can be used to communicate with various slave devices like EEPROM, ADC etc. Key Features of SPI Driver: Multi...","GUID-B2CFEC5B-C6BE-43F7-B525-B6CBB46600BA.html@@@1.1.8.4.5 DRV_SPI_TransferSetup Function@@@bool DRV_SPI_TransferSetup ( DRV_HANDLE handle, DRV_SPI_TRANSFER_SETUP * setup ) Sets the dynamic configuration of the driver including chip select pin. This function is used to update any of the...","GUID-B330DC10-1070-456F-A0E3-99774F49CC0E.html@@@1.2.1.11 SYS_MODULE_INDEX Typedef@@@typedef unsigned short int SYS_MODULE_INDEX; Identifies which instance of a system module should be initialized or opened. This data type identifies to which instance of a system module a call to that...","GUID-B409B252-4361-430D-8B89-48AAE39FD066.html@@@1.1.3.4.15 DRV_MEMORY_TransferStatusGet Function@@@MEMORY_DEVICE_TRANSFER_STATUS DRV_MEMORY_TransferStatusGet ( const DRV_HANDLE handle ); Gets the current status of the transfer request on attached device. This routine gets the current status of the...","GUID-B41F23CB-0677-425E-8B1F-545E056AF24D.html@@@1.1.11.1.2 Using The Library@@@The AT25 driver provides non-blocking API&apos;s to read, write AT25 EEPROM. The AT25 driver can be used in following ways: To perform reads and writes from/to any EEPROM memory address, with number of...","GUID-B464623F-D8AA-489B-80DB-52B72F040893.html@@@1.2.10.1 SYS_RESET_SoftwareReset Function@@@void SYS_RESET_SoftwareReset ( void ) Triggers a software reset. This function triggers a software Reset. None. None. None. SYS_RESET_SoftwareReset(); None...","GUID-B4934CBC-6AF2-495C-AC8D-576C20729D5F.html@@@1.1.3.4.20 DRV_MEMORY_AddressGet Function@@@uintptr_t DRV_MEMORY_AddressGet ( const DRV_HANDLE handle ); Returns the Memory media start address This function returns the Memory Media start address. The DRV_MEMORY_Open() routine must have been...","GUID-B51DDD56-C465-4676-816B-85FFEE48544C.html@@@1.2.3.4.18 SYS_CMD_PUTC_FNC Typedef@@@typedef void (*SYS_CMD_PUTC_FNC)( const void * cmdIoParam, char c); Identifies a single character print function API. Single Character Print function API. This handle identifies the interface...","GUID-B563DED5-2F0D-400A-8930-AA532960748D.html@@@1.2.9.2 SYS_PORT_PinRead Function@@@bool SYS_PORT_PinRead (SYS_PORT_PIN pin) Read the selected pin value. This function reads the selected pin value. it reads the value regardless of pin configuration, whether uniquely as an input, or...","GUID-B592E4B0-C24A-4BD0-8EA2-D97A7391DB8E.html@@@1.1.8.4.6 DRV_SPI_Lock Function@@@bool DRV_SPI_Lock ( const DRV_HANDLE handle, bool lock ) Use this API to lock the SPI driver for exclusive use by a client. This function provides exclusive access to the calling SPI driver client...","GUID-B6686A00-4544-4CFB-9F3C-9184AD2E0FDD.html@@@1.2.3.4.12 SYS_CMD_MAX_LENGTH Macro@@@#define SYS_CMD_MAX_LENGTH 80 Command Processor System Service Command Buffer Maximum Length definition. This macro defines the maximum length of the command buffer. None...","GUID-B6B51E48-2D3D-42F8-8493-3405F1639A9E.html@@@1.2.1 Common System Services Library@@@Common system services library provides the following data types and constants that are shared and common to all system services Media System Service Data types and constants Name Type Description...","GUID-B6E0D5A9-0560-44D9-A979-BA1CECDD2885.html@@@1.2.7.4.10 SYS_FS_FileSeek Function@@@int32_t SYS_FS_FileSeek ( SYS_FS_HANDLE handle, int32_t offset, SYS_FS_FILE_SEEK_CONTROL whence ); Moves the file pointer by the requested offset. This function sets the file pointer for a open file...","GUID-B6FBF522-40EF-4965-9DFB-7DB871636FDD.html@@@1.1.13.3.4.10 DRV_W25_Read Function@@@bool DRV_W25_Read ( const DRV_HANDLE handle, void *rx_data, uint32_t rx_data_length, uint32_t address ); Reads n bytes of data from the specified start address of flash memory. This function schedules...","GUID-B708D73F-E511-494D-8F37-607CA9F5F522.html@@@1.2.1.18 SYS_MODULE_REINITIALIZE_ROUTINE Typedef@@@typedef void (* SYS_MODULE_REINITIALIZE_ROUTINE) ( SYS_MODULE_OBJ object, Pointer to a routine that reinitializes a system module (driver, library, or system-maintained application) This data type is...","GUID-B770DB97-5472-46CE-9CEC-39A8C892C5B3.html@@@1.4.2.4 Memory Operations@@@This section describes the memory operation using the OSAL Library. The OSAL Library provides an interface to a memory allocation mechanism. The memory required for dynamic instantiation of variables...","GUID-B788B85C-F76E-45BC-BFEE-675AB9F65F24.html@@@1.1.4.4.1 DRV_NAND_FLASH_Initialize Function@@@SYS_MODULE_OBJ DRV_NAND_FLASH_Initialize ( const SYS_MODULE_INDEX drvIndex, const SYS_MODULE_INIT * const init ) Initializes the NAND FLASH Driver This routine initializes the NAND FLASH driver making...","GUID-B7A6EC0C-5131-48B0-AA51-4F396DA97785.html@@@1.2.11.4.23 SYS_TIME_TimerPeriodHasExpired Function@@@bool SYS_TIME_TimerPeriodHasExpired ( SYS_TIME_HANDLE handle ) Reports whether or not the current period of a software timer has expired. This function reports whether or not the current period of the...","GUID-B7F44552-2789-45AD-9991-863E7393A4D1.html@@@1.1.4.4.3 DRV_NAND_FLASH_Close Function@@@void DRV_NAND_FLASH_Close ( const DRV_HANDLE handle ) Closes an opened-instance of the NAND FLASH driver This routine closes an opened-instance of the NAND FLASH driver, invalidating the handle...","GUID-B826AB75-F4E4-4A5B-8189-23C99CCF9936.html@@@1.1.4.4 Library Interface@@@NAND Flash driver library provides the following interfaces: Functions Name Description DRV_NAND_FLASH_Initialize Initializes the NAND FLASH Driver DRV_NAND_FLASH_Open Opens the specified NAND FLASH...","GUID-B84F5FC9-27E9-43D0-BF80-DDF4F8EBA4F1.html@@@1.2.7.4.22 SYS_FS_FileCharacterPut Function@@@SYS_FS_RESULT SYS_FS_FileCharacterPut ( SYS_FS_HANDLE handle, char data ); Writes a character to a file. This function writes a character to a file. The file into which a character has to be written...","GUID-B87C652A-21F7-49B9-AD54-E19B3073BBBF.html@@@1.1.1.3 DRV_HANDLE_INVALID Macro@@@#define DRV_HANDLE_INVALID (((DRV_HANDLE) - 1 )) Invalid device handle. If a driver is unable to allow an additional module to use it, it must then return the special value DRV_HANDLE_INVALID. Callers...","GUID-B89FEC68-34D5-4B7B-9EEB-ABB7C05A7564.html@@@1.2.2.10 SYS_CACHE_CleanInvalidateDCache Function@@@void SYS_CACHE_CleanInvalidateDCache ( void ) Clean and Invalidate Data Cache. Cleans and Invalidates Data Cache. None. None. None. SYS_CACHE_CleanInvalidateDCache(); None...","GUID-B8A7B902-CAD4-40FB-9A74-9E703A1D74E1.html@@@1.2.1.4 SYS_MEDIA_BLOCK_EVENT Enum@@@typedef enum { /* Block operation has been completed successfully. */ SYS_MEDIA_EVENT_BLOCK_COMMAND_COMPLETE, /* There was an error during the block operation */ SYS_MEDIA_EVENT_BLOCK_COMMAND_ERROR }...","GUID-B8B88178-A501-4BA9-A5BA-56BD4ECCC0AF.html@@@1.1.12.1.4.7 DRV_AT25DF_PageWrite Function@@@bool DRV_AT25DF_PageWrite ( const DRV_HANDLE handle, void *txData, uint32_t address) Writes one page of data starting at the specified address. This function schedules a non-blocking write operation...","GUID-B923A6E5-4C36-4DCA-8F94-360FC1E49735.html@@@1.1.13.1.4.13 DRV_MX25L_GeometryGet Function@@@bool DRV_MX25L_GeometryGet ( const DRV_HANDLE handle, MX25L_GEOMETRY *geometry ); Returns the geometry of the device. This API gives the following geometrical details of the MX25L Flash: Number of...","GUID-B94F1995-7F71-4184-96C7-A882FFCC32FA.html@@@1.1.2.4.18 DRV_I2C_TRANSFER_HANDLE_INVALID Macro@@@#define DRV_I2C_TRANSFER_HANDLE_INVALID ((DRV_I2C_TRANSFER_HANDLE)(- 1 )) Definition of an invalid transfer handle. This is the definition of an invalid transfer handle. An invalid transfer handle is...","GUID-B9E79528-189C-4FA7-9252-A96AF3636B2B.html@@@1.1.13.1.4.10 DRV_MX25L_Read Function@@@bool DRV_MX25L_Read ( const DRV_HANDLE handle, void *rx_data, uint32_t rx_data_length, uint32_t address ); Reads n bytes of data from the specified start address of flash memory. This function...","GUID-BA1691E2-6B02-4CCD-94F8-7936A71EC069.html@@@1.1.10.1 AT24 Driver@@@This driver provides a non-blocking interface to read and write to external AT24 EEPROM. The library uses the I2C peripheral library (PLIB) to interface with the AT24 Key Features: Supports a single...","GUID-BA2537D5-FF83-42EA-AD5B-2D427CC91976.html@@@1.2.7.4.81 SYS_FS_MEDIA_STATE Enum@@@typedef enum { /* Media is de registered with the media manager */ SYS_FS_MEDIA_STATE_DEREGISTERED = 0 , /* Media is registered with the media manager */ SYS_FS_MEDIA_STATE_REGISTERED, /* Check the...","GUID-BA5815F6-F9D7-43BD-8F05-65CC6E199C25.html@@@1.2.11.3 Configuring The Library@@@The Time System Service library should be configured through the MHC. The following figure shows the MHC configuration window for configuring the Time System Service and a brief description of various...","GUID-BA771AE9-3E03-4F87-BE24-51D33B871898.html@@@1.2.5.4.7 SYS_ERROR_LEVEL Enum@@@typedef enum { /* Errors that have the potential to cause a system crash. */ SYS_ERROR_FATAL = 0 , /* Errors that have the potential to cause incorrect behavior. */ SYS_ERROR_ERROR = 1 , /* Warnings...","GUID-BA947717-82BA-4AAE-B017-1BFA24B4C89A.html@@@1.2.6.6 SYS_DMA_DataWidthSetup Function@@@void SYS_DMA_DataWidthSetup (SYS_DMA_CHANNEL channel, SYS_DMA_WIDTH dataWidth); Setup data width of selected DMA channel. This function sets data width of selected DMA channel. Any ongoing transaction...","GUID-BAAA2F94-E63D-4BFF-9C13-DFE7C8689DF6.html@@@1.1.12.1.4.2 DRV_AT25DF_Status Function@@@SYS_STATUS DRV_AT25DF_Status ( const SYS_MODULE_INDEX drvIndex ) Gets the current status of the AT25DF driver module. This routine provides the current status of the AT25DF driver module. Function...","GUID-BAC812A4-D8EE-4075-9E96-7B08D530A892.html@@@1.2.7.4.74 SYS_FS_MEDIA_BLOCK_COMMAND_HANDLE Typedef@@@typedef SYS_MEDIA_BLOCK_COMMAND_HANDLE SYS_FS_MEDIA_BLOCK_COMMAND_HANDLE; Handle identifying block commands of the media. A block command handle is returned by a call to the Read, Write, or Erase...","GUID-BB749835-8CF6-4396-8A6F-52A20490F530.html@@@1.1.13.3.4.15 DRV_W25_GEOMETRY Struct@@@typedef struct { uint32_t read_blockSize; uint32_t read_numBlocks; uint32_t numReadRegions; uint32_t write_blockSize; uint32_t write_numBlocks; uint32_t numWriteRegions; uint32_t erase_blockSize...","GUID-BB75D339-99C6-4EFA-8443-51B883E071F5.html@@@1.2.7.4.29 SYS_FS_DirSearch Function@@@SYS_FS_RESULT SYS_FS_DirSearch ( SYS_FS_HANDLE handle, const char * name, SYS_FS_FILE_DIR_ATTR attr, SYS_FS_FSTAT *stat ); Searches for a file or directory. This function searches for the requested...","GUID-BB7E4A95-11F5-4B68-AB77-983B571454FF.html@@@1.1.7.3 Configuring The Library@@@SDSPI Driver Library should be configured via MHC. The following figures show the MHC configuration window for SDSPI driver and brief description. Common User Configuration for all Instances Driver...","GUID-BBAD84DF-1379-41FE-8BE1-9009BDC368AF.html@@@1.2.3.4.14 SYS_CMD_CallbackFunction Typedef@@@typedef void (*SYS_CMD_CallbackFunction) ( void *handle); Command Callback Function Handle. Command Callback Function Handle. None...","GUID-BBDB3D4A-93BB-45C2-9C58-C725BF0799F2.html@@@1.1.9.4.10 DRV_USART_BufferCompletedBytesGet Function@@@size_t DRV_USART_BufferCompletedBytesGet ( DRV_USART_BUFFER_HANDLE bufferHandle ); Returns the number of bytes that have been processed for the specified buffer request. The client can use this...","GUID-BC696779-C030-4709-B540-2779B58ABC08.html@@@1.1.13.2.4.11 DRV_SST26_PageWrite Function@@@bool DRV_SST26_PageWrite ( const DRV_HANDLE handle, void *tx_data, uint32_t tx_data_length, uint32_t address ); Writes one page of data starting at the specified address. This function schedules a...","GUID-BCEA1DD4-45DD-4DDD-97C6-B04C4E1C4821.html@@@1.2.1.15 SYS_STATUS Enum@@@typedef enum { // Indicates that a non-system defined error has occurred. The caller // must call the extended status routine for the module in question to // identify the error...","GUID-BD3DA087-FB55-44E5-B3D7-47966581E0E5.html@@@1.2.7.4.63 SYS_FS_MEDIA_MANAGER_DeRegister Function@@@void SYS_FS_MEDIA_MANAGER_DeRegister ( SYS_FS_MEDIA_HANDLE handle ) Function to De-register media drivers with the media manager. Function called by a media to deregister itself to the media manager...","GUID-BDBC1881-1C1B-4940-B6E3-F1809C7155BB.html@@@1.2.4.4.16 SYS_CONSOLE_DEFAULT_INSTANCE Macro@@@#define SYS_CONSOLE_DEFAULT_INSTANCE 0 System Console defualt instance This macro provides the default instance to be used by SYS_CONSOLE_PRINT and SYS_CONSOLE_MESSAGE to print the messages None...","GUID-BDFFE90F-0005-4192-BEF8-177D86BF8D8B.html@@@1.1.5.1.2 Using The Library@@@The SST39 driver provides the blocking API&apos;s to read, write and erase SST39 memory. The SST39 driver can be used in following ways: To perform sector erase operation. To perform chip erase operation...","GUID-BE94C6F4-3546-4F08-ACFC-B47A03E1E8E0.html@@@1.2.7.4.70 SYS_FS_MEDIA_MANAGER_RegisterTransferHandler Function@@@void SYS_FS_MEDIA_MANAGER_RegisterTransferHandler ( const void *eventHandler ); Register the event handler for data transfer events. This function is used to send the command status for the disk...","GUID-BEEC6E4A-AB22-424B-81C4-161E06B286B3.html@@@1.2.7.4.8 SYS_FS_FileRead Function@@@size_t SYS_FS_FileRead ( SYS_FS_HANDLE handle, void *buf, size_t nbyte ); Read data from the file. This function attempts to read nbyte bytes of data from the file associated with the file handle into...","GUID-BF3D7806-7DBE-4A2A-BA54-72EAF3659DBD.html@@@1.2.7.4.55 SYS_FS_FUNCTIONS Struct@@@typedef struct { /* Function pointer of native file system for mounting a volume */ int (*mount) (uint8_t vol); /* Function pointer of native file system for unmounting a volume */ int (*unmount)...","GUID-BF7BCBE3-A362-4DD5-81B5-8A7037353CCC.html@@@1.2.11.4.21 SYS_TIME_TimerStart Function@@@SYS_TIME_RESULT SYS_TIME_TimerStart ( SYS_TIME_HANDLE handle ) Starts a software timer running. This function starts a previously created software timer. The SYS_TIME_Initialize must have been called...","GUID-BFFB8AD8-CD11-49AB-8C23-F860A883EFE6.html@@@1.1.4 NAND Flash Driver@@@This driver provides the blocking functions to read, write and erase NAND Flash memory. The driver uses the below peripheral library to interface with the NAND Flash. SMC Peripheral Library Supports...","GUID-C04D97AB-D6E0-4CF5-9A80-CA64E36B6199.html@@@1 MPLAB\u00AE Harmony Core Library@@@MPLAB Harmony Core library includes help for below modules...","GUID-C0A3888C-CE30-403B-9AE7-042022369538.html@@@1.2.7.4.25 SYS_FS_DirOpen Function@@@SYS_FS_HANDLE SYS_FS_DirOpen ( const char * path ); Open a directory This function opens the requested directory. The volume on which the directory is present should be mounted. Param Description path...","GUID-C1322D50-D28A-4AF1-82D7-15BA0ED96765.html@@@1.2.11.4.14 SYS_TIME_CountToMS Function@@@uint32_t SYS_TIME_CountToMS ( uint32_t count ) Converts a counter value to time interval in milliseconds. This function converts a counter value to time interval in milliseconds, based on the hardware...","GUID-C1652CB7-C2F7-4921-818C-AFCEED6AADA3.html@@@1.2.1.3 SYS_MEDIA_EVENT_HANDLER Typedef@@@typedef void (* SYS_MEDIA_EVENT_HANDLER) ( SYS_MEDIA_BLOCK_EVENT event, SYS_MEDIA_BLOCK_COMMAND_HANDLE commandHandle, uintptr_t context ); Pointer to the Media Event Handler function. This data type...","GUID-C171E575-0A6B-4403-BBE1-4B593649E038.html@@@1.1.8.4.11 DRV_SPI_TransferStatusGet Function@@@DRV_SPI_TRANSFER_EVENT DRV_SPI_TransferStatusGet ( const DRV_SPI_TRANSFER_HANDLE transferHandle) Returns transfer add request status. This function can be used to poll the status of the queued...","GUID-C1E2C64B-0256-4FCA-AF76-172C90385781.html@@@1.2.4.4.14 SYS_CONSOLE_Message Function@@@void SYS_CONSOLE_Message ( const SYS_CONSOLE_HANDLE handle, const char *message) Prints a message to the console This function prints a message to the console SYS_CONSOLE_Initialize must have returned...","GUID-C2260882-60A1-4B82-8500-CF9284CEA0AF.html@@@1.1.8.4.4 DRV_SPI_Close Function@@@void DRV_SPI_Close ( DRV_Handle handle ) Closes an opened-instance of the SPI driver. This routine closes an opened-instance of the SPI driver, invalidating the handle. User should make sure that...","GUID-C229D91A-4D07-4CCB-9521-11B574AC2007.html@@@1.3.2.4.1 I2C_BB_Initialize Function@@@void I2C_BB_Initialize ( void ) Initializes the instance of the I2C bit bang library. This function initializes the given instance of the I2C bit bang as configured by the user from the MHC. None...","GUID-C27C1233-4756-42B3-A2BF-BDCCC1251846.html@@@1.1.13.1.1 How the Library Works@@@The MX25L driver library is a single-client, single-instance based driver interface. Abstraction Model The MX25L driver interface provides read, write and Erase functions that abstract out the...","GUID-C31A72D0-6E22-4F3B-BA96-8B71473F16FE.html@@@1.1.7.4.5 DRV_SDSPI_Tasks Function@@@void DRV_SDSPI_Tasks ( SYS_MODULE_OBJ object ) Maintains the driver&apos;s state machine. This routine is used to maintain the driver&apos;s internal state machine. For synchronous driver, the task routine...","GUID-C371060E-60A1-40CC-AE70-B27AE8C15B32.html@@@1.1.6.4.15 DRV_SDMMC_COMMAND_STATUS Enum@@@typedef enum { /* Done OK and ready */ DRV_SDMMC_COMMAND_COMPLETED = SYS_MEDIA_COMMAND_COMPLETED, /* Scheduled but not started */ DRV_SDMMC_COMMAND_QUEUED = SYS_MEDIA_COMMAND_QUEUED, /* Currently...","GUID-C3E440D0-2F73-4BA9-874A-A08D52EA87E3.html@@@1.2.7.4.3 SYS_FS_Mount Function@@@SYS_FS_RESULT SYS_FS_Mount ( const char *devName, const char *mountName, SYS_FS_FILE_SYSTEM_TYPE filesystemtype, unsigned long mountflags, const void *data ); Mounts the disk/volume with specified...","GUID-C4347A04-B554-485F-9162-7801140982A7.html@@@1.2.1.17 SYS_MODULE_INITIALIZE_ROUTINE Typedef@@@typedef SYS_MODULE_OBJ (* SYS_MODULE_INITIALIZE_ROUTINE) ( const SYS_MODULE_INDEX index, Pointer to a routine that initializes a system module (driver, library, or system-maintained application). This...","GUID-C43ABFE3-58B7-4A30-840E-B2BBCCCDF33D.html@@@1.2.7.4.27 SYS_FS_DirRead Function@@@SYS_FS_RESULT SYS_FS_DirRead ( SYS_FS_HANDLE handle, SYS_FS_FSTAT *stat ); Reads the files and directories of the specified directory. This function reads the files and directories specified in the...","GUID-C458B680-BC60-4AC1-9DDA-9387192366CB.html@@@1.2.4.4.4 SYS_CONSOLE_HandleGet Function@@@SYS_CONSOLE_HANDLE SYS_CONSOLE_HandleGet ( const SYS_MODULE_INDEX index) Returns a handle to the requested console instance This function returns a handle to the requested console instance. The...","GUID-C45D3957-41A4-43F5-8287-8EB57F20F46F.html@@@1.1.9.4.21 DRV_USART_ERROR Enum@@@This structure is implementation specific. It is fully defined in drv_usart_definitions.h. Defines the different types of errors for USART driver This data type defines the different types of errors...","GUID-C4DCEBA3-EE0D-436C-B72F-D93475C26968.html@@@1.1.6.4.13 DRV_SDMMC_COMMAND_HANDLE Typedef@@@typedef SYS_MEDIA_BLOCK_COMMAND_HANDLE DRV_SDMMC_COMMAND_HANDLE; Handle identifying commands queued in the driver. A command handle is returned by a call to the Read or Write functions. This handle...","GUID-C5423212-D6E4-4C4A-A935-BAE0D8E971D9.html@@@1.2.7.4.12 SYS_FS_FileSize Function@@@int32_t SYS_FS_FileSize ( SYS_FS_HANDLE handle ); Returns the size of the file in bytes. This function returns the size of the file as pointed by the handle. A valid file handle must be obtained...","GUID-C59F079A-EB80-4DFE-9FD1-B83486B907CE.html@@@1.1.3.4.24 DRV_MEMORY_Read Function@@@void DRV_MEMORY_Read ( const DRV_HANDLE handle, SYS_MEDIA_BLOCK_COMMAND_HANDLE* commandHandle, void * sourceBuffer, uint32_t blockStart, uint32_t nBlock ) Interface to the file system to perform a...","GUID-C5D32B8C-8006-47DC-82E4-380055D681F3.html@@@1.3.1.4.6 EMU_EEPROM_PageWrite Function@@@EMU_EEPROM_STATUS EMU_EEPROM_PageWrite ( const uint8_t logical_page, const uint8_t * const data ); Writes a page of data to an emulated EEPROM memory page. Writes an emulated EEPROM page of data to...","GUID-C5E394FE-B52D-4484-85BD-9C42D1CCB540.html@@@1.2.11.4.18 SYS_TIME_TimerReload Function@@@SYS_TIME_RESULT SYS_TIME_TimerReload ( SYS_TIME_HANDLE handle, uint32_t count, uint32_t period, SYS_TIME_CALLBACK callback, uintptr_t context, SYS_TIME_CALLBACK_TYPE type ); Reloads (or reinitializes)...","GUID-C5F288D2-FAAA-425F-8BED-9D9A5A81474C.html@@@1.1.6.4.4 DRV_SDMMC_Open Function@@@DRV_HANDLE DRV_SDMMC_Open ( const SYS_MODULE_INDEX drvIndex, const DRV_IO_INTENT intent ); Opens the specified SD Card driver instance and returns a handle to it. This routine opens the specified...","GUID-C620CB5A-6247-420E-A260-5350F62D70F7.html@@@1.2.11.4.17 SYS_TIME_TimerCreate Function@@@SYS_TIME_HANDLE SYS_TIME_TimerCreate ( uint32_t count, uint32_t period, SYS_TIME_CALLBACK callback, uintptr_t context, SYS_TIME_CALLBACK_TYPE type ); Creates and initializes a new 32-bit software...","GUID-C649F093-C4DE-429B-A6FF-30C56927D08D.html@@@1.1.2.4.2 DRV_I2C_Status Function@@@SYS_STATUS DRV_I2C_Status ( const SYS_MODULE_OBJ object) Gets the current status of the I2C driver module. This routine provides the current status of the I2C driver module. Function...","GUID-C64CA1F5-4C6A-4C51-A7A4-BF9836636D5C.html@@@1.1.9.4.18 DRV_USART_BUFFER_HANDLE_INVALID Macro@@@#define DRV_USART_BUFFER_HANDLE_INVALID ((DRV_USART_BUFFER_HANDLE)(- 1 )) Definition of an invalid buffer handle. This is the definition of an invalid buffer handle. An invalid buffer handle is...","GUID-C6F5D125-631C-4D09-BD49-2A88CF38D39E.html@@@1.1.9.4.19 DRV_USART_BUFFER_EVENT Enum@@@typedef enum { /* The buffer is pending to be serviced */ DRV_USART_BUFFER_EVENT_PENDING = 0 , /* All data from or to the buffer was transferred successfully. */ DRV_USART_BUFFER_EVENT_COMPLETE = 1...","GUID-C78B1D72-8668-4502-827D-78DE59A2C8F6.html@@@1.1.6.4.2 DRV_SDMMC_Status Function@@@SYS_STATUS DRV_SDMMC_Status ( SYS_MODULE_OBJ object ); Provides the current status of the SD Card driver module. This routine provides the current status of the SD Card driver module. Function...","GUID-C79A452D-863F-400E-9215-8328F434341F.html@@@1.2.2.7 SYS_CACHE_DisableDCache Function@@@void SYS_CACHE_DisableDCache ( void ) Disable Data Cache. Turns off Data Cache. None. None. None. SYS_CACHE_DisableDCache(); None...","GUID-C7D1D845-C908-4F60-9BCF-56C32DBEB467.html@@@1.2.11.4.27 SYS_TIME_HANDLE_INVALID Macro@@@#define SYS_TIME_HANDLE_INVALID ((SYS_TIME_HANDLE) (- 1 )) Invalid handle value to a software timer instance. Defines the invalid handle value to a timer instance. Do not rely on the actual value as...","GUID-C8072D14-9165-491A-9742-322455F3C27C.html@@@1.1.10.1.4.2 DRV_AT24_Status Function@@@SYS_STATUS DRV_AT24_Status ( const SYS_MODULE_INDEX drvIndex ) Gets the current status of the AT24 driver module. This routine provides the current status of the AT24 driver module. Function...","GUID-C8718125-6D8E-466C-A17B-8DF5DEC4DCBA.html@@@1.1.4.4.12 DRV_NAND_FLASH_SkipBlock_BlockCheck Function@@@bool DRV_NAND_FLASH_SkipBlock_BlockCheck ( const DRV_HANDLE handle, uint16_t blockNum) Checks whether NAND Flash block is bad or good. This routine returns false if the given block of NAND Flash...","GUID-C89A507B-B9DA-4537-971D-8A44FC2D028E.html@@@1.2.11.4.28 SYS_TIME_CALLBACK_TYPE Enum@@@typedef enum { // Requesting a single (one time) callback. SYS_TIME_SINGLE, // Requesting a periodically repeating callback. SYS_TIME_PERIODIC } SYS_TIME_CALLBACK_TYPE; Identifies the type of callback...","GUID-C8EFF72A-1BBB-416E-BF89-EEA2B23EB27D.html@@@1.2.4 Console System Service@@@The Console System Service is a middleware library that is part of a layered software architecture. The purpose of this software layering is to allow each module to provide a consistent interface to...","GUID-C8F255A5-C992-465D-A4B5-B62A2B89421F.html@@@1.1.3.4.11 DRV_MEMORY_SyncWrite Function@@@bool DRV_MEMORY_SyncWrite ( const DRV_HANDLE handle, void *sourceBuffer, uint32_t blockStart, uint32_t nBlock ); Writes data for the specified number of memory blocks in Synchronous mode. This...","GUID-C99FBA78-A80D-40EE-B863-E40151E30C73.html@@@1.1.2.4.11 DRV_I2C_TransferEventHandlerSet Function@@@void DRV_I2C_TransferEventHandlerSet ( const DRV_HANDLE handle, const DRV_I2C_TRANSFER_EVENT_HANDLER eventHandler, const uintptr_t context ) Allows a client to identify a transfer event handling...","GUID-CA73D5E6-E69E-4ED9-8BAE-47DF7EBB82AB.html@@@1.3.1.2 Using The Library@@@The Emulated EEPROM library builds on top of NVM or EFC PLIB and provides uniform interface to read/write to the Emulated EEPROM memory space. The library provides APIs to read and write data from/to...","GUID-CB25A98A-1CED-45A3-B538-027D927C97E0.html@@@1.2.11.4.29 SYS_TIME_CALLBACK Typedef@@@typedef void (*SYS_TIME_CALLBACK ) ( uintptr_t context ); Pointer to a time system service callback function. This data type defines a pointer to a time service callback function, thus defining the...","GUID-CC66618A-5A79-4589-AACF-DE3D62A5927A.html@@@1.2.4.4.20 SYS_CONSOLE_DEVICE Enum@@@typedef enum { SYS_CONSOLE_DEV_USART, SYS_CONSOLE_DEV_USB_CDC, SYS_CONSOLE_DEV_MAX, } SYS_CONSOLE_DEVICE; Lists the available console devices. This enumeration lists all of the available console...","GUID-CC9DEE82-C59D-409F-81BD-347420DBAB94.html@@@1.2.7.4.43 SYS_FS_DriveSectorGet Function@@@SYS_FS_RESULT SYS_FS_DriveSectorGet ( const char * path, uint32_t *totalSectors, uint32_t *freeSectors ); Obtains total number of sectors and number of free sectors for the specified drive. Function...","GUID-CD039798-442A-45FD-8AE6-109618785CDE.html@@@1.1.2.4.4 DRV_I2C_Close Function@@@void DRV_I2C_Close ( const DRV_HANDLE handle ) Closes an opened-instance of the I2C driver. This routine closes an opened-instance of the I2C driver, invalidating the handle. Any buffers in the driver...","GUID-CDE5A5C3-D8BA-43BB-9287-A1087E688C15.html@@@1.1.12.1.4.4 DRV_AT25DF_Close Function@@@void DRV_AT25DF_Close ( const DRV_Handle handle ) Closes the opened-instance of the AT25DF driver. This routine closes opened-instance of the AT25DF driver, invalidating the handle. A new handle must...","GUID-CE04AD55-D265-459E-AAD4-E2EC9FE3938F.html@@@1.1.2.4.20 DRV_I2C_TRANSFER_EVENT_HANDLER Typedef@@@typedef void (*DRV_I2C_TRANSFER_EVENT_HANDLER )( DRV_I2C_TRANSFER_EVENT event, DRV_I2C_TRANSFER_HANDLE transferHandle, uintptr_t context ); Pointer to a I2C Driver Transfer Event handler function This...","GUID-CE8A08B3-44E0-4442-8BC5-B78123047EB6.html@@@1.2.11.4.15 SYS_TIME_USToCount Function@@@uint32_t SYS_TIME_USToCount ( uint32_t us ) Convert the given time interval in microseconds to an equivalent counter value. This function converts a given time interval (measured in microseconds) to...","GUID-CF08AF4F-D730-496F-A968-50434978EBE7.html@@@1.1.11.1.1 How the Library Works@@@The AT25 driver library is a single-client, single-instance based driver interface. Abstraction Model The AT25 driver interface provides read and write functions that abstract out the internal...","GUID-CF0C439F-1F3C-4557-A0D6-08E15536CDAD.html@@@1.3.1.4.10 EMU_EEPROM_STATUS Enum@@@typedef enum { /* Operation is successful or EEPROM Emulator is successfully initialized. */ EMU_EEPROM_STATUS_OK, /* No EEPROM section has been allocated in the device */...","GUID-CF9D8C02-CDCC-4109-98A9-596F8B97FA6E.html@@@1.1.7.4.11 DRV_SDSPI_IsWriteProtected Function@@@bool DRV_SDSPI_IsWriteProtected ( const DRV_HANDLE handle ) Returns the write protect status of the SD Card. This function returns true if the SD Card is write protected otherwise it returns false...","GUID-CFDB12EA-C18C-4C53-A42B-5E0419E69632.html@@@1.2.7.4.58 SYS_FS_TIME Union@@@typedef union { struct discreteTime { /* Second / 2 (0..29) */ unsigned second: 5 ; /* Minute (0..59) */ unsigned minute: 6 ; /* Hour (0..23) */ unsigned hour: 5 ; /* Day in month(1..31) */ unsigned...","GUID-D11F782D-EA66-4244-8C49-B870CB8A8954.html@@@1.1.7.4.10 DRV_SDSPI_IsAttached Function@@@bool DRV_SDSPI_IsAttached ( const DRV_HANDLE handle ) Returns the physical attach status of the SD Card. This function returns the physical attach status of the SD Card. The DRV_SDSPI_Initialize...","GUID-D15D1321-065D-4EA7-A00C-D277A8A66F8D.html@@@1.1.6.4 Library Interface@@@SDMMC driver library provides the following interfaces: Functions Name Description DRV_SDMMC_Initialize Initializes the SD Card driver DRV_SDMMC_Status Provides the current status of the SD Card...","GUID-D34C151E-F128-4431-B0B3-6992EDD44D8F.html@@@1.2.7.4.21 SYS_FS_FileTruncate Function@@@SYS_FS_RESULT SYS_FS_FileTruncate ( SYS_FS_HANDLE handle ); Truncates a file This function truncates the file size to the current file read/write pointer. This function has no effect if the file...","GUID-D4256706-715F-48F4-9870-30C2A2F834E7.html@@@1.1.8.4.19 DRV_SPI_CLOCK_PHASE Enum@@@typedef enum { /* Input data is valid on clock trailing edge and output data is ready on leading edge */ DRV_SPI_CLOCK_PHASE_VALID_TRAILING_EDGE, /* Input data is valid on clock leading edge and...","GUID-D4834F35-FAA3-48E7-BBFB-694C9BA6476E.html@@@1.1.13.2.4.10 DRV_SST26_Read Function@@@bool DRV_SST26_Read ( const DRV_HANDLE handle, void *rx_data, uint32_t rx_data_length, uint32_t address ); Reads n bytes of data from the specified start address of flash memory. This function...","GUID-D5093933-5E4E-42E6-BB97-C88CC3D15DD6.html@@@1.4.4.21 OSAL_MUTEX_DECLARE Macro@@@#define OSAL_MUTEX_DECLARE (mutexID) OSAL_MUTEX_HANDLE_TYPE mutexID Declares an OSAL mutex. This function declares a data item of type OSAL_MUTEX_HANDLE_TYPE. None...","GUID-D51F6D7B-122E-499A-A41C-D2DCC14B13E5.html@@@1.2.1.6 SYS_MEDIA_STATUS Enum@@@typedef enum { /* Media is detached */ SYS_MEDIA_DETACHED, /* Media is attached */ SYS_MEDIA_ATTACHED } SYS_MEDIA_STATUS; The state of media. This enumeration states if the media is attached or not...","GUID-D545E088-0717-420C-AD1D-F025CF984390.html@@@1.1.5.1.1 How the Library Works@@@The SST39VF040 driver library is a single-client, single-instance based driver interface. Abstraction Model The SST39VF040 driver interface provides read, write and erase functions that abstract out...","GUID-D590C514-65D1-4433-A1AE-0BE56EDF6E51.html@@@1.1.4.4.17 DRV_NAND_FLASH_SkipBlock_PageRead Function@@@bool DRV_NAND_FLASH_SkipBlock_PageRead ( const DRV_HANDLE handle, uint16_t blockNum, uint16_t pageNum, uint8_t *data, uint8_t *spare, bool disableBlockCheck ); Reads the data and/or the spare area of...","GUID-D5DA8FED-9161-4241-AC90-02C7928C8DEB.html@@@1.2.7.4.89 SYS_FS_MEDIA_EVENT_HANDLER Typedef@@@typedef SYS_MEDIA_EVENT_HANDLER SYS_FS_MEDIA_EVENT_HANDLER; Pointer to the Media Event Handler function. This data type defines the required function signature for the media event handling callback...","GUID-D63F3805-23E9-466F-9E1C-EE6F521BF722.html@@@1.2.6.3 SYS_DMA_ChannelIsBusy Function@@@bool SYS_DMA_ChannelIsBusy (SYS_DMA_CHANNEL channel) Returns the busy status of a specific DMA Channel. This function returns the busy status of the DMA channel. DMA channel will be busy if any...","GUID-D64948C5-0865-4700-974A-6EFC4BA20290.html@@@1.1.13.2.4.1 DRV_SST26_Initialize Function@@@SYS_MODULE_OBJ DRV_SST26_Initialize ( const SYS_MODULE_INDEX drvIndex, const SYS_MODULE_INIT * const init ); Initializes the SST26 Driver This routine initializes the SST26 driver making it ready for...","GUID-D731134D-102A-429A-B118-D5D578AEDF2D.html@@@1.1.10.1.4.9 DRV_AT24_GeometryGet Function@@@bool DRV_AT24_GeometryGet ( const DRV_HANDLE handle, DRV_AT24_GEOMETRY *geometry) Returns the geometry of the device. This API gives the following geometrical details of the DRV_AT24 Flash: Number of...","GUID-D75AEB40-83E2-4649-B704-AE0FABABA920.html@@@1.1.9.4.3 DRV_USART_Open Function@@@DRV_HANDLE DRV_USART_Open ( const SYS_MODULE_INDEX index, const DRV_IO_INTENT ioIntent ) Opens the specified USART driver instance and returns a handle to it. This routine opens the specified USART...","GUID-D7B2A07E-F61A-4374-9DFB-2B2335B550E9.html@@@1.1.5.1.4.4 DRV_SST39_Status Function@@@SYS_STATUS DRV_SST39_Status ( const SYS_MODULE_INDEX drvIndex ) Gets the current status of the SST39 driver module. This routine provides the current status of the SST39 driver module. Function...","GUID-D7E32A8F-DC21-4E8D-ABE6-6AEE3FA0C89C.html@@@1.2.7.4.14 SYS_FS_FileNameGet Function@@@bool SYS_FS_FileNameGet ( SYS_FS_HANDLE handle, uint8_t* cName, uint16_t wLen ); Reads the file name. This function reads the file name of a file that is already open. The file handle referenced by...","GUID-D84144C8-6208-429C-99C3-0F280E644638.html@@@1.2.7.4.53 SYS_FS_ERROR Enum@@@typedef enum { /* Success */ SYS_FS_ERROR_OK = 0 , /* (1) A hard error occurred in the low level disk I/O layer */ SYS_FS_ERROR_DISK_ERR, /* (2) Assertion failed */ SYS_FS_ERROR_INT_ERR, /* (3) The...","GUID-D88B05BC-0C28-4155-9CA2-21B6CC68705D.html@@@1.2.8.7 SYS_INT_SourceRestore Function@@@void SYS_INT_SourceRestore ( INT_SOURCE source, bool status ) Restores an interrupt vector to the state specified in the parameter. This function restores the interrupt vector to the state specified...","GUID-D904086C-E292-4B0F-ADB3-0633EAD4AB9B.html@@@1.2.7.4.76 SYS_FS_MEDIA_HANDLE Typedef@@@typedef uintptr_t SYS_FS_MEDIA_HANDLE; Handle identifying the media registered with the media manager. The media drivers register the media services with the media manager by calling the...","GUID-D90DF2C4-0C7E-4406-B84B-8DB9179CC0F0.html@@@1.4.4.8 OSAL_CRIT_Leave Function@@@void OSAL_CRIT_Leave(OSAL_CRIT_TYPE severity, OSAL_CRITSECT_DATA_TYPE status) Leaves a critical section with the specified severity level. This function leaves a critical section of code. It is...","GUID-D90F34DE-49C2-4D1F-9762-5555B6F2F06C.html@@@1.3.1.4.2 EMU_EEPROM_StatusGet Function@@@EMU_EEPROM_STATUS EMU_EEPROM_StatusGet ( void ) Gets the current status of the EEPROM Emulator library. This routine provides the status of the EEPROM Emulator library. Function EMU_EEPROM_Initialize...","GUID-D91142BC-8060-4E5E-A75A-F92BD776160A.html@@@1.2.7.4.30 SYS_FS_DirectoryMake Function@@@SYS_FS_RESULT SYS_FS_DirectoryMake ( const char * path ); Creates a directory. This function creates a new directory as per the specified path. The disk has to be mounted before a directory could be...","GUID-DA048541-5D9C-4523-AAA7-A4BCF54C0B2D.html@@@1.2.7.1 How the Library Works@@@The MPLAB Harmony File System Service (SYS_FS) provides embedded application developers with a file system framework for retrieving and storing data from various media. The File System Service...","GUID-DAC3E906-7325-456B-A67A-B5F9FD901AC3.html@@@1.2.7.4.67 SYS_FS_MEDIA_MANAGER_VolumePropertyGet Function@@@bool SYS_FS_MEDIA_MANAGER_VolumePropertyGet ( const char *devName SYS_FS_VOLUME_PROPERTY *str ); Gets the volume property. This function gets the property of the volume. This function is used by...","GUID-DB773A68-76AC-4900-8C7C-3AC9C38BE0BD.html@@@1.2.6 Direct Memory Access (DMA) System Service@@@The Direct Memory Access (DMA) controller is a bus master module that is useful for data transfers between different peripherals without intervention from the CPU. The source and destination of a DMA...","GUID-DBD152A0-8CC4-47B1-ACFC-AFCC60233376.html@@@1.1.9.4.8 DRV_USART_WriteBufferAdd Function@@@void DRV_USART_WriteBufferAdd ( const DRV_HANDLE handle, void * buffer, size_t size, DRV_USART_BUFFER_HANDLE* bufferHandle ); Queues a write operation. This function schedules a non-blocking write...","GUID-DCAFBDDA-42E1-48B2-B29E-AEB0A54E534A.html@@@1.4.4.11 OSAL_MUTEX_Lock Function@@@OSAL_RESULT OSAL_MUTEX_Lock (OSAL_MUTEX_HANDLE_TYPE* mutexID, uint16_t waitMS) Locks a mutex. This function locks a mutex, waiting for the specified time-out. If it cannot be obtained or the time-out...","GUID-DCC39687-E45F-46D1-B489-0AFC1262B40B.html@@@1.1.11.1.4.2 DRV_AT25_Status Function@@@SYS_STATUS DRV_AT25_Status ( const SYS_MODULE_INDEX drvIndex ) Gets the current status of the AT25 driver module. This routine provides the current status of the AT25 driver module. Function...","GUID-DD0C5C28-401A-4FD6-9BA8-1EDD0812FE8C.html@@@1.1.7.4.7 DRV_SDSPI_AsyncRead Function@@@void DRV_SDSPI_AsyncRead ( const DRV_HANDLE handle, DRV_SDSPI_COMMAND_HANDLE* commandHandle, void * targetBuffer, uint32_t blockStart, uint32_t nBlocks ) Reads blocks of data from the specified block...","GUID-DD1D5912-45D3-4227-8720-01869BD15139.html@@@1.2.5.4.5 SYS_DEBUG_Redirect Function@@@bool SYS_DEBUG_Redirect ( const SYS_MODULE_INDEX index) Allows re-direction of debug system service to another console instance This function re-directs calls to the Debug Service APIs to a different...","GUID-DDB3860A-E629-4991-9663-6A0C5EA37EC5.html@@@1.2.9.3 SYS_PORT_PinLatchRead Function@@@bool SYS_PORT_PinLatchRead ( SYS_PORT_PIN pin ) Read the value driven on the selected pin. This function reads the data driven on the selected I/O line/pin. Whatever data is written/driven on I/O line...","GUID-DDCADB94-22A8-4DE1-9089-322E15134590.html@@@1.1.10.1.4.13 DRV_AT24_EVENT_HANDLER Typedef@@@typedef void (*DRV_AT24_EVENT_HANDLER )( DRV_AT24_TRANSFER_STATUS event, uintptr_t context ); Pointer to a AT24 Driver Event handler function This data type defines the required function signature for...","GUID-DE45ED3E-ADA9-4B77-BBF7-27C3CE42186E.html@@@1.1.13.3.4.9 DRV_W25_ChipErase Function@@@bool DRV_W25_ChipErase ( const DRV_HANDLE handle ); Erase entire flash memory. This function schedules a non-blocking chip erase operation of flash memory. The requesting client should call...","GUID-DE47A3D3-C32A-4ED6-A2B7-A5D16DBAEAD0.html@@@1.2.7.4.77 SYS_FS_MEDIA_HANDLE_INVALID Macro@@@#define SYS_FS_MEDIA_HANDLE_INVALID DRV_HANDLE_INVALID Defines the invalid media handle. This value defines invalid media handle. It is returned when the media registration is not successful. None...","GUID-DE7E790A-ADA1-45B1-83C7-C072A270C6B1.html@@@1.2.7.4.24 SYS_FS_FileTestError Function@@@bool SYS_FS_FileTestError ( SYS_FS_HANDLE handle ); Checks for errors in the file. This function checks whether or not file has any errors. A valid file handle must be obtained before passing to the...","GUID-DE87A672-4D73-487A-A09E-81F7A3547EE1.html@@@1.2.1.13 SYS_MODULE_OBJ_INVALID Macro@@@#define SYS_MODULE_OBJ_INVALID ((SYS_MODULE_OBJ) - 1 ) Object handle value returned if unable to initialize the requested instance of a system module. This is the object handle value returned if...","GUID-DECFF1FB-9C12-4E95-8C07-6244681BB99A.html@@@1.1.11.1.4.7 DRV_AT25_PageWrite Function@@@bool DRV_AT25_PageWrite ( const DRV_HANDLE handle, void *txData, uint32_t address) Writes one page of data starting at the specified address. This function schedules a non-blocking write operation for...","GUID-DF3F607C-94A8-4128-BD33-67F4EA20CDAE.html@@@1.2.8.4 SYS_INT_Restore Function@@@void SYS_INT_Restore ( bool state ) Restores the interrupt controller to the state specified in the parameter. This function restores the interrupt controller to the state specified in the parameters...","GUID-DF41BC8C-CD07-476D-A7FC-B6FEE97C373E.html@@@1.1.13.2.4.9 DRV_SST26_ChipErase Function@@@bool DRV_SST26_ChipErase ( const DRV_HANDLE handle ); Erase entire flash memory. This function schedules a non-blocking chip erase operation of flash memory. The requesting client should call...","GUID-DFB9A1FE-5BBB-4A10-A4B0-430BA7B9AF94.html@@@1.1.1 Common Driver Library@@@Common driver library provides the following data types and constants that are shared and common to all drivers Data types and constants Name Type Description DRV_CLIENT_STATUS Enum Identifies the...","GUID-E082A9CA-FC12-4A79-8A83-E0902DF83721.html@@@1.3.1.3 Configuring The Library@@@Emulated EEPROM Library should be configured via MHC. The following figures show the MHC configuration window for Emulated EEPROM and brief description. Emulated EEPROM in Project Gaph Emulated EEPROM...","GUID-E09A5542-C013-412A-8E0A-BB14DF4B75DC.html@@@1.1.2.4.8 DRV_I2C_ForcedWriteTransferAdd Function@@@void DRV_I2C_ForcedWriteTransferAdd ( const DRV_HANDLE handle, const uint16_t address, void * const buffer, const size_t size, DRV_I2C_TRANSFER_HANDLE * const transferHandle ) Queues a write...","GUID-E11AD2F4-E78A-41F1-A573-10270C7796D7.html@@@1.1.3.4.4 DRV_MEMORY_Open Function@@@DRV_HANDLE DRV_MEMORY_Open ( const SYS_MODULE_INDEX drvIndex, const DRV_IO_INTENT ioIntent ); Opens the specified Memory driver instance and returns a handle to it This routine opens the specified...","GUID-E18B0923-4286-4E08-A2EB-9A482E0063AE.html@@@1.1.3.4 Library Interface@@@Memory driver library provides the following interfaces: Functions Name Description DRV_MEMORY_Initialize Initializes the Memory instance for the specified driver index DRV_MEMORY_Status Gets the...","GUID-E18B22E2-C723-4978-8396-6D7B0BF705FB.html@@@1.4.4.7 OSAL_CRIT_Enter Function@@@OSAL_CRITSECT_DATA_TYPE OSAL_CRIT_Enter (OSAL_CRIT_TYPE severity) Enters a critical section with the specified severity level. This function enters a critical section of code. It is assumed that the...","GUID-E19AB663-B620-431F-988F-64E339B3010C.html@@@1.2.7.4.17 SYS_FS_FileStringGet Function@@@SYS_FS_RESULT SYS_FS_FileStringGet ( SYS_FS_HANDLE handle, char * buff, uint32_t len ); Reads a string from the file into a buffer. This function reads a string of specified length from the file into...","GUID-E1F34AEE-713B-4368-BC6B-637E527BFF6B.html@@@1.2.2.13 SYS_CACHE_CleanInvalidateDCache_by_Addr Function@@@void SYS_CACHE_CleanInvalidateDCache_by_Addr (uint32_t *addr, int32_t size) Data Cache Clean and Invalidate by address. Cleans and invalidates Data Cache for the given address. None. Param Description...","GUID-E2071F85-CC9E-434A-BB3C-3D3224AA11D2.html@@@1.1.5.1.4.3 DRV_SST39_Close Function@@@void DRV_SST39_Close ( const DRV_HANDLE handle ) Closes an opened-instance of the SST39 driver. This routine closes an opened-instance of the SST39 driver, invalidating the handle. DRV_SST39_Open must...","GUID-E21F3B3B-3CAA-4C6B-8B66-56BF29565731.html@@@1.2.5.4.6 SYS_DEBUG_ConsoleInstanceGet Function@@@SYS_MODULE_INDEX SYS_DEBUG_ConsoleInstanceGet ( void ) Returns console instance used by debug system service This function returns console instance used by debug system service. None. None...","GUID-E2B7203A-B587-450D-B7C1-2AFB4D061604.html@@@1.1.1.4 DRV_IO_INTENT Enum@@@typedef enum { /* Read */ DRV_IO_INTENT_READ = 1 &lt;&lt; 0 , /* Write */ DRV_IO_INTENT_WRITE = 1 &lt;&lt; 1 , /* Read and Write*/ DRV_IO_INTENT_READWRITE = DRV_IO_INTENT_READ | DRV_IO_INTENT_WRITE, /* The driver...","GUID-E2B876FD-2F03-4FD5-AC31-A091D5760FF9.html@@@1.1.13.3.4.11 DRV_W25_PageWrite Function@@@bool DRV_W25_PageWrite ( const DRV_HANDLE handle, void *tx_data, uint32_t tx_data_length, uint32_t address ); Writes one page of data starting at the specified address. This function schedules a...","GUID-E4466627-D222-4C75-949F-360F4DF69FAB.html@@@1.1.8.4.20 DRV_SPI_CLOCK_POLARITY Enum@@@typedef enum { DRV_SPI_CLOCK_POLARITY_IDLE_LOW, DRV_SPI_CLOCK_POLARITY_IDLE_HIGH }DRV_SPI_CLOCK_POLARITY; Identifies SPI Clock Polarity Options This enumeration identifies possible SPI Clock Polarity...","GUID-E4F5279A-ECF6-4330-B801-8FEDF3AD373D.html@@@1.1.8.4.16 DRV_SPI_TRANSFER_HANDLE_INVALID Macro@@@#define DRV_SPI_TRANSFER_HANDLE_INVALID ((DRV_SPI_TRANSFER_HANDLE)(- 1 )) Definition of an invalid transfer handle. This is the definition of an invalid transfer handle. An invalid transfer handle is...","GUID-E5A3917B-236F-47F9-9F78-41BD64D2D920.html@@@1.4.4.16 OSAL_Name Function@@@const char * OSAL_Name ( void ) Obtains the name of the underlying RTOS. This function returns a const char* to the textual name of the RTOS. The name is a NULL terminated string. None. None. Name of...","GUID-E5D1E930-88E3-47F4-9ECD-EDE02BF9B07D.html@@@1.1.11 SPI EEPROM Drivers@@@This section provides the SPI EEPROM based driver libraries help...","GUID-E63F4C79-2933-4B21-9821-4F97ECD39F25.html@@@1.2.1.7 SYS_MEDIA_COMMAND_STATUS Enum@@@typedef enum { /*Done OK and ready */ SYS_MEDIA_COMMAND_COMPLETED = 0 , /*Scheduled but not started */ SYS_MEDIA_COMMAND_QUEUED = 1 , /*Currently being in transfer */ SYS_MEDIA_COMMAND_IN_PROGRESS = 2...","GUID-E6644E02-AFFF-4E4A-9E5C-FD76D8FC49F9.html@@@1.1.2.4.17 DRV_I2C_TRANSFER_HANDLE Typedef@@@typedef uintptr_t DRV_I2C_TRANSFER_HANDLE; Handle identifying a read, write or write followed by read transfer passed to the driver. A transfer handle value is returned by a call to the...","GUID-E71D9730-F3C8-4F9F-819A-B7B27C8E137C.html@@@1.3.2.4.11 I2CBB_TRANSFER_SETUP Struct@@@typedef struct { /* I2C Clock Speed */ uint32_t clkSpeed; } I2CBB_TRANSFER_SETUP; I2C Bit Bang Transfer Setup Data Structure This data structure defines the I2C Bit Bang Transfer Setup Data None...","GUID-E750E768-6A15-4F9B-9C11-ED2C8D758455.html@@@1.1.10.1.2 Using The Library@@@The AT24 driver provides non-blocking API&apos;s to read, write AT24 EEPROM. The AT24 driver can be used in following ways: To perform reads and writes from/to any EEPROM memory address, with number of...","GUID-E77EF3AE-382C-4616-B57C-D573748C63A2.html@@@1.2.7.4.57 SYS_FS_FSTAT Struct@@@typedef struct { /* File size */ uint32_t fsize; /* Last modified date */ uint16_t fdate; /* Last modified time */ uint16_t ftime; /* Attribute */ uint8_t fattrib; /* Alternate/Short file name (8.3...","GUID-E79EE776-77FB-4E0D-B49A-EA524C6CF1B6.html@@@1.1.8.4.22 DRV_SPI_CS_POLARITY Enum@@@typedef enum { DRV_SPI_CS_POLARITY_ACTIVE_LOW, DRV_SPI_CS_POLARITY_ACTIVE_HIGH }DRV_SPI_CS_POLARITY; Identifies SPI Chip Select Polarity Options This enumeration identifies possible SPI Chip Select...","GUID-E7E39F47-6676-4268-B721-B350E605401A.html@@@1.2.8.3 SYS_INT_IsEnabled Function@@@bool SYS_INT_IsEnabled ( void ) Returns the interrupt controller&apos;s global enable/disable status. This function returns global interrupt enable status. None. None. - true - Global Interrupt is enabled...","GUID-E830242B-F60A-4E37-99CA-BB6261C77502.html@@@1.2.7.4.83 SYS_FS_MEDIA_COMMAND_STATUS Enum@@@typedef enum { /*Done OK and ready */ SYS_FS_MEDIA_COMMAND_COMPLETED = SYS_MEDIA_COMMAND_COMPLETED, /*Scheduled but not started */ SYS_FS_MEDIA_COMMAND_QUEUED = SYS_MEDIA_COMMAND_QUEUED, /*Currently...","GUID-E8F31262-EEB7-495E-8292-1CE7D6BED8F6.html@@@1.2.7.4.7 SYS_FS_FileClose Function@@@SYS_FS_RESULT SYS_FS_FileClose ( SYS_FS_HANDLE handle ); Closes a file. This function closes an opened file. Before closing the file it performs a force sync to write any pending data to the file. A...","GUID-E971A136-E792-4F48-9664-C4B0612DD46D.html@@@1.2.7.4.51 SYS_FS_FORMAT_PARAM Struct@@@typedef struct { /* Specifies combination of FAT type flags, SYS_FS_FORMAT_XXX. * These flags specify which FAT type to be created on the volume. * If two or more types are specified, one out of them...","GUID-E9788681-9000-4E53-A353-6D8881F7A7D5.html@@@1.2.5.2 Using The Library@@@When the Debug System Service is initialized, it sets the global system error level to the specified level. This level determines the threshold at which debug and error messages are sent to the...","GUID-E9965026-96F1-4634-9193-8863D21C1B8F.html@@@1.1.9.4.17 DRV_USART_BUFFER_HANDLE Typedef@@@typedef uintptr_t DRV_USART_BUFFER_HANDLE; Handle identifying a read or write buffer passed to the driver. A buffer handle value is returned by a call to the DRV_USART_ReadBufferAdd or...","GUID-E9EE1AF3-0468-48C4-80E2-F56FE58D751D.html@@@1.3.2.4.3 I2C_BB_Write Function@@@bool I2C_BB_Write (uint16_t address, uint8_t *pdata, size_t length) Writes data to the slave. This function writes data to a slave on the bus. The function will attempt to write length number of bytes...","GUID-EA1BD8AC-C8F2-4384-BD6E-69E98116CD12.html@@@1.1.4.4.5 DRV_NAND_FLASH_ResetFlash Function@@@bool DRV_NAND_FLASH_ResetFlash ( const DRV_HANDLE handle) Reset the flash device to standby mode. This function schedules a blocking operation for resetting the flash device to standby mode. All the...","GUID-EA5ADDDE-73D5-43CB-B474-0752CA9A1A50.html@@@1.2 System Service Libraries@@@MPLAB Harmony provides system service libraries to support common functionality and manage resources that are shared by multiple drivers, libraries, and other modules. A system service encapsulates...","GUID-EAB93469-EF2D-48D7-AB27-B7E2A6B0A250.html@@@1.1.3.1 How the Library Works@@@The memory driver library is a multi-client, multi-instance buffer queue model based block driver interface. Abstraction Model The Memory driver provides abstraction to communicate with different...","GUID-EABDAE77-7DE7-4019-9DF0-A406B4232341.html@@@1.2.6.7 SYS_DMA_CHANNEL Enum@@@The DMA Channels vary based on device family. Refer to the generated header file for the actual values. This lists the set of channels available for data transfer using DMA. Lists the channels...","GUID-EAC52160-4BCB-47FB-B079-291174FC1B48.html@@@1.1.9.3 Configuring The Library@@@USART Driver Library should be configured via MHC. The following figures show the MHC configuration window for USART driver and brief description. Common User Configuration for all Instances Driver...","GUID-EAE26434-377A-466D-AE23-BE529EE5B9A5.html@@@1.1.2.4.12 DRV_I2C_TransferStatusGet Function@@@DRV_I2C_TRANSFER_EVENT DRV_I2C_TransferStatusGet ( const DRV_I2C_TRANSFER_HANDLE transferHandle ) Returns the status of the write/read/write-read transfer request. This function can be used to poll...","GUID-EB747548-B871-407B-B244-0FF587C704C2.html@@@1.2.11.4.12 SYS_TIME_CounterSet Function@@@void SYS_TIME_CounterSet ( uint32_t count ) Sets the common 32-bit system counter value. Sets the current &quot;live&quot; value of the common 32-bit system counter. The SYS_TIME_Initialize function should have...","GUID-EBC86D7E-991E-4F99-B615-1764B5687E0F.html@@@1.2.7.4.1 SYS_FS_Initialize Function@@@SYS_FS_RESULT SYS_FS_Initialize ( const void * initData ); Initializes the file system abstraction layer (sys_fs layer). This function initializes the abstraction layer (sys_fs layer) and sets up the...","GUID-EBDDC4A6-44E4-4445-A84A-BE298F2B3E13.html@@@1.1.5.1.4.5 DRV_SST39_ReadProductId Function@@@bool DRV_SST39_ReadProductId ( const DRV_HANDLE handle, uint8_t* manufacturer, uint8_t* device ) Reads Manufacturer and Device ID of the SST39 device. This function schedules a blocking operation for...","GUID-EC748BA1-9BAC-4215-A451-951C7AD230DA.html@@@1.1.13.1.4.2 DRV_MX25L_Open Function@@@DRV_HANDLE DRV_MX25L_Open ( const SYS_MODULE_INDEX drvIndex, const DRV_IO_INTENT ioIntent ); Opens the specified MX25L driver instance and returns a handle to it This routine opens the specified MX25L...","GUID-EC85344A-BA42-4455-9AA7-1A082E81D022.html@@@1.2.2.4 SYS_CACHE_DisableICache Function@@@void SYS_CACHE_DisableICache ( void ) Disable Instruction Cache. Turns off Instruction Cache. None. None. None. SYS_CACHE_DisableICache(); None...","GUID-ECC769B5-CCD6-4467-A9A4-1472CB4B2E29.html@@@1.2.7.4.78 SYS_FS_MEDIA_BLOCK_EVENT Enum@@@typedef enum { /* Block operation has been completed successfully. */ SYS_FS_MEDIA_EVENT_BLOCK_COMMAND_COMPLETE = SYS_MEDIA_EVENT_BLOCK_COMMAND_COMPLETE, /* There was an error during the block...","GUID-ECF2920E-DC50-497B-8D2F-318D08D4C97F.html@@@1.2.7.4.86 SYS_FS_MEDIA_MOUNT_DATA Struct@@@typedef struct { /* Media Mount Name */ const char * mountName; /* Media Device Name */ const char * devName; /* Media Type */ SYS_FS_MEDIA_TYPE mediaType; /* File system type on Media */...","GUID-ED13CFBE-FE20-4D83-8330-A69BE679FE4D.html@@@1.2.11.4.6 SYS_TIME_DelayUS Function@@@SYS_TIME_RESULT SYS_TIME_DelayUS ( uint32_t us, SYS_TIME_HANDLE* handle ) This function is used to generate a delay of a given number of microseconds. The function will internally create a single shot...","GUID-ED3C040F-446A-4B35-9429-919E36E107D8.html@@@1.1.1.6 DRV_IO_ISNONBLOCKING Macro@@@#define DRV_IO_ISNONBLOCKING (intent) (intent & DRV_IO_INTENT_NONBLOCKING ) Returns if the I/O intent provided is non-blocking. This macro returns if the I/O intent provided is non-blocking. None...","GUID-ED55865F-5F73-4D1C-A894-6A26F9893190.html@@@1.2.3.4.3 SYS_CMD_DELETE Function@@@bool SYS_CMD_DELETE (SYS_CMD_DEVICE_NODE* pDevNode); Removes CMDIO parameters from the Command Processor System Service console. This function removes CMDIO parameters from the Command Processor...","GUID-EDA9A289-D4F9-4DD5-A12C-37D0B9FAEDB3.html@@@1.1.10.1.4.11 DRV_AT24_TRANSFER_STATUS Enum@@@typedef enum { /* Transfer is being processed */ DRV_AT24_TRANSFER_STATUS_BUSY, /* Transfer is successfully completed */ DRV_AT24_TRANSFER_STATUS_COMPLETED, /* Transfer had error */...","GUID-EDAB3999-3E03-4C0B-94B6-066DE78EE636.html@@@1.2.3.4.6 SYS_CMD_Tasks Function@@@bool SYS_CMD_Tasks ( void ) Maintains the Command Processor System Service&apos;s internal state machine. This function is used to maintain the Command Processor System Service internal state machine...","GUID-EE2B1E74-FD6E-4E67-B829-146AA4C02001.html@@@1.2.7.4.36 SYS_FS_FileDirectoryTimeSet Function@@@SYS_FS_RESULT SYS_FS_FileDirectoryTimeSet ( const char * path, SYS_FS_TIME *time ); Sets or changes the time for a file or directory. This function sets or change the time for a file or directory. The...","GUID-EE2EE0D7-5780-4446-95C7-B11743E46F36.html@@@1.1.7.4.8 DRV_SDSPI_SyncWrite Function@@@bool DRV_SDSPI_SyncWrite ( const DRV_HANDLE handle, void * sourceBuffer, uint32_t blockStart, uint32_t nBlock ) Writes blocks of data starting at the specified address of the SD Card. This function...","GUID-EE734734-7914-41BF-8AF2-8275506BBED4.html@@@1.2.11.2 Using The Library@@@The Time System Service provides alarm and delay functionalities to multiple clients. In addition, it also provides APIs to read the counter value which can be used to measure the time period between...","GUID-EF2E2FE9-A7F4-41F0-B5F3-3002C0E9396B.html@@@1.1.3.4.23 DRV_MEMORY_Write Function@@@void DRV_MEMORY_Write ( const DRV_HANDLE handle, SYS_MEDIA_BLOCK_COMMAND_HANDLE* commandHandle, void * sourceBuffer, uint32_t blockStart, uint32_t nBlock ) Interface to the file system to perform a...","GUID-EF5DB136-2E82-44C7-83C5-278C3F5A5816.html@@@1.1.13.2.4.14 DRV_SST26_EventHandlerSet Function@@@void DRV_SST26_EventHandlerSet ( const DRV_HANDLE handle, const DRV_SST26_EVENT_HANDLER eventHandler, const uintptr_t context ) Allows a client to identify a transfer event handling function for the...","GUID-F1244C57-71EF-492B-8104-473C8CECC20F.html@@@1.6 Configuring The Harmony Core Library@@@Harmony Core library component provides common configurations to drivers, system services and middlewares. It also provides options to create application template files for the user to kick-start on...","GUID-F19C5010-4548-446A-80C6-3642EA7ABA79.html@@@1.1.12.1.4.6 DRV_AT25DF_Write Function@@@bool DRV_AT25DF_Write ( const DRV_HANDLE handle, void *txData, uint32_t txDataLength, uint32_t address) Writes &apos;n&apos; bytes of data starting at the specified address. This function schedules a...","GUID-F1C71FFE-A026-4E58-B946-FB7DC6E407A0.html@@@1.4.4.12 OSAL_MUTEX_Unlock Function@@@OSAL_RESULT OSAL_MUTEX_Unlock (OSAL_MUTEX_HANDLE_TYPE* mutexID) Unlocks a mutex. This function unlocks a previously obtained mutex. Mutex must have been created. Param Description mutexID Pointer to...","GUID-F1DBA6FA-9373-4832-9CD9-BDC0B227003B.html@@@1.2.3.4 Library Interface@@@Command System Service library provides the following interfaces: Functions Name Description SYS_CMD_Initialize Initializes data for the instance of the Command Processor module SYS_CMD_ADDGRP Allows...","GUID-F1F40189-8893-4610-82E4-AA9A9F29CAEE.html@@@1.2.11.4.8 SYS_TIME_DelayIsComplete Function@@@bool SYS_TIME_DelayIsComplete ( SYS_TIME_HANDLE handle ) Determines if the given delay timer has completed. This function determines if the requested delay is completed or is still in progress. A...","GUID-F2389E2B-C0EA-4408-B910-EBC4B92C005F.html@@@1.3.1.1 How the Library Works@@@The Emulated EEPROM library is a single-client, single-instance interface. Abstraction Model The Emulated EEPROM library is built on top of NVM (Non-volatile memory) / EFC (Embedded Flash Controller)...","GUID-F27448AA-BF71-4DBC-ACDD-B2CAA20AB723.html@@@1.2.11.4.2 SYS_TIME_Deinitialize Function@@@void SYS_TIME_Deinitialize ( SYS_MODULE_OBJ object ) Deinitializes the specific module instance of the SYS TIMER module This function deinitializes the specific module instance disabling its operation...","GUID-F28E022E-CE8C-4121-A9DD-6599C9EC4F8D.html@@@1.1.7.4.16 DRV_SDSPI_Write Function@@@void DRV_SDSPI_Write ( const DRV_HANDLE handle, DRV_SDSPI_COMMAND_HANDLE* commandHandle, void * sourceBuffer, uint32_t blockStart, uint32_t nBlock ) This routine provides interface to the file system...","GUID-F2C0E62F-7E9C-467D-8630-BD1CD1612C78.html@@@1.1.10.1.4.3 DRV_AT24_Open Function@@@DRV_HANDLE DRV_AT24_Open ( const SYS_MODULE_INDEX drvIndex, const DRV_IO_INTENT ioIntent ) Opens the specified AT24 driver instance and returns a handle to it. This routine opens the specified AT24...","GUID-F4092B61-8FC4-4D6E-A043-E20E2965D24D.html@@@1.2.5.4.11 SYS_DEBUG_BreakPoint Macro@@@# if defined (__DEBUG) // For PIC32M based Devices #define SYS_DEBUG_BreakPoint () __asm__ volatile ( &quot; sdbbp 0&quot; ) // For ARM based Devices #define SYS_DEBUG_BreakPoint () __asm__ __volatile__ ( &quot;bkpt...","GUID-F499493F-2392-4CEC-B4B4-E61FD279CABE.html@@@1.1.3.4.7 DRV_MEMORY_SyncErase Function@@@bool DRV_MEMORY_SyncErase ( const DRV_HANDLE handle, uint32_t blockStart, uint32_t nBlock ); Erase the specified number of memory blocks in Synchronous mode. This function schedules a blocking sector...","GUID-F629157B-1931-4637-91C5-F9BF005ADFB9.html@@@1.2.6.8 SYS_DMA_TRANSFER_EVENT Enum@@@typedef enum { /* Data was transferred successfully. */ SYS_DMA_TRANSFER_COMPLETE, /* Error while processing the request */ SYS_DMA_TRANSFER_ERROR } SYS_DMA_TRANSFER_EVENT; Enumeration of possible DMA...","GUID-F6ADE0BF-13E7-4331-80CE-9FA9B5C33750.html@@@1.1.3.4.27 DRV_MEMORY_EVENT Enum@@@typedef enum { /* Operation has been completed successfully. */ DRV_MEMORY_EVENT_COMMAND_COMPLETE = SYS_MEDIA_EVENT_BLOCK_COMMAND_COMPLETE, /* There was an error during the operation */...","GUID-F6B65A05-37EC-4CCF-AFC3-0EC2EA264CDB.html@@@1.2.3.4.26 SYS_CMD_DEVICE_NODE Struct@@@typedef struct { const SYS_CMD_API* pCmdApi; // Cmd IO APIs const void * cmdIoParam; // channel specific parameter } SYS_CMD_DEVICE_NODE; Defines the data structure to store each command instance...","GUID-F6E3750F-7E4C-4A6C-9993-3028AF3D5457.html@@@1.2.7.4.16 SYS_FS_FileError Function@@@SYS_FS_ERROR SYS_FS_FileError ( SYS_FS_HANDLE handle ); Returns the file specific error. For file system functions which accepts valid handle, any error happening in those functions could be retrieved...","GUID-F70A4A09-5846-4D15-80AC-3CCE1C614881.html@@@1.1.2.4.15 DRV_I2C_ReadTransfer Function@@@bool DRV_I2C_ReadTransfer ( const DRV_HANDLE handle, uint16_t address, void * const buffer, const size_t size ) This is a blocking function that performs a I2C read operation. This function does a...","GUID-F724EC87-6DF5-4689-821F-2757C4994DA9.html@@@1.2.7.4.41 SYS_FS_DriveFormat Function@@@SYS_FS_RESULT SYS_FS_DriveFormat ( const char *drive, const SYS_FS_FORMAT_PARAM *opt, void * work, uint32_t len ); Formats a drive. This function formats a logic drive (create a FAT file system on the...","GUID-F80CCFFC-C9C8-470C-AA7B-0EFA2BB1BEAA.html@@@1.1.13.2.1 How the Library Works@@@The sst26 driver library is a single-client, single-instance based driver interface. Abstraction Model The SST26 driver interface provides read, write and Erase functions that abstract out the...","GUID-F8C37810-7F98-4A93-A8CD-CD3640B1F4FD.html@@@1.1.13.3.4.13 DRV_W25_GeometryGet Function@@@bool DRV_W25_GeometryGet ( const DRV_HANDLE handle, W25_GEOMETRY *geometry ); Returns the geometry of the device. This API gives the following geometrical details of the W25 Flash: Number of...","GUID-F9E815F6-E87D-440E-991F-639B3C38F3D3.html@@@1.1.13.2.4.16 DRV_SST26_GEOMETRY Struct@@@typedef struct { uint32_t read_blockSize; uint32_t read_numBlocks; uint32_t numReadRegions; uint32_t write_blockSize; uint32_t write_numBlocks; uint32_t numWriteRegions; uint32_t erase_blockSize...","GUID-FA0DA23C-BCD9-405F-8CC1-C7AE98205FC3.html@@@1.2.3.4.16 SYS_CMD_MSG_FNC Typedef@@@typedef void (*SYS_CMD_MSG_FNC)( const void * cmdIoParam, const char * str); Identifies a message function API. Message function API. This handle identifies the interface structure of the message...","GUID-FA52B94D-545D-4858-A406-2F8259350271.html@@@1.2.9.8 SYS_PORT_PinOutputEnable Function@@@void SYS_PORT_PinOutputEnable (SYS_PORT_PIN pin) Enables selected IO pin as output. This function enables selected IO pin as output. None. Param Description pin One of the IO pins from the enum...","GUID-FAFE78A4-7186-4E04-A894-E61BF91073CB.html@@@1.2.8.2 SYS_INT_Disable Function@@@bool SYS_INT_Disable ( void ) Disable Global Interrupt This function disables global interrupt and returns the state of the global interrupt prior to disabling it. When global interrupt is disabled...","GUID-FB04B0D6-2FE7-4B11-A4F1-74315F7903E1.html@@@1.2.4.4.5 SYS_CONSOLE_DeviceGet Function@@@SYS_CONSOLE_DEVICE SYS_CONSOLE_DeviceGet ( const SYS_CONSOLE_HANDLE handle) Returns the device type for a given console instance This function returns the device type supported by the given console...","GUID-FC2766BD-E5AF-4007-BA9A-D1E179E8AF51.html@@@1.1.11.1.4 Library Interface@@@AT25 driver library provides the following interfaces: Functions Name Description DRV_AT25_Initialize Initializes the AT25 EEPROM device DRV_AT25_Status Gets the current status of the AT25 driver...","GUID-FC3149C2-1EB6-47A0-8FA6-89584991B2BD.html@@@1.1.3.4.30 MEMORY_DEVICE_TRANSFER_STATUS Enum@@@typedef enum { /* Transfer being processed */ MEMORY_DEVICE_TRANSFER_BUSY, /* Transfer is successfully completed*/ MEMORY_DEVICE_TRANSFER_COMPLETED, /* Transfer had error*/...","GUID-FC39BE07-F826-41F2-886F-EA6C98025B49.html@@@1.2.6.5 SYS_DMA_AddressingModeSetup Function@@@void SYS_DMA_AddressingModeSetup (SYS_DMA_CHANNEL channel, SYS_DMA_SOURCE_ADDRESSING_MODE sourceAddrMode, SYS_DMA_DESTINATION_ADDRESSING_MODE destAddrMode); Setup addressing mode of selected DMA...","GUID-FC8C727E-1368-48E2-88E3-C84B369ABE41.html@@@1.2.7.4.62 SYS_FS_MEDIA_MANAGER_Register Function@@@SYS_FS_MEDIA_HANDLE SYS_FS_MEDIA_MANAGER_Register ( SYS_MODULE_OBJ obj, SYS_MODULE_INDEX index, const SYS_FS_MEDIA_FUNCTIONS *mediaFunctions, SYS_FS_MEDIA_TYPE mediaType ) Function to register media...","GUID-FC8CE371-74D2-415E-9E76-F07C14864558.html@@@1.2.8.8 SYS_INT_SourceIsEnabled Function@@@bool SYS_INT_SourceIsEnabled ( INT_SOURCE source ) Gets the enable/disable status of the specified interrupt source. This function returns the enable/disable status of the specified interrupt...","GUID-FCB3D8DB-8859-49B4-8C77-EC56F4C55439.html@@@1.1.13.3.2 Using The Library@@@The W25 driver provides non-blocking API&apos;s to read, write and erase W25 Flash memory. The W25 driver can be used in following ways: To perform page write to W25 Flash. Here, the memory start address...","GUID-FCE79155-DFAA-434F-B53C-FB851BD38651.html@@@1.1.3.4.33 DRV_MEMORY_INIT Struct@@@typedef struct { /* Attached Memory Device index */ SYS_MODULE_INDEX memDevIndex; /* Flash Device functions */ const DRV_MEMORY_DEVICE_INTERFACE *memoryDevice; /* Flag to indicate if attached memory...","GUID-FD837655-18B3-4251-9DC4-93A822639B35.html@@@1.1.12.1.3 Configuring The Library@@@The AT25DF driver library should be configured through the MHC. The following figures show the MHC configuration window for the AT25DF driver and brief description. AT25DF Driver with SPI peripheral...","GUID-FDE6412C-17D7-4AF5-B4A6-FD8E0FA2CCDD.html@@@1.1.7.4.2 DRV_SDSPI_Status Function@@@SYS_STATUS DRV_SDSPI_Status ( SYS_MODULE_OBJ object ) Provides the current status of the SDSPI driver module. This routine provides the current status of the SDSPI driver module. Function...","GUID-FDFE5A0D-A28F-461F-836F-1AB2362E816C.html@@@1.1.4.4.18 DRV_NAND_FLASH_SkipBlock_PageWrite Function@@@bool DRV_NAND_FLASH_SkipBlock_PageWrite ( const DRV_HANDLE handle, uint16_t blockNum, uint16_t pageNum, uint8_t *data, uint8_t *spare, bool disableBlockCheck ); Writes the data and/or the spare area...","GUID-FEBFF6DB-5F57-4360-90BF-E9DA46037C99.html@@@1.2.3.4.1 SYS_CMD_Initialize Function@@@bool SYS_CMD_Initialize ( const SYS_MODULE_INIT * const init ) Initializes data for the instance of the Command Processor module. This function initializes the Command Processor module. It also...","GUID-FEDD8FB6-058D-48C6-AD72-85A1DFE7DB31.html@@@1.2.7.3 Configuring The Library@@@File System Service Library should be configured via MHC. The following figures show the MHC configuration window for File System Service and brief description. File System configurations with Auto...","GUID-FF110E8F-BB9F-45E9-AB13-7F19C7D3DD20.html@@@1.1.6.4.14 DRV_SDMMC_COMMAND_HANDLE_INVALID Macro@@@#define DRV_SDMMC_COMMAND_HANDLE_INVALID SYS_MEDIA_BLOCK_COMMAND_HANDLE_INVALID SDMMC Driver&apos;s Invalid Command Handle. This value defines the SDMMC Driver Invalid Command Handle. This value is...","GUID-FF457C0B-00B0-4727-AC3E-2B9A6F5B62EE.html@@@1.1.7.2 Using The Library@@@The SDSPI driver builds on top of the SPI PLIB or SPI Driver and provides direct access to the SD Card. It also confirms to the media block layer interface which allows it to register its services...","GUID-FF7CCB48-D53D-41C8-BEA6-C82E725F2B34.html@@@1.2.1.8 SYS_MEDIA_GEOMETRY_TABLE_ENTRY Macros@@@/* Read Region Geometry Table Index Numbers */ #define SYS_MEDIA_GEOMETRY_TABLE_READ_ENTRY ( 0 ) /* Write Region Geometry Table Index Numbers */ #define SYS_MEDIA_GEOMETRY_TABLE_WRITE_ENTRY ( 1 ) /*...","cshelp.html@@@Context Sensitive Help@@@..."];
});